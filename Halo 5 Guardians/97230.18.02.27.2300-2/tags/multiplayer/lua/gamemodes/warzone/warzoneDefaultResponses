defaultMinibossResponses = {}
defaultMinibossResponses.defaults = {}
defaultMinibossResponses.defaults = 
{
	appearedResponse = 
	{
	},
	appearedVictoryAttainableOneTeamFriendlyResponse = 
	{
	},
	appearedVictoryAttainableOneTeamEnemyResponse = 
	{
	},
	appearedVictoryAttainableBothTeamsResponse = 
	{
	},
	exploredPlayerResponse =
	{
	},
	discoveredPlayerResponse =
	{
	},
	discoveredFriendlyProximityResponse =
	{
	},
	discoveredEnemyProximityResponse =
	{
	},
	aliveWithinScoreRangeWinningTeamFriendlyResponse =
	{
	},
	aliveWithinScoreRangeWinningTeamEnemyResponse =
	{
	},
	aliveWithinScoreRangeLosingTeamFriendlyResponse =
	{
	},
	progressPlayerResponse =
	{
	},
	progressAssistResponse =
	{
		{
		},
		{
		},
		{
		}
	},
	progressFriendlyResponse = 
	{
		{
		},
	},
	progressFriendlyProximityResponse =
	{
	},
	progressEnemyResponse = 
	{
	},
	progressEnemyProximityResponse =
	{
	},
	completePlayerResponse =
	{
		{
		},
		{
		},
		{
		}
	},
	completeAssistResponse =
	{
		{
		},
		{
		},
		{
		}
	},
	completeFriendlyResponse = 
	{
		{
		},
		{
		}
	},
	completeFriendlyProximityResponse =
	{	
	},
	completeEnemyResponse = 
	{
	},
	completeEnemyProximityResponse =
	{
	},
	killedTeammatesResponse =
	{
	},
}
defaultMinibossResponses.metatable = {}
defaultMinibossResponses.metatable.__index = defaultMinibossResponses.defaults
function defaultMinibossResponses.new (tab)
	setmetatable (tab, defaultMinibossResponses.metatable)
	return tab
end
function responseValid(response)
	return response ~= nil and 
		((response[1] ~= nil) or
		 (response[2] ~= nil) or
		 (response[3] ~= nil))
end
function applyDefaultMinibossResponses(minibossDefinitions)
	for k,v in pairs (minibossDefinitions) do
		if v.responses.countdownResponse == nil then
			v.responses.countdownResponse = {[30] = {{}}, [10] = {{}}, [0] = {{}}}
		end
		local shouldPopulateProgressAssist = false;
		local shouldPopulateCompleteAssist = false;
		local shouldPopulateProgressPlayer = false;
		if not responseValid(v.responses.progressAssistResponse) then
			shouldPopulateProgressAssist = true;
			v.responses.progressAssistResponse = {}
		end
		if not responseValid(v.responses.completeAssistResponse) then
			shouldPopulateCompleteAssist = true;
			v.responses.completeAssistResponse = {}
		end
		if not responseValid(v.responses.progressPlayerResponse) then
			shouldPopulateProgressPlayer = true;
			v.responses.progressPlayerResponse = {}
		end
		if responseValid(v.responses.completePlayerResponse) then
			for key,val in ipairs (v.responses.completePlayerResponse) do
				if shouldPopulateProgressAssist then
					v.responses.progressAssistResponse[key] = v.responses.completePlayerResponse[key]
				end
				if shouldPopulateCompleteAssist then
					v.responses.completeAssistResponse[key] = v.responses.completePlayerResponse[key]
				end
				if shouldPopulateProgressPlayer then
					v.responses.progressPlayerResponse[key] = v.responses.completePlayerResponse[key]
				end
			end
		end
		defaultMinibossResponses.new (v.responses)
	end
end
function applyMinibossResponsesEmptyMetatable(minibossDefinitions)
	for k,v in pairs (minibossDefinitions) do
		defaultMinibossResponses.new (v.responses)
	end
end