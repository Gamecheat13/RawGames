

/// <auto-generated>
///	 This file was generated by a tool.
///
///	 Tool:	Cell Preprocessor, Version=3.0.0.0
///	 Format:	Concise.  Only contains fields referenced by client code.
///
///	 Changes to this file may cause incorrect behavior and will be lost when the code is regenerated.
/// </auto-generated>
import "bond\core\bond.bond"
import "MaelstromEvent.bond"
import "OsirisIncludes.bond"
import "GameEvents.bond"

namespace cpp i343.Telemetry
namespace csharp Microsoft.Halo.Telemetry.MaelstromEvent.eCellCategory_ai

using Cell_DXGI_Adapter_Desc = Microsoft.Halo.Telemetry.Corinth.Osiris.Cell_DXGI_Adapter_Desc;
using Cell_ScreenResolution = Microsoft.Halo.Telemetry.Corinth.Osiris.Cell_ScreenResolution;
using Cell_System_Info = Microsoft.Halo.Telemetry.Corinth.Osiris.Cell_System_Info;
using CellEventFrequency = Microsoft.Halo.Telemetry.Corinth.Osiris.CellEventFrequency;
using CellMemoryCounter = Microsoft.Halo.Telemetry.Corinth.Osiris.CellMemoryCounter;
using CellMemoryDescriptor = Microsoft.Halo.Telemetry.Corinth.Osiris.CellMemoryDescriptor;
using EventsRange = Microsoft.Halo.Telemetry.Corinth.Osiris.EventsRange;
using GeoLocation = Microsoft.Halo.Telemetry.Corinth.Osiris.GeoLocation;
using PlayerState = Microsoft.Halo.Telemetry.Corinth.Osiris.PlayerState;
using PvEPlayerRoundStats = Microsoft.Halo.Telemetry.Corinth.Osiris.PvEPlayerRoundStats;
using ResourceIdentity = Microsoft.Halo.Telemetry.Corinth.Osiris.ResourceIdentity;
using TeamState = Microsoft.Halo.Telemetry.Corinth.Osiris.TeamState;
using Vector3D = Microsoft.Halo.Telemetry.Corinth.Osiris.Vector3D;
using WorldLocation = Microsoft.Halo.Telemetry.Corinth.Osiris.WorldLocation;


[EventName("AIUnitDamaged")]
[Category("eCellCategory_ai")]
[CategoryVal("8")]
[SubCategory("eCellSubcategoryAi_lifetime")]
[SubCategoryVal("1")]
[Description("Host Ai Damaged Event")]
[FormatString("")]
[Version("3")]
[EventTypeID("0x01080006")]
struct AIUnitDamaged: Microsoft.Halo.Telemetry.MaelstromEvent.CellEventBodyBase
{

	0: uint16 victimAiUnitType;
	1: float victimX;
	2: float victimY;
	3: float victimZ;
	4: uint32 victimDamageSourceHashId;
	5: float victimShieldDamage;
	6: float victimBodyDamage;
	7: float victimRemainingShieldHealth;
	8: float victimRemainingBodyHealth;
	9: uint64 sourcePlayerXuid;
	10: uint16 sourceAiUnitType;
	11: float sourceCurrentX;
	12: float sourceCurrentY;
	13: float sourceCurrentZ;
	14: uint32 sourceDamageTypeHashId;
	15: uint32 sourceDamageSourceHashId;
	16: uint32 sourceDamageModifierEnum;
	17: bool isFriendlyFire;
	18: uint8 victimAvatarId;
	19: uint8 sourceAvatarId;
	20: vector<uint32> victimAttachmentIds;
	21: vector<uint32> sourceAttachmentIds;
};

[EventName("MusketeerSpawn")]
[Category("eCellCategory_ai")]
[CategoryVal("8")]
[SubCategory("eCellSubcategoryAi_lifetime")]
[SubCategoryVal("1")]
[Description("Host: Musketeer Spawn event")]
[FormatString("")]
[Version("4")]
[EventTypeID("0x0108000C")]
struct MusketeerSpawn: Microsoft.Halo.Telemetry.MaelstromEvent.CellEventBodyBase
{

	0: uint16 unitType;
	1: float unitX;
	2: float unitY;
	3: float unitZ;
	4: uint8 avatarId;
	8: uint32 primaryWeaponHashId;
	9: uint32 secondaryWeaponHashId;
	10: uint32 backpackWeaponHashId;
};

[EventName("OrderMusketeer")]
[Category("eCellCategory_ai")]
[CategoryVal("8")]
[SubCategory("eCellSubcategoryAi_lifetime")]
[SubCategoryVal("1")]
[Description("Host: Musketeer ordered")]
[FormatString("")]
[Version("2")]
[EventTypeID("0x0108000B")]
struct OrderMusketeer: Microsoft.Halo.Telemetry.MaelstromEvent.CellEventBodyBase
{

	0: uint16 orderType;
	1: uint16 orderSource;
	2: float targetX;
	3: float targetY;
	4: float targetZ;
	5: uint8 avatarId;
};

[EventName("TeleportMusketeer")]
[Category("eCellCategory_ai")]
[CategoryVal("8")]
[SubCategory("eCellSubcategoryAi_lifetime")]
[SubCategoryVal("1")]
[Description("Host: Musketeer ordered")]
[FormatString("")]
[Version("4")]
[EventTypeID("0x0108000A")]
struct TeleportMusketeer: Microsoft.Halo.Telemetry.MaelstromEvent.CellEventBodyBase
{

	2: float destinationZ;
	3: float sourceX;
	4: float sourceY;
	5: float sourceZ;
	6: float destinationX;
	7: float destinationY;
	8: uint8 avatarId;
};


