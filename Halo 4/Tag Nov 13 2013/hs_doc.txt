(begin <expression(s)>)
returns the last expression in a sequence after evaluating the sequence in order.

(begin_random <expression(s)>)
evaluates the sequence of expressions in random order and returns the last value evaluated.

(begin_count <expression(s)>)
evaluates the specified number of expressions in a sequence in random order and returns the last value evaluated.

(begin_random_count <expression(s)>)
evaluates the specified number of expressions in a sequence in random order and returns the last value evaluated.

(if <boolean> <then> [<else>])
returns one of two values based on the value of a condition.

(cond (<boolean1> <result1>) [(<boolean2> <result2>) [...]])
returns the value associated with the first true condition.

(set <variable name> <expression>)
set the value of a global variable.

(set_silently <variable name> <expression>)
set the value of a global variable without echoing the result.
NETWORK SAFE: Yes (depending on result)

(and <boolean(s)>)
returns true if all specified expressions are true.

(or <boolean(s)>)
returns true if any specified expressions are true.

(+ <number(s)>)
returns the sum of all specified expressions.

(- <number> <number>)
returns the difference of two expressions.

(* <number(s)>)
returns the product of all specified expressions.

(/ <number> <number>)
returns the quotient of two expressions.

(% <number> <number>)
returns the remainder of the division of two numbers

(min <number(s)>)
returns the minimum of all specified expressions.

(max <number(s)>)
returns the maximum of all specified expressions.

(= <expression> <expression>)
returns true if two expressions are equal

(!= <expression> <expression>)
returns true if two expressions are not equal

(> <number> <number>)
returns true if the first number is larger than the second.

(< <number> <number>)
returns true if the first number is smaller than the second.

(>= <number> <number>)
returns true if the first number is larger than or equal to the second.

(<= <number> <number>)
returns true if the first number is smaller than or equal to the second.

(sleep <short> [<script>])
pauses execution of this script (or, optionally, another script) for the specified number of ticks.

(sleep_forever [<script>])
pauses execution of this script (or, optionally, another script) forever.

(sleep_until <boolean> [<short>])
pauses execution of this script until the specified condition is true, checking once per second unless a different number of ticks is specified.

(wake <script name>)
wakes a sleeping script in the next update.

(inspect <expression>)
prints the value of an expression to the screen for debugging purposes.

(branch <condition> <script>)
Stops executing current script when condition met and starts the script indicated in the parameter.

(print_advanced <string> <)
print a string to the screen for debugging purposes.
NETWORK SAFE: Yes

(print_network <string> <)
print a string to the screen for debugging purposes and distributes it to clients.
NETWORK SAFE: Yes

(string <expression>)
creates a string from the expression.
NETWORK SAFE: Yes

(unit <object>)
converts an object to a unit.

(vehicle <object>)
converts an object to a vehicle.

(weapon <object>)
converts an object to a weapon.

(device <object>)
converts an object to a vehicle.

(scenery <object>)
converts an object to a vehicle.

(effect_scenery <object>)
converts an object to a vehicle.

(bool <value>)
evaluates an object as a specific type.
NETWORK SAFE: Yes

(real <value>)
evaluates an object as a specific type.
NETWORK SAFE: Yes

(short <value>)
evaluates an object as a specific type.
NETWORK SAFE: Yes

(long <value>)
evaluates an object as a specific type.
NETWORK SAFE: Yes

(object_move_to_flag <object name> <time> <target flag>)
moves the specified object to the specified flag over the specified timespan.
NETWORK SAFE: Yes

(object_move_to_point <object name> <time> <target point>)
moves the specified object to the specified point over the specified timespan.
NETWORK SAFE: Yes

(object_move_along_point_set <object name> <time> <target point set>)
moves the specified object along an ordered point set over the specified timespan.
NETWORK SAFE: Yes

(object_move_by_offset <object name> <time> <X offset> <Y offset> <Z offset>)
moves the specified object by the specified vector over the specified timespan.
NETWORK SAFE: Yes

(object_rotate_to_flag <object name> <yaw time> <pitch time> <roll time> <target flag>)
rotates the specified object to the specified flags orientation over the specified timespan.
NETWORK SAFE: Yes

(object_rotate_to_point <object name> <yaw time> <pitch time> <roll time> <target point>)
rotates the specified object to aim at the specified point over the specified timespan.
NETWORK SAFE: Yes

(object_rotate_by_offset <object name> <yaw time> <pitch time> <roll time> <yaw degrees> <pitch degrees> <roll degrees>)
rotates the specified object by the specified angles over the specified timespan.
NETWORK SAFE: Yes

(thread <function name>)
runs the specified static Haloscript function in its own thread and continues

(-> <object name> <member function call / object member script name / member variable>)
Call a member script function on an object, or access object member data.
NETWORK SAFE: Yes

(__object_list_dtor <long>)
Destructor function for hs object list type

(evaluate <script>)
Evaluate the given script

(not <boolean>)
returns the opposite of the expression.

(~ <real>)
returns the negative of the specified expression

(pin <real> <real> <real>)
returns the first value pinned between the second two

(print <string>)
prints a string to the console.
NETWORK SAFE: Yes

(log_print <string>)
prints a string to the hs log file.

(queue_exec <string>)
executes a file full of arbitrary haloscript.
NETWORK SAFE: Assumed not

(show_text <string>)
Displays rich text on screen.
NETWORK SAFE: Yes

(show_text_index <long> <string>)
Displays text at the given string index, overwriting any text that might already be displayed in that slot.
NETWORK SAFE: Yes

(clear_all_text)
Clears all rich text currently being displayed.
NETWORK SAFE: Yes

(set_text_defaults)
Restore rich text settings to defaults.
NETWORK SAFE: Yes

(set_text_lifespan <long>)
Set rich text render life span in ticks.
NETWORK SAFE: Yes

(set_text_color <real> <real> <real> <real>)
Set rich text color in ARGB format.
NETWORK SAFE: Yes

(set_text_margins <real> <real> <real> <real>)
Set text margins as percentage offsets from the edges of the screen.
NETWORK SAFE: Yes

(set_text_scale <real>)
Set text scale factor (default 1.0).
NETWORK SAFE: Yes

(set_text_indents <long> <long>)
Set text indents.
Param 1: initial indent. Param 2: paragraph indent (indents all lines after the first)
NETWORK SAFE: Yes

(set_text_wrap <boolean> <boolean>)
Set text wrap modes.
Param 1: horizontal wrap. Param 2: veritcal wrap
NETWORK SAFE: Yes

(set_text_font <font>)
Set whether the text should be bottom-justified (aligned to the bottom margin)
NETWORK SAFE: Yes

(set_text_justification <text_justification>)
Set whether the text should be bottom-justified (aligned to the bottom margin)
NETWORK SAFE: Yes

(set_text_alignment <text_alignment>)
Set the text alignment
NETWORK SAFE: Yes

(set_text_shadow_style <text_drop_shadow_type>)
Set whether the text should be bottom-justified (aligned to the bottom margin)
NETWORK SAFE: Yes

(set_text_shadow_color <real> <real> <real> <real>)
Set rich text shadow color in ARGB format.
NETWORK SAFE: Yes

(debug_scripting_show_thread <string> <boolean>)
shows or hides the display of any thread containing the given substring.

(debug_script_thread <string_id> <boolean>)
Verbose threads spew to log about script and function calls.

(debug_scripting <boolean>)
Turn on/off hs script debugging.

(debug_scripting_globals <boolean>)
Turn on/off hs global debugging.

(debug_scripting_variable <string> <boolean>)
Turn on/off debugging of a specific global variable); enclose the variable name with single quote characters ('my_variable')

(debug_scripting_variable_all <boolean>)
Turn on/off debugging of all global variables

(breakpoint <string>)
If breakpoints are enabled, pause execution when this statement is hit (displaying the given message).

(kill_active_scripts)
Terminates all currently running threads.

(kill_script <script>)
Immediately terminate the thread running the specified script

(IsThreadValid <long>)
Returns true if the given thread index is a valid running thread. Returns false if no running thread with the given index exists.

(GetCurrentThreadId)
Retrieves the current executing thread index

(kill_thread <long>)
Kill the specified thread

(script_started <string_id>)
Returns true if the continuous, dormant or startup script was started.

(script_finished <string_id>)
Returns true if the continuous, dormant or startup script was finished.

(local_players)
returns a list of the living player units on the local machine

(players)
returns a list of the living player units

(players_human)
returns a list of the living spartan player units

(players_elite)
returns a list of the living elite player units

(player_get <long>)
Get a player unit by absolute index

(player_possess_ai <long> <ai>)
Cause player of absolute index to possess specified AI

(player_get_first_alive)
Get the first player who is alive

(player_get_first_valid)
Get the first player who is valid and connected, alive or dead

(biped_is_alive <unit>)
Returns whether the biped is alive or dead

(player_in_game_get <long>)
Get a player by absolute index

(human_player_in_game_get <long>)
Get a player by absolute index

(elite_player_in_game_get <long>)
Get a player by absolute index

(player_is_in_game <player>)
Returns true if the player is currently in the game.

(editor_mode)
return if we are currently in the editor

(kill_volume_enable <trigger_volume>)
enables a kill volume

(kill_volume_disable <trigger_volume>)
disables a kill volume

(trigger_volume_from_string <string_id>)
retrieves the trigger volume with the provided name.

(volume_teleport_players_not_inside <trigger_volume> <cutscene_flag>)
moves all players outside a specified trigger volume to a specified flag exiting vehicles.

(volume_teleport_players_inside <trigger_volume> <cutscene_flag>)
moves all players inside the specified trigger volume to a specified flag exiting vehicles.

(volume_teleport_players_not_inside_with_vehicles <trigger_volume> <cutscene_flag>)
moves all players outside a specified trigger volume to a specified flag with vehicles.

(volume_teleport_players_inside_with_vehicles <trigger_volume> <cutscene_flag>)
moves all players inside the specified trigger volume to a specified flag with vehicles.

(teleport_player_to_flag <player> <cutscene_flag> <boolean>)
Teleports a player to the specified flag with or without their vehicle.

(volume_test_object <trigger_volume> <object>)
returns true if the specified object is within the specified volume.

(volume_test_object_bounding_sphere_center <trigger_volume> <object>)
returns true if the specified object's bounding sphere center is within the specified volume.

(volume_test_objects <trigger_volume> <object_list>)
returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed

(volume_test_objects_all <trigger_volume> <object_list>)
returns true if any of the specified objects are within the specified volume. trigger volume must have been postprocessed

(volume_test_players <trigger_volume>)
returns true if any players are within the specified volume. trigger volume must have been postprocessed

(volume_test_players_all <trigger_volume>)
returns true if all players are within the specified volume. trigger volume must have been postprocessed

(volume_return_objects <trigger_volume>)
returns list of objects in volume or (max 128).

(volume_return_objects_by_type <trigger_volume> <long>)
returns list of objects in volume or (max 128).

(volume_return_objects_by_campaign_type <trigger_volume> <long>)
returns list of objects of the specified campaign metagame type that is in the volume or (max 128).

(zone_set_trigger_volume_enable <string_id> <boolean>)
enables/disables the trigger volume(s) with the given name that cause zone set switches

(volume_test_players_lookat <trigger_volume> <real> <real>)
returns true if the trigger volume is viewable by any player (with the specified parameters). trigger volume must have been postprocessed

(volume_test_players_all_lookat <trigger_volume> <real> <real>)
returns true if the trigger volume is viewable by all players (with the specified parameters). trigger volume must have been postprocessed

(trigger_volume_stats)
Print stats about current trigger volume usage.

(list_get <object_list> <short>)
returns an item in an object list.

(list_count <object_list>)
returns the number of objects in a list

(list_count_not_dead <object_list>)
returns the number of objects in a list that aren't dead

(effect_new <effect> <cutscene_flag>)
starts the specified effect at the specified flag.

(effect_delete_from_flag <effect> <cutscene_flag>)
deletes the specified effect at the specified flag.

(effect_kill_from_flag <effect> <cutscene_flag>)
Deletes the specified effect at the specified flag, and kills all the particles from it.

(effect_restart_all_instances <effect>)
Deletes the specified effect at all instance and restarts them.

(effect_delete_all_in_volume <trigger_volume>)
deletes all unattached effects in the given volume.

(effect_new_random <effect> <point_reference>)
starts the specified effect at one of the points in the given a point set.

(effect_new_random <effect> <point_reference> <real> <real>)
starts the specified effect at one of the points in the given a point set, with a given yaw/pitch perturbation (in that order)

(effect_new_at_ai_point <effect> <point_reference>)
starts the specified effect at the specified ai point.

(effect_new_at_point_set_point <effect> <point_reference> <long>)
starts the specified effect at one of the points in the given a point set.

(effect_new_on_object_marker <effect> <object> <string_id>)
starts the specified effect on the specified object at the specified marker.

(effect_new_on_object_marker_loop <effect> <object> <string_id>)
starts the specified effect on the specified object at the specified marker.  Effect loops.

(effect_stop_object_marker <effect> <object> <string_id>)
Stops a running effect that's on a specified object and marker.

(effect_kill_object_marker <effect> <object> <string_id>)
Stops a running effect that's on a specified object and marker, and kills all the particles from it.

(effect_new_on_ground <effect> <object>)
starts the specified effect on the ground underneath the object's root.

(effect_attached_to_camera_new <effect>)
starts the specified effect attached to the camera.

(effect_attached_to_camera_stop <effect>)
stops the specified effect attached to the camera.

(effect_attached_to_camera_set_scale <effect> <real>)
sets the scale of the specified effect attached to the camera.

(effect_new_between_points <effect> <cutscene_flag> <cutscene_flag>)
starts the specified effect between the specified flags.

(effect_new_between_object_markers <effect> <object> <string_id> <object> <string_id>)
starts the specified effect between the specified objects at the specified markers.

(SetSkyObjectOverride <string_id>)
Overrides the sky from the .scenario file with an explicit sky.  NONE to clear override.

(move_cutscene_flag <cutscene_flag> <real> <real> <real> <real> <real> <real> <real>)
moves a cutscene flag (from Maya)

(set_light_cone_parameters <cutscene_flag> <real> <real> <real> <real> <real> <real> <real>)
changes the parameters on a light cone (from Maya)

(screen_effect_new <any_tag> <cutscene_flag>)
starts the specified area screen effect at the specified flag.

(screen_effect_delete <any_tag> <cutscene_flag>)
deletes the specified area screen effect at the specified flag.

(object_dissolve_from_marker <object> <string_id> <string_id>)
activates an object's dissolve of a specified type from the specified marker.

(object_set_clip_plane <object> <cutscene_flag>)
turns on a clip plane for the object at the given marker.

(object_clear_clip_plane <object>)
turns off the clip plane for the given object.

(damage_new <damage> <cutscene_flag>)
causes the specified damage at the specified flag.

(damage_object_effect <damage> <object>)
causes the specified damage at the specified object.

(damage_objects_effect <damage> <object_list>)
causes the specified damage at the specified object list.

(damage_object <object> <string_id> <real>)
causes the specified damage at the specified object.

(damage_object_with_fire <object> <string_id> <real>)
causes the specified damage at the specified object using fire damage response effect.

(damage_object_with_fire_from_object <object> <object> <string_id> <real>)
causes the specified damage at the specified object using fire damage response effect with the fire objects position for damage origin.

(damage_object_with_fire_from_trigger_volume <object> <trigger_volume> <string_id> <real>)
causes the specified damage at the specified object using fire damage response effect with the trigger volumes centre of mass for damage origin.

(damage_objects <object_list> <string_id> <real>)
causes the specified damage at the specified object list.

(damage_players <damage>)
damages all players with the given damage effect

(soft_ceiling_enable <string_id> <boolean>)
turn on or off a soft ceiling

(player_damaged_by_unit <player> <long> <short>)
Has player been damaged by given unit within last X ticks?

(player_damaged_by_ai <player> <ai> <short>)
Has player been damaged by specified AI within last X ticks?

(player_damaged_by_weapon <player> <object_definition> <short>)
Has player been damaged by given weapon type within last X ticks?

(players_damaged_by_unit <object_list> <long> <short>)
Has anyone in player unit list been damaged by given unit within last X ticks?

(players_damaged_by_ai <object_list> <ai> <short>)
Has anyone in player unit list been damaged by specified AI within last X ticks?

(players_damaged_by_weapon <object_list> <object_definition> <short>)
Has anyone in player unit list been damaged by given weapon type within last X ticks?

(object_valid <object_name>)
returns whether an object by this name exists

(object_active_for_script <object>)
returns whether the object is in a state where its scripts are running.

(find_object_name_from_string_id <string_id>)
find an object name using a string id.

(object_create <object_name>)
creates an object from the scenario.

(object_create_string_id <string_id>)
creates an object from the scenario.

(object_create_variant <object_name> <string_id>)
creates an object from the scenario with a given variant.

(object_create_clone <object_name>)
creates an object, potentially resulting in multiple objects if it already exists.

(object_create_anew <object_name>)
creates an object, destroying it first if it already exists.

(object_create_if_necessary <object_name>)
creates an object if it doesn't already exists.

(object_create_folder <folder>)
creates all the objects in the given folder

(object_create_folder_anew <folder>)
creates all the objects in the given folder

(object_destroy <object>)
destroys an object.

(object_destroy_all)
destroys all non player objects.

(object_destroy_type_mask <long>)
destroys all objects matching the type mask

(object_destroy_list <object_list>)
destroys all objects in a list.

(objects_delete_by_definition <object_definition>)
deletes all objects of type <definition>

(object_destroy_folder <folder>)
destroys all objects in the given folder.

(object_hide <object> <boolean>)
hides or shows the object passed in

(object_set_shadowless <object> <boolean>)
set/reset shadow castingness of object

(object_set_allegiance <object> <team>)
sets what campaign team the object belongs

(lookup_object_name_index_by_name <object_name>)
displays the scenario object index for the given name
NETWORK SAFE: N/A

(lookup_folder_index_by_name <folder>)
displays the scenario folder index for the given name
NETWORK SAFE: N/A

(hs_object_buckling_magnitude_get <object>)
returns the amoount [0-1] that a scarab is buckling

(object_function_set <long> <real>)
sets a global object function (0-3) to value

(cortana_rampancy_set <real>)
sets Cortana's rampancy value, from 0 to 1

(cortana_rampancy_get)
Returns Cortana's rampancy value

(self_illum_color_setting_set <long>)
Sets Forerunner self illumination color setting.

(self_illum_color_setting_get)
Gets Forerunner self illumination color setting.

(object_set_function_variable <object> <string_id> <real> <real>)
sets funciton variable for sin-o-matic use

(object_set_cinematic_function_variable <object> <boolean> <string_id> <real> <real>)
sets funciton variable for sin-o-matic use
NETWORK SAFE: Unknown, assumed unsafe

(object_clear_cinematic_function_variable <object> <boolean> <string_id>)
clears one funciton variables for sin-o-matic use
NETWORK SAFE: Unknown, assumed unsafe

(object_clear_all_cinematic_function_variables <object> <boolean>)
clears all funciton variables for sin-o-matic use
NETWORK SAFE: Unknown, assumed unsafe

(object_dynamic_simulation_disable <object> <boolean>)
disabled dynamic simulation for this object (makes it fixed)

(object_set_phantom_power <object> <boolean>)
sets phantom power to be latched at 1.0f or 0.0f

(object_set_phantom_directional_multiplier <object> <real>)
Sets directional acceleration multiplier.

(object_wake_physics <object>)
wakes physics of an object.  For example it would make an usupported crate fall

(object_get_at_rest <object>)
returns whether or not an object's physics is at rest

(object_dispose <object>)
marks a placed object as garbage to be collected on next pass

(object_get_x <object>)
returns x component of object's world location

(object_get_y <object>)
returns y component of object's world location

(object_get_z <object>)
returns z component of object's world location

(object_set_ranged_attack_inhibited <object> <boolean>)
FALSE prevents object from using ranged attack

(object_set_melee_attack_inhibited <object> <boolean>)
FALSE prevents object from using melee attack

(objects_dump_memory)
debugs object memory usage

(dump_current_zone_set_objects)
dumps objects loaded in the current zone set according to BSP

(object_get_maximum_vitality <object> <boolean>)
object_get_maximum_vitality <object> <ignoreDifficulty_bool>

(object_get_health <object>)
returns the health [0,1] of the object, returns -1 if the object does not exist

(object_set_health <object> <real>)
set the health [0,1] of the object

(object_get_shield <object>)
returns the shield [0,1] of the object, returns -1 if the object does not exist

(object_set_shield_effect <object> <real> <real>)
sets the shield response effect (not current shield amount) to a given value over the given number of seconds (cinematic use only, remember to call (object_set_shield_effect 0 0) after use!)

(object_set_physics <object> <boolean>)
prevents an object from running physics or colliding with any other objects

(object_override_physics_motion_type <object> <long>)
overrides the motion type of the object [1st paramater object, 2nd parameter 0:default, 1:fixed, 2:keyframed, 3:dynamic]

(object_get_parent <object>)
returns the parent of the given object

(objects_attach <object> <string_id> <object> <string_id>)
attaches the second object to the first both strings can be empty

(objects_physically_attach <object> <string_id> <object> <string_id>)
attaches the second object to the first and keeps the child physical both strings can be empty

(object_at_marker <object> <string_id>)
returns the object attached to the marker of the given parent object

(objects_detach <object> <object>)
detaches from the given parent object the given child object

(object_set_scale <object> <real> <short>)
sets the scale for a given object and interpolates over the given number of frames to achieve that scale

(object_set_velocity <object> <real>)
Sets the (object-relative) forward velocity of the given object

(object_get_bsp <object>)
Returns the BSP index that the object is in

(object_get_velocity <object>)
Returns the singular velocity of the object

(object_set_as_fireteam_target <object> <boolean>)
sets the object as something that the fireteam selection process is interested in.
2/17/10 - See engineering if you need this.  We removed it because it was destroying perf

(object_is_reserved <object>)
checks whether a given object has been reserved by a fireteam 

(object_set_velocity <object> <real> <real> <real>)
Sets the (object-relative) velocity of the given object

(object_set_angular_velocity <object> <real> <real> <real>)
Sets the (object-relative) angular velocity of the given object

(object_set_deleted_when_deactivated <object>)
when this object deactivates it will be deleted

(object_copy_player_appearance <object> <long>)
copy appearance into object from player n (starts counting from 0)

(object_model_target_destroyed <object> <string_id>)
returns TRUE if the specified model target is destroyed

(object_model_targets_destroyed <object> <string_id>)
returns TRUE if the specified model target is destroyed

(object_enable_damage_section <object> <string_id> <real>)
enables the specified damage section on the specified object with the specified initial vitality(mostly for debugging purposes)

(object_disable_damage_section <object> <string_id>)
disables the specified damage section on the specified object (mostly for debugging purposes)

(object_damage_damage_section <object> <string_id> <real>)
applies damage to a damage section, causing all manner of effects/constraint breakage to occur

(object_damage_repair_section <object> <string_id> <real>)
applies repair to a damage section
NETWORK SAFE: Yes

(object_cannot_die <object> <boolean>)
Set whether the object can die from damage or not (as opposed to by scripting)

(object_cannot_die_except_kill_volumes <object> <boolean>)
Set whether the object can die from damage or not (as opposed to by scripting), except for kill volumes.

(object_ignores_emp <object> <boolean>)
Sets whether the object will by immune to EMP damage side effects (ie: vehicle disabling)

(object_vitality_pinned <object>)
returns TRUE if the object's vitality is currently pinned at some minimum value because it cannot die.

(garbage_collect_now)
causes all garbage objects except those visible to a player to be collected immediately

(garbage_collect_unsafe)
forces all garbage objects to be collected immediately, even those visible to a player (dangerous!)

(garbage_collect_multiplayer)
runs multiplayer garbage collection

(object_cannot_take_damage <object_list>)
prevents an object from taking damage

(object_get_recent_body_damage <object>)
Get object recent body damage

(object_get_recent_shield_damage <object>)
Get object recent shield damage

(object_can_take_damage <object_list>)
allows an object to take damage again

(object_immune_to_friendly_damage <object_list> <boolean>)
controls whether an object takes damage from friendly objects

(object_cinematic_lod <object> <boolean>)
makes an object use the highest lod for the remainder of the levels' cutscenes.

(object_cinematic_collision <object> <boolean>)
makes an object not collide with other cinematic collision objects.

(object_cinematic_visibility <object> <boolean>)
makes an object bypass visibility and always render during cinematics.

(objects_predict <object_list>)
loads textures/geometry/sounds necessary to present objects that are about to come on-screen

(objects_predict_high <object_list>)
loads textures/geometry/sounds necessary to present objects that are about to come on-screen

(objects_predict_low <object_list>)
loads textures/geometry/sounds necessary to present objects that are about to come on-screen

(object_type_predict_high <object_definition>)
loads textures necessary to draw an object that's about to come on-screen.

(object_type_predict_low <object_definition>)
loads textures necessary to draw an object that's about to come on-screen.

(object_type_predict <object_definition>)
loads textures necessary to draw an object that's about to come on-screen.

(object_teleport <object> <cutscene_flag>)
moves the specified object to the specified flag.

(object_teleport_to_ai_point <object> <point_reference>)
moves the specified object to the specified ai point.

(object_set_orientation_direct <object> <real> <real> <real> <real> <real> <real>)
moves the specified object to the given world-space position and orientation

(object_set_orientation_direct_by_id <long> <real> <real> <real> <real> <real> <real>)
moves the specified (by UID) object to the given world-space position and orientation

(object_set_child_interaction_locked <object> <boolean>)
Set or clear a lock on the interaction with any children of this object.  Use to lock the contents of a closed crate

(object_set_cinematic_visibility <object> <boolean>)
Turn on or off forced inclusion of this object in the visible set, as if a cinematic object.  Use with caution.  Use to make control object device machines part of the scene so children don't become inactive.  <object> <true/false>

(object_type_get_variant_index <object_definition> <string_id>)
Returns variant index from object tag and variant name.

(object_teleport_to_object <object> <object>)
moves the specified object to in front of the specified object.
NETWORK SAFE: Unknown, assumed unsafe

(player_teleport_to_location <real> <real> <real> <real> <real> <real>)
teleports player to a given location

(prefab_set_scale <long> <long> <real>)
sets the scale of a prefab, and all of its children.
NETWORK SAFE: Unknown, assumed unsafe

(prefab_set_rotation <long> <long> <real> <real> <real> <real>)
sets the rotation of a prefab, and all of its children.
NETWORK SAFE: Unknown, assumed unsafe

(prefab_set_translation <long> <long> <real> <real> <real>)
sets the translation of a prefab, and all of its children.
NETWORK SAFE: Unknown, assumed unsafe

(object_set_facing <object> <cutscene_flag>)
turns the specified object in the direction of the specified flag.

(object_set_shield <object> <real>)
sets the shield vitality of the specified object (between 0 and 1).

(object_set_shield_stun <object> <real>)
set how long the shield will be stunned for, 0 is unstunned

(object_set_shield_stun_infinite <object>)
make this objects shield be stunned permanently

(object_set_permutation <object> <string_id> <string_id>)
sets the desired region (use "" for all regions) to the permutation with the given name, e.g. (object_set_permutation flood "right arm" ~damaged)

(object_set_variant <object> <string_id>)
sets the specified object to the specified model variant

(object_set_region_state <object> <string_id> <model_state>)
sets the desired region (use "" for all regions) to the model state with the given name, e.g. (object_set_region_state marine head destroyed)

(object_set_model_state_property <object> <long> <boolean>)
sets the desired region (use "" for all regions) to the model state with the given name, e.g. (object_set_region_state marine head destroyed)

(object_get_region_properties <object> <string_id>)
gets the current model properties of the desired region, e.g. (object_get_region_properties marine head)
NETWORK SAFE: No

(objects_can_see_object <object_list> <object> <real>)
returns true if any of the specified units are looking within the specified number of degrees of the object.

(objects_can_see_flag <object_list> <cutscene_flag> <real>)
returns true if any of the specified units are looking within the specified number of degrees of the flag.

(objects_distance_to_object <object_list> <object>)
returns minimum distance from any of the specified objects to the specified destination object. (returns -1 if there are no objects to check)

(objects_distance_to_flag <object_list> <cutscene_flag>)
returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)

(objects_distance_to_point <object_list> <point_reference>)
returns minimum distance from any of the specified objects to the specified flag. (returns -1 if there are no objects, or no flag, to check)

(ObjectOverrideNavMeshCutting <object> <boolean>)
force an object to cut or not cut the navmesh

(ObjectOverrideNavMeshObstacle <object> <boolean>)
force an object to generate or not generate navmesh obstacles

(map_info)
prints the map, zone set, active bsps, and current bsp

(position_predict <real> <real> <real>)
in: x, y, z position. loads textures/geometry/sounds necessary to present locations that are about to come on-screen.

(shader_predict <shader>)
in: shader name. loads textures necessary for a shader.

(bitmap_predict <bitmap>)
in: bitmap name. loads all the bitmaps in that bitmap group

(script_recompile)
recompiles scripts.

(script_doc)
saves a file called hs_doc.txt with parameters for all script commands.

(help <string>)
prints a description of the named function.

(game_engine_objects)
returns a list of the special game engine objects

(random_range <short> <short>)
returns a random value in the range [lower bound, upper bound]

(real_random_range <real> <real>)
returns a random value in the range [lower bound, upper bound]

(random_force_value <string> <real>)
makes any random for the purpose return the supplied value
NETWORK SAFE: Unknown, assumed unsafe

(random_display_value <string>)
display the value for the given random purpose
NETWORK SAFE: Unknown, assumed unsafe

(physics_constants_reset)
resets all physics constants to earthly values

(physics_set_gravity <real>)
set global gravity acceleration relative to halo standard gravity

(physics_get_gravity)
Get global gravity acceleration relative to halo standard gravity

(physics_toggle_force_gravity_actions <boolean> <real>)
Toggle forcing gravity actions on all objects that get created

(physics_set_velocity_frame <real> <real> <real>)
sets a local frame of motion for updating physics of things that wish to respect it

(physics_disable_character_ground_adhesion_forces <real>)
turn off ground adhesion forces so you can play tricks with gravity

(object_set_gravity <object> <real> <boolean>)
Sets the gravity local to this object. This is relative to Halo gravity(Earth*1.3), just like physics_set_gravity

(physics_remove_all_gravity_actions)
turn off all gravity actions

(get_time_is_time <long> <long> <long> <long> <long> <long>)
In: Year,Month,Day,Hour,Minute,Seconds. Returns true if the time specified is the current time. Mask out inputs with -1.

(localized_physics_debug_simulator_set_enabled <boolean>)
enables/disables a test simulation of localized physics isolated from all other physics. [bool enabled]

(localized_physics_debug_simulator_setup_from_object <object> <object>)
Simulates a debug object at the center of mass of the passed in object. [object early mover, object target]

(localized_physics_debug_simulator_setup_relative_position <object> <real> <real> <real>)
Simulates a debug object at a position relative to the early mover [object early mover, real x, real y, real z]

(localized_physics_debug_simulator_realign)
realigns the simulated object with the early mover [void]

(havok_debug_start)
start up the havok visual debugger
NETWORK SAFE: Unknown, assumed unsafe
WARNING: using this function will make the film of this game go out of sync

(havok_debug_stop)
stops the havok debug capture

(havok_dump_world <string> <boolean>)
dump the state of the havok world, with our without a movie

(havok_dump_world_close_movie)
end the capture of a havok dump movie

(havok_profile_start)
start profiling havok

(havok_profile_stop)
stop profiling havok, and save the results

(havok_profile_range <long> <long>)
captures timers and a movie of a specific tick range

(havok_reset_allocated_state)
strips down and builds back up all allocated havok memory

(havok_memory_enable_callstack_tracing <boolean>)
Enables or disables Havok memory system callstack traces.

(havok_memory_dump_to_files)
Dumps stacktrace and tracker data to files.

(breakable_surfaces_enable <boolean>)
enables or disables breakability of all breakable surfaces on level

(HavokRemoveBSPRigidBodies <long>)
Remove Bsp Rigid Body.

(HavokAddBSPRigidBodies <long>)
Remove Bsp Rigid Body.

(breakable_surfaces_reset)
restores all breakable surfaces

(recording_play <unit> <cutscene_recording>)
make the specified unit run the specified cutscene recording.

(recording_play_and_delete <unit> <cutscene_recording>)
make the specified unit run the specified cutscene recording, deletes the unit when the animation finishes.

(recording_play_and_hover <vehicle> <cutscene_recording>)
make the specified vehicle run the specified cutscene recording, hovers the vehicle when the animation finishes.

(recording_kill <unit>)
kill the specified unit's cutscene recording.

(recording_time <unit>)
return the time remaining in the specified unit's cutscene recording.

(render_lights <boolean>)
enables/disables dynamic lights

(print_light_state)
outputs text light state

(render_lights_enable_cinematic_shadow <boolean> <object> <string_id> <real>)
enable/disable the specified unit to receive cinematic shadows where the shadow is focused about a radius around a marker name

(texture_camera_set_object_marker <object> <string_id> <real>)
sets the render texture camera to a given object marker

(texture_camera_set_position <real> <real> <real>)
sets the render texture camera position

(texture_camera_set_target <real> <real> <real>)
sets the render texture camera target

(texture_camera_attach_to_object <object> <string_id>)
attaches the render texture camera to a given object marker

(texture_camera_target_object <object> <string_id>)
targets the render texture camera to view a given object marker

(texture_camera_position_world_offset <real> <real> <real>)
adds a worldspace offset to the current texture camera position

(texture_camera_on)
turns on the render texture camera

(texture_camera_bink)
turns on the render texture camera and renders a bink to it

(texture_camera_off)
turns off the render texture camera

(texture_camera_set_aspect_ratio <real>)
sets the texture camera aspet ratio

(texture_camera_set_resolution <long> <long>)
sets the texture camera render resolution

(texture_camera_render_mode <long>)
switches the texture camera render mode

(texture_camera_set_fov <real>)
sets the field of view on the texture camera, in degrees

(texture_camera_set_fov_frame_target <real>)
zooms the field of view to frame the target, with target zoom factor to zoom closer

(texture_camera_enable_dynamic_lights <boolean>)
toggle rendering of dynamic lights in the texture camera

(hud_camera_on <long>)
turns on the hud camera

(hud_camera_off <long>)
turns off the hud camera

(hud_camera_set_position <long> <real> <real> <real>)
sets the render texture camera position

(hud_camera_set_target <long> <real> <real> <real>)
sets the render texture camera target

(hud_camera_attach_to_object <long> <object> <string_id>)
attaches the render texture camera to a given object marker

(hud_camera_target_object <long> <object> <string_id>)
targets the render texture camera to view a given object marker

(hud_camera_structure <long> <boolean>)
toggle rendering of structure in the hud camera

(hud_camera_highlight_object <long> <object> <real> <real> <real> <real>)
highlights an object in the given color

(hud_camera_clear_objects <long>)
clears all objects

(hud_camera_spin_around <long> <object>)
makes the hud camera spin around the given object

(hud_camera_from_player_view <long>)
aligns the hud camera to the player camera

(hud_camera_window <long> <real> <real> <real> <real>)
sets the render window of the hud camera (0...1)

(enable_first_person_fov <object> <boolean> <short>)
enable or disable the first-person FOV tweak

(render_debug_texture_camera <boolean>)
toggles displaying the texture camera in the corner of the screen

(render_debug_cheap_particles <boolean>)
toggles displaying the cheap particle buffer in the corner of the screen

(render_debug_rain_occlusion <boolean>)
toggles displaying the rain occlusion in the corner of the screen

(render_debug_rain_fog <boolean>)
toggles rendering rain fog

(debug_rain_toggle)
toggles rain debug modes

(weather_animate <string_id> <real> <real>)
turns on the named weather to a specified amount in the given seconds

(weather_animate_force <string_id> <real> <real>)
turns on the named weather to a specified amount in the given seconds

(debug_structure_cluster <long> <long>)
specify a structure and cluster to debug

(render_debug_structure_cluster_visibility <long>)
enables cluster visibility debugging

(render_debug_structure_cluster_fog <long>)
enables cluster fog debugging

(render_debug_structure_fog_plane <long>)
enables fog plane debugging

(render_debug_structure_fog_plane_infinite_extent <long>)
enables fog plane debugging

(render_debug_structure_fog_zone <long>)
enabled fog zone debugging

(render_debug_structure_fog_zone_floodfill <long>)
enables fog zone debugging

(render_debug_structure_all_fog_planes <boolean>)
enables fog plane debugging (all)

(render_debug_structure_all_cluster_errors <boolean>)
enables cluster error debugging (all)

(render_debug_structure_line_opacity <real> <real> <real> <real>)
sets the opacity (0 is default)

(render_debug_structure_text_opacity <real> <real> <real> <real>)
sets the opacity (0 is default)

(render_debug_structure_opacity <real> <real> <real> <real>)
sets the opacity (0 is default)

(render_debug_structure_non_occluded_fog_planes <boolean>)
controls non-occluded fog plane debugging

(render_debug_structure_lightmaps_use_pervertex)
sets the lightmap preference to per-vertex, ignores per-pixel if available

(render_debug_structure_lightmaps_use_reset)
resets the lightmap preference setting and updates the internal lightmap bsp data if necessary

(render_debug_structure_lightmaps_sample_enable)
enables visualization of match samples if available

(render_debug_structure_lightmaps_sample_disable)
disables visualization of match samples

(render_debug_query_object_bitmaps <string>)
substring of object definition name to spew out it's debug usage

(render_debug_query_bsp_resources <long> <boolean>)
BSP index and whether to spit out all bitmaps used

(render_debug_query_all_object_resources)
Outputs text of texture and geometry memory usage

(render_debug_object_list)
Outputs list of active objects.

(render_debug_query_d3d_resources)
Outputs text of d3d resource usage

(render_debug_text_using_simple_font <boolean>)
toggles use of the much faster simple_font system for debug text rendering

(render_postprocess_color_tweaking_reset)
resets hue saturation filters to default

(render_debug_wrinkle_weights_a <real> <real> <real> <real>)
manually set wrinkle weights for mask a

(render_debug_wrinkle_weights_b <real> <real> <real> <real>)
manually set wrinkle weights for mask b

(render_debug_wrinkle_weights_from_console <boolean>)
toggles whether debug wrinkle weights come from animation data or console commands

(scenery_animation_start <scenery> <animation_graph> <string_id>)
starts a custom animation playing on a piece of scenery

(scenery_animation_start_loop <scenery> <animation_graph> <string_id>)
starts a custom looping animation playing on a piece of scenery

(scenery_animation_start_relative <scenery> <animation_graph> <string_id> <object>)
starts a custom animation playing on a piece of scenery relative to a parent object

(scenery_animation_start_relative_loop <scenery> <animation_graph> <string_id> <object>)
starts a custom looping animation playing on a piece of scenery relative to a parent object

(scenery_animation_start_at_frame <scenery> <animation_graph> <string_id> <short>)
starts a custom animation playing on a piece of scenery at a specific frame

(scenery_animation_start_relative_at_frame <scenery> <animation_graph> <string_id> <object> <short>)
starts a custom animation playing on a piece of scenery relative to a specific cutscene flag at a specific frame

(scenery_animation_idle <scenery>)
starts the idle animation (if any) for a piece of scenery

(scenery_get_animation_time <scenery>)
returns the number of ticks remaining in a custom animation (or zero, if the animation is over).

(unit_can_blink <unit> <boolean>)
allows a unit to blink or not (units never blink when they are dead)

(unit_set_active_camo <unit> <boolean> <real>)
enable or disable active camo for the given unit over the specified number of seconds

(unit_toggle_open <unit>)
Toggles the hatches on the given unit

(unit_open <unit>)
opens the hatches on the given unit

(unit_close <unit>)
closes the hatches on a given unit

(unit_kill <unit>)
kills a given unit, no saving throw

(unit_kill_silent <unit>)
kills a given unit silently (doesn't make them play their normal death animation or sound)

(unit_kill_list_silent <object_list>)
kills a list of units silently (doesn't make them play their normal death animation or sound)

(unit_is_emitting <unit>)
returns whether or not the given unit is current emitting an ai

(unit_is_emp_stunned <unit>)
This will return whether the unit is stunned by EMP damage

(unit_get_custom_animation_time <unit>)
returns the number of ticks remaining in a unit's custom animation (or zero, if the animation is over).

(unit_stop_custom_animation <unit>)
stops the custom animation running on the given unit.

(custom_animation <unit> <animation_graph> <string_id> <boolean>)
starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)

(custom_animation_loop <unit> <animation_graph> <string_id> <boolean>)
starts a custom animation playing on a unit (interpolates into animation if last parameter is TRUE)

(custom_animation_hold_last_frame <unit> <animation_graph> <string_id> <boolean>)
starts a custom animation playing on a unit and holds on the last frame (interpolates into animation if last parameter is TRUE)

(custom_animation_start_stopping_at_frame_and_hold <unit> <animation_graph> <string_id> <boolean> <real>)
starts a custom animation playing on a unit and holds when it reaches the specified frame (unit, string animation_graph, string animation_name, bool interpolate, real frame)

(custom_animation_relative <unit> <animation_graph> <string_id> <boolean> <object>)
starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)

(custom_animation_relative_loop <unit> <animation_graph> <string_id> <boolean> <object>)
starts a custom animation relative to some other object (interpolates into animation if last parameter is TRUE)

(custom_animation_list <object_list> <animation_graph> <string_id> <boolean>)
starts a custom animation playing on a unit list (interpolates into animation if last parameter is TRUE)

(unit_custom_animation_at_frame <unit> <animation_graph> <string_id> <boolean> <short>)
starts a custom animation playing on a unit at a specific frame index(interpolates into animation if next to last parameter is TRUE)

(unit_custom_animation_relative_at_frame <unit> <animation_graph> <string_id> <string_id> <boolean> <short>)
starts a custom animation playing on a unit relative to a specific cutscene flag at a specific frame index(interpolates into animation if next to last parameter is TRUE)

(unit_is_playing_custom_animation <unit>)
returns TRUE if the given unit is still playing a custom animation

(animation_capture_set_file_name <string>)
sets the file name used for the animation capture

(animation_capture_set_origin_object_name <string_id>)
sets the name of the object that will be used as the capture origin

(animation_capture_start_recording)
starts capturing animation on the object currently possessed by the player

(animation_capture_stop_recording)
stops capturing animation on the object currently possessed by the player

(sync_action_create <unit> <string_id>)
This will spawn all actors necessary to play a sync action and play it

(object_running_sync_action <object> <string_id>)
Returns true if the given object is running the named sync action

(object_set_custom_animations_hold_on_last_frame <boolean>)
changes the default behavior for custom animations

(object_set_custom_animations_prevent_lipsync_head_movement <boolean>)
when true, prevents lipsync from bobbing the head during custom animations. default is true.

(preferred_animation_list_add <object> <string_id>)
adds an animation into the 'preferred list' of animations

(preferred_animation_list_clear)
clears the 'preferred list' of animations

(unit_get_team_index <unit>)
returns the team index of the unit, returns -1 if the unit does not have a team

(unit_aim_without_turning <unit> <boolean>)
allows a unit to aim in place without turning

(unit_set_enterable_by_player <unit> <boolean>)
can be used to prevent the player from entering a vehicle

(unit_get_enterable_by_player <unit>)
returns true if a player may enter the vehicle

(unit_only_takes_damage_from_players_team <unit> <boolean>)
used for the tartarus boss fight

(unit_enter_vehicle <unit> <unit> <string_id>)
puts the specified unit in the specified vehicle (in the named seat)

(unit_enter_vehicle_immediate <unit> <unit> <string_id>)
puts the specified unit in the specified vehicle (in the named seat)

(unit_falling_damage_disable <unit> <boolean>)
disables falling damage on unit

(unit_in_vehicle_type <unit> <long>)
returns true if the unit is in a vehicle that matches the specified vehicle type

(vehicle_in_air_ticks <vehicle>)
Returns number of ticks the vehicle has been airborne

(object_get_turret_count <object>)
returns the number of turrets attached to the given object

(object_get_turret <object> <short>)
returns the nth turret attached to the given object

(unit_board_vehicle <unit> <string_id>)
Causes the given unit to attempt to board the named seat

(unit_set_emotion <unit> <long> <real> <real>)
sets a unit's facial expression (-1 is none, other values depend on unit)

(unit_set_emotion_by_name <unit> <string_id> <real> <real>)
sets a unit's facial expression by name with weight and transition time

(unit_enable_eye_tracking <unit> <boolean>)
enable/disable eye aiming on a unit

(unit_set_integrated_flashlight <unit> <boolean>)
sets a unit's flashlight on or off

(unit_in_vehicle <unit>)
returns true if the given unit is seated on a parent unit

(unit_get_vehicle <unit>)
returns the parent vehicle if the given unit is seated in one.

(vehicle_set_player_interaction <vehicle> <unit_seat_mapping> <boolean> <boolean>)
Allows players/units to enter/exit given vehicle seat. Arguments <vehicle> <seat> <player_can_enter> <unit_can_exit>

(vehicle_set_unit_interaction <vehicle> <unit_seat_mapping> <boolean> <boolean>)
Allows players/units to enter/exit given vehicle seat. Arguments <vehicle> <seat> <player_can_enter> <unit_can_exit>

(vehicle_test_seat_unit_list <unit> <unit_seat_mapping> <object_list>)
tests whether the named seat has an object in the object list (use "" to test all seats for any unit in the list)

(vehicle_test_seat_unit <unit> <unit_seat_mapping> <unit>)
tests whether the named seat has a specified unit in it (use "" to test all seats for this unit)

(vehicle_test_seat <unit> <unit_seat_mapping>)
tests whether the named seat has any unit in it

(unit_set_prefer_tight_camera_track <unit> <boolean>)
sets the unit to prefer a tight camera track

(unit_test_seat <unit> <unit_seat_mapping>)
tests whether the named seat has any unit in it

(vehicle_set_collision_group <vehicle> <havok_group>)
Override a vehicle's collision group

(unit_set_ultimate_parent_vehicle_collision_group <object> <havok_group>)
Override a unit's ultimate parent's collision group

(unit_exit_vehicle <unit>)
makes a unit exit its vehicle

(unit_exit_vehicle <unit> <short>)
makes a unit exit its vehicle (0 = normal exit to airborne, 1 = ejection, 2 = ejection + death, 3 = exit to ground)

(object_set_maximum_vitality <object> <real> <real>)
sets a objects's maximum body and shield vitality

(unit_set_maximum_vitality <unit> <real> <real>)
sets a unit's maximum body and shield vitality

(units_set_maximum_vitality <object_list> <real> <real>)
sets a group of units' maximum body and shield vitality

(unit_set_current_vitality <unit> <real> <real>)
sets a unit's current body and shield vitality

(units_set_current_vitality <object_list> <real> <real>)
sets a group of units' current body and shield vitality

(vehicle_load_magic <object> <unit_seat_mapping> <object_list>)
makes a list of units (named or by encounter) magically get into a vehicle, in the substring-specified seats (e.g. CD-passenger... empty string matches all seats)

(vehicle_unload <object> <unit_seat_mapping>)
makes units get out of an object from the substring-specified seats (e.g. CD-passenger... empty string matches all seats)

(unit_set_animation_mode <unit> <string_id>)
this unit will assume the named animation mode

(magic_melee_attack)
causes player's unit to start a melee attack

(vehicle_riders <unit>)
returns a list of all riders in a vehicle

(vehicle_driver <unit>)
returns the driver of a vehicle

(vehicle_gunner <unit>)
returns the gunner of a vehicle

(unit_get_health <unit>)
returns the health [0,1] of the unit, returns -1 if the unit does not exist

(unit_get_shield <unit>)
returns the shield [0,1] of the unit, returns -1 if the unit does not exist

(unit_get_total_grenade_count <unit>)
returns the total number of grenades for the given unit, 0 if it does not exist

(unit_has_weapon <unit> <object_definition>)
returns TRUE if the <unit> has <object> as a weapon, FALSE otherwise

(unit_has_weapon_readied <unit> <object_definition>)
returns TRUE if the <unit> has <object> as the primary weapon, FALSE otherwise

(unit_has_any_equipment <unit>)
returns TRUE if the <unit> has any equipment, FALSE otherwise

(unit_has_equipment <unit> <object_definition>)
returns TRUE if the <unit> has equipment <object> , FALSE otherwise

(unit_lower_weapon <unit> <short>)
lower the units weapon over x ticks

(unit_raise_weapon <unit> <short>)
raises the units weapon over x ticks

(unit_drop_support_weapon <unit>)
forces the given unit to drop its support weapon, if it is holding one

(unit_spew_action <unit>)
runs the spew unit action on the specified unit

(unit_force_reload <unit>)
Force the give unit to reload his weapon

(unit_recorder_record <unit>)
Records the unit <unit>

(unit_recorder_play_on_unit <unit>)
Plays a recording on the unit <unit>

(unit_recorder_play <unit>)
Plays recorded motion on the specified unit <unit>

(unit_recorder_play_and_blend <unit> <real>)
Plays recorded motion on the specified unit and blends from where the previous recording left off <unit> <real: blend time>

(unit_recorder_set_playback_rate <unit> <real>)
Transitions to new playback rate over specified period of time <unit> <real: desired rate> <real: smooth seconds>

(unit_recorder_set_playback_rate_smooth <unit> <real> <real>)
Sets the playback rate on the specified unit <unit> <real>

(unit_recorder_set_time_position <unit> <real>)
Sets the position in the time line to the specified time on the specified unit <unit> <real>

(unit_recorder_get_time_position_seconds <unit>)
Get the current time position in seconds <unit>

(unit_recorder_pause_smooth <unit> <boolean> <real>)
Transitions to/from a pause  <unit> <bool:paused> <real:smooth_seconds>

(unit_recorder_set_rewinding <unit> <boolean>)
Changes the playback direction <unit> <bool:reverse>

(unit_recorder_set_paused <boolean>)
Updates the paused status<bool paused>

(unit_recorder_pause <unit> <boolean>)
Updates the paused status <unit><bool paused>

(unit_recorder_stop <unit>)
Stops recording and playback <unit>

(unit_recorder_load <string>)
Loads the unit recording from the specified location <string filename>

(unit_recorder_setup_for_unit <unit> <string>)
Sets up the unit to use/create a unit recording <unit> <string GameData->ScenarioUnitRecordings name>

(animation_stats_dump)
Dump usage information for the animations in the game

(unit_animation_forced_seat <string_id>)
all units controlled by the player will assume the given seat name (valid values are 'asleep', 'alert', 'stand', 'crouch' and 'flee')

(unit_doesnt_drop_items <object_list>)
prevents any of the given units from dropping weapons or grenades when they die

(unit_impervious <object_list> <boolean>)
prevents any of the given units from being knocked around or playing ping animations

(unit_suspended <unit> <boolean>)
stops gravity from working on the given unit

(unit_add_equipment <unit> <starting_profile> <boolean> <boolean>)
adds/resets the unit's health, shield, and inventory (weapons and grenades) to the named profile. resets if third parameter is true, adds if false. weapons will be marked as garbage if fourth parameter is true (for respawning equipment).

(player_set_equipment <player> <object_definition> <boolean> <boolean> <boolean>)
<player> <object> <dropCurrent_bool> <primary_bool> <silent_bool> Last 3 args: drop or delete current, primary or hero assist, silent or play effects

(unit_set_equipment <unit> <object_definition> <boolean> <boolean> <boolean>)
<unit> <equip_def> <dropCurrent_bool> <primary_bool> <silent_bool> Last 3 args: drop or delete current, primary or hero assist, silent or play effects

(unit_drop_weapon <unit> <weapon> <long>)
3rd arg is type: 0:default, 1:delete, 2:dual_primary, 3:dual_secondary, 4:response_to_deletion, 5:throw

(unit_add_weapon <unit> <weapon> <long>)
Returns success. 3rd arg is add method: -1:unknown, 0:normal, 1:silent, 2:as_only, 3:as_primary, 4:swap_for_primary, 5:as_secondary, 6:swap_for_secondary, 7:as_secondary_silently

(weapon_set_primary_barrel_firing <weapon> <boolean>)
Forcefully fire a weapon

(weapon_hold_trigger <weapon> <long> <boolean>)
turns the trigger for a weapon  on/off

(weapon_enable_warthog_chaingun_light <boolean>)
turns the trigger for a weapon  on/off

(weapon_set_current_amount <weapon> <real>)
<weapon> <percent> ; where percent is of max ammo or of full charge

(weapon_get_rounds_total <weapon> <long>)
<weapon> <magazine_index> ; returns clip ammo + backpack inventory

(weapon_get_age <weapon>)
returns age [0 ... 1] where 0:fully powered, 1:depleted

(weapon_set_age <weapon> <real>)
0.0:fully powered, 1.0:depleted

(weapon_get_lockon_state <weapon>)
returns 0:none, 1:tracking, 2:locked

(weapon_get_lockon_target <weapon> <boolean> <boolean>)
<weapon> <driver_if_vehicle_bool> <gunner_if_vehicle_bool> // returns target object being tracked. If vehicle, optionally returns targeted vehicle's driver or gunner.

(weapon_trigger_get_charged_fraction <weapon> <short>)
<weapon> <trigger_index> ; returns charge 0.0 - 1.0

(weapon_target_designator_show_hud <player>)
Sets flag to show the target designator HUD for a given player

(weapon_target_designator_hide_hud)
Sets flag to hide the target designator HUD

(weapon_get_target_designator_cooldown_timer <player>)
Returns the cool down counter for the target designator

(weapon_set_target_designator_cooldown_timer <real>)
Begins the cool down counter for the target designator for the given time

(weapon_force_end_target_designator_cooldown_timer)
Force ends the cool down counter for the target designator

(debug_weapons_override_projectiles_per_shot <long>)
override barrel's projectiles_per_shot. -1 disables override.

(debug_weapons_override_projectile_error_angles <real> <real> <real>)
override barrel's projectiles error angles (inner, low, high). Each of three overrides will be disabled by specifying -1.

(debug_weapons_state_trace <boolean>)


(debug_weapons_state_trace_filter <string>)
; gun type name to filter on like 'storm_sticky_detonator'

(device_set_never_appears_locked <device> <boolean>)
changes a machine's never_appears_locked flag, but only if paul is a bastard

(device_set_power <device> <real>)
immediately sets the power of a named device to the given value

(device_set_position_transition_time <device> <real>)
immediately sets the power of a named device to the given value

(device_get_power <device>)
gets the current power of a named device

(device_set_position <device> <real>)
set the desired position of the given device (used for devices without explicit device groups)

(device_get_position <device>)
gets the current position of the given device (used for devices without explicit device groups)

(device_set_position_immediate <device> <real>)
instantaneously changes the position of the given device (used for devices without explicit device groups

(device_group_get <device_group>)
returns the desired value of the specified device group.

(device_group_set <device> <device_group> <real>)
changes the desired value of the specified device group.

(device_group_set_immediate <device_group> <real>)
instantaneously changes the value of the specified device group.

(device_one_sided_set <device> <boolean>)
TRUE makes the given device one-sided (only able to be opened from one direction), FALSE makes it two-sided

(device_ignore_player_set <device> <boolean>)
TRUE makes the given device ignore the player (won't open for players), FALSE makes it work for the player

(device_ignore_ai_set <device> <boolean>)
TRUE makes the given device ignore ai (won't open for ai), FALSE makes it work for ai

(device_operates_automatically_set <device> <boolean>)
TRUE makes the given device open automatically when any biped is nearby, FALSE makes it not

(device_closes_automatically_set <device> <boolean>)
TRUE makes the given device close automatically after it has opened, FALSE makes it not

(device_group_change_only_once_more_set <device_group> <boolean>)
TRUE allows a device to change states only once

(device_set_position_track <device> <string_id> <real>)
set the desired position track animation to use (optional interpolation time onto track)

(device_set_overlay_track <device> <string_id>)
set the desired overlay animation to use

(device_animate_position <device> <real> <real> <real> <real> <boolean>)
animate the position over time

(device_animate_overlay <device> <real> <real> <real> <real>)
animate the overlay over time

(cheat_all_powerups)
drops all powerups near player

(cheat_all_weapons)
drops all weapons near player

(cheat_all_vehicles)
drops all vehicles on player

(cheat_teleport_to_camera)
teleports player to camera location

(cheat_active_camouflage <boolean>)
gives the player active camouflage

(cheat_active_camouflage_by_player <player> <boolean>)
gives a specific player active camouflage

(cheats_load)
reloads the cheats.txt file

(drop_safe <any_tag>)
drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle

(drop <string>)
drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle

(drop_variant <string> <string>)
drops the named tag e.g. objects\vehicles\banshee\banshee.vehicle using the specified variant name

(drop_permutation <string> <string>)
drops the named tag e.g. objects\characters\brute\brute.biped using the specified permutation. permutations are specified as a comma-delimited string of region=permutation pairs (e.g. region1=permutation1,region2=permutation2).

(update_dropped_tag_permutation <string> <string>)
updates the permutation for a previously dropped tag. permutations are specified as a comma-delimited string of region=permutation pairs (e.g. region1=permutation1,region2=permutation2).

(ai_jump_cost_scale <real>)
scale pathing cost of jumps

(ai_enable <boolean>)
turns all AI on or off.

(ai_enabled)
returns whether AI is turned on or off.

(ai_grenades <boolean>)
turns grenade inventory on or off.

(ai_dialogue_enable <boolean>)
turn combat dialogue on/off

(ai_dialogue_updating_enable <boolean>)
enable updating of dialogue tags at runtime, based on stimuli

(ai_player_dialogue_enable <boolean>)
turn player combat dialogue on/off

(ai_actor_dialogue_enable <ai> <boolean>)
turn combat dialogue on/off for a particular ai type.

(ai_actor_dialogue_effect_enable <ai> <boolean>)
turn combat dialogue effects on/off for a particular ai type.

(ai_infection_suppress <long>)
disable infection for this number of ticks

(ai_fast_and_dumb <boolean>)
turn on/off perception performance hacks

(ai_lod_full_detail_actors <short>)
change the number of full detail AI characters we are allowed

(ai_lod_full_detail_actors)
display the number of full detail AI characters we are allowed

(ai_force_full_lod <ai> <boolean>)
Enables/Disables forced full LOD mode on specified actor.

(ai_dialogue_log_reset)
reset the dialogue log

(ai_dialogue_log_dump <string>)
dump a file of the given name with csv statistics on vocalizations

(ai_get_object <ai>)
returns the unit/object corresponding to the given actor

(ai_get_unit <ai>)
returns the unit/object corresponding to the given actor

(ai_get_squad <ai>)
returns the squad of the given actor. Invalid if the given ai is NOT an actor-type (i.e. is itself a squad or squad group or task

(ai_get_turret_ai <ai> <short>)
returns an the ai controlling the Nth turret attached to the given ai (or its vehicle)

(ai_random_smart_point <point_reference> <real> <real> <real>)
returns a point in the given point set that a player is probably going to be able to see. Args are [point set], [min distance], [max distance], [angle-from-forward], all relative to the player

(ai_nearest_point <object> <point_reference>)
returns the nearest point in the given point set to the given object

(ai_get_point_count <point_reference>)
returns the number of points in the given point set

(ai_point_set_get_point <point_reference> <short>)
returns Nth point in the point set

(ai_debug_dump_behavior_tree <boolean>)
DEBUG, DONT USE!

(ai_set_equipment_drop_rate <ai> <real>)
sets chance (between 0.0 and 1.0) that AI will drop equipment.

(ai_place <ai>)
places the specified squad on the map.

(ai_place_long <long>)
places the specified squad (using a long) on the map.

(ai_place <ai> <short>)
places the given number of members of the specified squad.

(ai_place_in_limbo <ai>)
places the specified squad on the map in limbo.

(ai_place_in_limbo <ai> <short>)
places the given number of members of the specified squad in limbo.

(ai_place_in_vehicle <ai> <ai>)
places the specified squad (1st arg) on the map in the vehicles belonging to the specified vehicle squad (2nd arg).

(ai_cannot_die <ai> <boolean>)
AI cannot die from damage (as opposed to by scripting)

(ai_vitality_pinned <ai>)
Returns true if the ai's units are ALL vitality pinned (see object_vitality_pinned)

(ai_place_wave <long> <ai>)
Places the specified wave name into squads defined as part of the given squad group

(ai_place_wave <long> <ai> <long>)
Places the given number of squads from the specified wave name into squads defined as part of the given squad group

(ai_place_wave_in_limbo <long> <ai>)
Places the specified wave name into squads defined as part of the given squad group in limbo

(ai_place_wave_in_limbo <long> <ai> <long>)
Places the given number of squads from the specified wave name into squads defined as part of the given squad group in limbo

(ai_place_with_shards <ai>)
Places the specified squad on the map using Forerunner shards.

(ai_place_with_shards <ai> <short>)
Places the given number of members of the specified squad using Forerunner shards.

(ai_place_with_birth <ai>)
Places the specified squad on the map using Forerunner birth.

(ai_internal_query_clump_for_target <ai>)
Internal use only. Post shard spawn targeting update from nearby bishops.

(ai_set_clump <ai> <short>)
Force the given AI into a specific clump

(ai_designer_clump_perception_range <real>)
Override the maximum perception range of designer specified clumps

(ai_index_from_spawn_formation <ai> <string_id>)
Create an AI index from the given squad and spawn formation

(ai_resurrect <object>)
Resurrect the specified mission critical AI character.

(ai_kill <ai>)
instantly kills the specified encounter and/or squad.

(ai_kill_silent <ai>)
instantly and silently (no animation or sound played) kills the specified encounter and/or squad.

(ai_kill_no_statistics <ai>)
instantly and silently (no animation or sound played) kills the specified encounter and/or squad.

(ai_erase <ai>)
erases the specified encounter and/or squad.

(ai_erase_out_of_context)
erases AI that have been made inactive because the BSP unloaded under them.

(ai_erase_all)
erases all AI.

(ai_disposable <ai> <boolean>)
enables or disables automatic garbage collection for actors in the specified encounter and/or squad.

(ai_select <ai>)
selects the specified squad.

(ai_deselect)
clears the selected encounter.

(ai_set_deaf <ai> <boolean>)
enables or disables hearing for actors in the specified encounter.

(ai_set_blind <ai> <boolean>)
enables or disables sight for actors in the specified encounter.

(ai_set_weapon_up <ai> <boolean>)
force actor to hold their weapon up, instead of lowering it when idle. this does NOT cause them to draw their weapon if stowed

(ai_flood_disperse <ai> <ai>)
Disperese a flood encounter, stimulating the various forms to break down into infections and transition to the new objective

(ai_add_navpoint <ai> <boolean>)
Add/remove hud navpoint to the actor or squad

(ai_magically_see <ai> <ai>)
Make one squad magically aware of another.

(ai_magically_see_object <ai> <object>)
Make a squad magically aware of a particular object.

(ai_set_active_camo <ai> <boolean>)
Turn on active camoflage on actor/squad/squad-group

(ai_suppress_combat <ai> <boolean>)
Turn on/off combat suppression on actor/squad/squad-group

(ai_engineer_explode <ai>)
Register an explosion stimulus with all specified actors, causing engineers to explode

(ai_grunt_kamikaze <ai>)
Register a kamikaze stimulus with all specified actors, causing grunts to GO WILD

(ai_flee_target <ai> <object>)
Makes specified AI flee from the specified object.

(ai_kamikaze_disable <ai> <boolean>)
Disable kamikaze behavior on specified AI units when set to true.

(ai_squad_enumerate_immigrants <ai> <boolean>)
If someone migrates (or simply changes) into this squad, consider him a full member of the squad

(ai_migrate <ai> <ai>)
makes all or part of an encounter move to another encounter.

(ai_migrate_persistent <ai> <ai>)
makes all or part of an encounter move to another encounter, and all script commands will function on the migrated squad

(ai_allegiance <team> <team>)
creates an allegiance between two teams.

(ai_allegiance_remove <team> <team>)
destroys an allegiance between two teams.

(ai_allegiance_break <team> <team>)
fake a betrayal incident between two teams

(ai_braindead <ai> <boolean>)
makes a group of actors braindead, or restores them to life (in their initial state)

(ai_braindead_by_unit <object_list> <boolean>)
makes a list of objects braindead, or restores them to life. if you pass in a vehicle index, it makes all actors in that vehicle braindead (including any built-in guns)

(ai_disregard <object_list> <boolean>)
if TRUE, forces all actors to completely disregard the specified units, otherwise lets them acknowledge the units again

(ai_disregard_orphans <ai>)
the given AI will discard all orphan props, terminating search

(ai_prefer_target <object_list> <boolean>)
if TRUE, *ALL* enemies will prefer to attack the specified units. if FALSE, removes the preference.

(ai_prefer_target_team <ai> <team>)
the given ai will prefer the indicated team.

(ai_prefer_target_ai <ai> <ai> <boolean>)
the given ai (actor, squad, task, etc.) will prefer the given other ai (actor, squad, task, etc.)

(ai_set_targeting_group <ai> <short>)
Set the AI to only target other guys of targeting group X

(ai_set_targeting_group <ai> <short> <boolean>)
Set the AI to only target other guys of targeting group X (true/false whether the player should also be targeted)

(ai_teleport_to_starting_location_if_outside_bsp <ai>)
PLEASE USE ai_teleport_to_spawn_point_if_outside_bsp INSTEAD

(ai_teleport_to_spawn_point_if_outside_bsp <ai>)
teleports a group of actors to the spawn points of their current squad(s) if they are currently outside the world.

(ai_teleport <ai> <point_reference>)
teleports the given squad to the given point.

(ai_bring_forward <object> <real>)
teleports the given mission critical AI character to the current encounter, if beyond the given range from a player

(ai_advance_immediate <ai>)
order advance for actor/squad/squad-group

(ai_renew <ai>)
refreshes the health and grenade count of a group of actors, so they are as good as new

(ai_force_active <ai> <boolean>)
forces an encounter to remain active (i.e. not freeze in place) even if there are no players nearby

(ai_force_active_by_unit <unit> <boolean>)
forces a named actor that is NOT in an encounter to remain active (i.e. not freeze in place) even if there are no players nearby

(ai_enter_limbo <ai>)
Puts the AI in limbo state.

(ai_exit_limbo <ai>)
remove the give AI from limbo, generally induced by spawning in limbo

(ai_playfight <ai> <boolean>)
sets an encounter to be playfighting or not

(ai_reconnect)
reconnects all AI information to the current structure bsp (use this after you create encounters or command lists in sapien, or place new firing points or command list points)

(ai_berserk <ai> <boolean>)
forces a group of actors to start or stop berserking

(ai_set_team <ai> <team>)
makes an encounter change to a new team

(ai_allow_dormant <ai> <boolean>)
either enables or disables automatic dormancy for a group of actors

(ai_allow_resurrect <ai> <boolean>)
Enable / disable resurrection logic on specified character.

(ai_swap_weapons <ai>)
Swaps primary / secondary weapons on specified AI.

(ai_is_shooting <ai>)
returns true if any character in specified squad/spawn point is currently firing his weapon.

(ai_is_attacking <ai>)
returns whether a platoon is in the attacking mode (or if an encounter is specified, returns whether any platoon in that encounter is attacking)

(ai_fighting_count <ai>)
return the number of actors that are fighting in a squad or squad_group

(ai_living_count <ai>)
return the number of living actors in the specified encounter and/or squad.

(ai_in_limbo_count <ai>)
return the number of living actors in the specified encounter and/or squad that are in limbo.

(ai_not_in_limbo_count <ai>)
return the number of living actors in the specified encounter and/or squad that are NOT in limbo.

(ai_living_fraction <ai>)
return the fraction [0-1] of living actors in the specified encounter and/or squad.

(ai_in_vehicle_count <ai>)
return the number of living actors in the specified encounter and/or squad who are currently in a vehicle.

(ai_body_count <ai>)
return the number of actors who have died in the completiong of the given objective/task.

(ai_strength <ai>)
return the current strength (average body vitality from 0-1) of the specified encounter and/or squad.

(ai_swarm_count <ai>)
return the number of swarm actors in the specified encounter and/or squad.

(ai_nonswarm_count <ai>)
return the number of non-swarm actors in the specified encounter and/or squad.

(ai_actors <ai>)
converts an ai reference to an object list.

(ai_allegiance_broken <team> <team>)
returns whether two teams have an allegiance that is currently broken by traitorous behavior

(ai_spawn_count <ai>)
returns the number of actors spawned in the given squad or squad group

(object_get_ai <object>)
returns the ai attached to this object, if any

(object_particleize <object> <any_tag>)
Particleize object, tag
NETWORK SAFE: Unknown, assumed unsafe

(object_particleize_to_marker <object> <object> <string_id> <any_tag>)
particleize object, to-object, to-marker, particlemane-tag
NETWORK SAFE: Unknown, assumed unsafe

(ai_object_particleize_to_area <object> <ai> <any_tag>)
Particleize object, to spawn_point, tag
NETWORK SAFE: Unknown, assumed unsafe

(ai_particleize <ai> <any_tag>)
Particleize ai, tag
NETWORK SAFE: Unknown, assumed unsafe

(ai_particleize_dead_to_area <ai> <real> <any_tag>)
Particleize dead bipeds to an area spawn_point, radius, tag
NETWORK SAFE: Unknown, assumed unsafe

(ai_particleize_clear_area)
Clear target set from dead_to_area
NETWORK SAFE: Unknown, assumed unsafe

(ai_set_task <ai> <string_id> <string_id>)
Sets the current task of the current task

(ai_set_objective <ai> <string_id>)
Sets the squad's current objective

(ai_task_status <ai>)
Returns the status of the given objective/task. See ai_task_status_<tab> for return codes.

(ai_set_task_condition <ai> <boolean>)
Latches the task condition true or false

(ai_leadership <ai>)
Returns whether a squad or task has a leader

(ai_leadership_all <ai>)
Returns whether a task or any of its children has a leader

(ai_task_count <ai>)
Returns the living count of the AI in the given task OR any of its children

(ai_reset_objective <ai>)
Completely reset the given objective, task or task hierarchy (if passed a gate task).

(ai_squad_patrol_objective_disallow <ai> <boolean>)
Disallow the selection of an objective by any squad patrol.

(ai_get_objective <ai>)
Get the objective assigned to an AI as a string id

(ai_place_cue <string_id>)
Place the named AI cue

(ai_remove_cue <string_id>)
Remove the named AI cue

(ai_render_paths_all)
Turns on raw, smoothed, avoided paths and avoidance obstacles

(ai_render_evaluations_shading_none)
Render no FP evaluation shading

(ai_render_evaluations_shading_all)
Render all FP evaluation shading

(ai_render_evaluations_shading <firing_point_evaluator>)
Add a specific FP evaluation shading to render

(ai_render_stationkeeping <boolean>)
Render stationkeeping debug

(ai_activity_set <ai> <string_id>)
Set the given activity running on the given AI(s)

(ai_activity_abort <ai>)
Aborts the activities running on the given AI(s)

(ai_object_set_team <object> <team>)
flag an object as being owned by a certain team

(ai_object_set_targeting_bias <object> <real>)
sets the targeting preference for this object in relation to other equal targets [-1, 1]

(ai_object_set_targeting_ranges <object> <real> <real>)
sets override weapon ranges for enemies attacking this object <min> <max>

(ai_object_enable_targeting_from_vehicle <object> <boolean>)
if enabled, actors in vehicles are not allowed to target this object <object> <true/false>

(ai_object_enable_grenade_attack <object> <boolean>)
if disabled, actors cannot attack the object with grenades <object> <true/false>

(ai_vehicle_get <ai>)
Returns the vehicle that the given actor is in.

(ai_vehicle_get_from_starting_location <ai>)
PLEASE START USING ai_vehicle_get_from_spawn_point INSTEAD

(ai_vehicle_get_from_spawn_point <ai>)
Returns the vehicle that was spawned at the given spawn point

(ai_vehicle_get_squad_count <ai>)
Returns the number of vehicles in the given squad.

(ai_vehicle_get_from_squad <ai> <short>)
Returns the nth vehicle from the given squad.

(ai_vehicle_reserve_seat <vehicle> <unit_seat_mapping> <boolean>)
Reserves the given seat on the given vehicle (so that AI may not enter it

(ai_vehicle_reserve <vehicle> <boolean>)
Reserves the given vehicle (so that AI may not enter it

(ai_player_get_vehicle_squad <unit>)
Returns the squad (if any) of the vehicle the player is riding in (note, the argument is a UNIT)

(ai_vehicle_count <ai>)
Returns the number of vehicles being driven / ridden by the actors in the given squad/squad-group/task/etc.

(ai_carrying_player <ai>)
Returns whether any of the given AI are in a vehicle with the player

(player_in_vehicle <vehicle>)
Returns whether any players are in the given vehicle

(ai_vehicle_get_driver <vehicle>)
Returns the AI driver for a given vehicle.

(ai_player_needs_vehicle <player>)
Returns if the given player needs a vehicle at the moment

(ai_player_any_needs_vehicle)
Returns if any player needs a vehicle at the moment

(ai_vehicle_enter <ai> <unit> <unit_seat_mapping>)
tells a group of actors to get into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles

(ai_vehicle_enter <ai> <unit>)
tells a group of actors to get into a vehicle... does not interrupt any actors who are already going to vehicles

(ai_vehicle_enter_immediate <ai> <unit> <unit_seat_mapping>)
the given group of actors is snapped into a vehicle, in the substring-specified seats (e.g. passenger for pelican)... does not interrupt any actors who are already going to vehicles

(ai_vehicle_enter_immediate <ai> <unit>)
the given group of actors is snapped into a vehicle

(ai_enter_squad_vehicles <ai>)
Instructs the ai in the given squad to get in all their vehicles

(ai_vehicle_exit <ai> <unit_seat_mapping>)
tells a group of actors to get out of any vehicles that they are in (if their seat matches the substring)

(ai_vehicle_exit <ai>)
tells a group of actors to get out of any vehicles that they are in

(vehicle_overturned <vehicle>)
Returns true if the vehicle is overturned

(vehicle_flip <vehicle>)
Flips an overturned vehicle

(ai_squad_group_get_squad <ai> <short>)
Returns the nth squad from a given squad group.

(ai_squad_group_get_squad_count <ai>)
Returns the number of squads in a given squad group

(ai_squad_patrol_enable <string_id> <boolean>)
Enable/disable a squad patrol

(ai_combat_status <ai>)
Returns the highest integer combat status in the given squad-group/squad/actor

(flock_start <string_id>)
The flock starts producing boids

(flock_stop <string_id>)
The flock stops producing boids

(flock_create <string_id>)
Create the given flock

(flock_delete <string_id>)
Delete the given flock

(flock_destroy <string_id>)
Destroy the given flock, killing all members randomly over time.

(flock_definition_set <string_id> <any_tag>)
Set the definition of the given flock to the given tag

(flock_unperch <string_id>)
Cause the given flock to unperch (if it is perched)

(flock_set_targeting_group <string_id> <short>)
Set the flock to only target other guys in targeting group X

(flock_destination_set_enabled <string_id> <string_id> <boolean>)
Sets the enabled flag on the flock destination

(flock_destination_set_position <string_id> <string_id> <point_reference>)
Sets the position of a flock destination to the location of an ai point

(flock_destination_copy_position <string_id> <string_id> <string_id>)
Sets the position of one flock destination to the position of another flock destination

(drop_ai <string> <string>)
Drop an ai with the given weapon at the current camera position

(mantini_create_runtime_squad <string>)
Create a new squad definition entry with the given name. Arg: <squad_name> 

(mantini_create_runtime_point_set <string>)
Enables mantini to create new point sets in memory. ARG: <point_set_name>

(mantini_add_runtime_point_to_set <string> <string> <real> <real> <real> <real>)
Enables mantini to add a point to an in memory point set.  ARG: <point_set_name> <point_name> <x> <y> <yaw> <pitch>

(mantini_add_runtime_point_to_set_from_camera <string> <string> <real> <real>)
Enables mantini to add a point to an in memory point set along the current camera fwd collision point.  ARG: <point_set_name> <point_name> <yaw> <pitch>

(mantini_add_starting_location_to_squad <string> <string> <long> <point_reference>)
Enables mantini to add a spawn point to a squad identified by an AI point.  ARG: <squad_name> <starting loc name> <cell_index> <pointref>

(mantini_add_starting_location_to_squad_from_camera <string> <string> <long> <real>)
Enables mantini to add a spawn point to a squad identified from the camera position.  ARG: <squad_name> <starting loc name> <cell_index> <offset in wus>

(mantini_add_cell_to_runtime_squad <string> <string>)
Add a character to a runtime squad. Arg: <squad_name> <character tag>

(mantini_get_runtime_squad_cell_count <string>)
Get the cell count of a runtime squad. Arg: <squad_name> 

(mantini_set_squad_team <string> <team>)
Set the team for a runtime squad. Arg: <squad_name> <team>

(mantini_set_spawn_point_weapons <ai> <string> <string>)
Set primary and secondary weapon for a spawn point. Arg: <spawn_point> <primary weapon tag> <secondary weapon tag>

(mantini_set_spawn_point_vehicle <ai> <string>)
Set vehicle for a spawn point. Arg: <spawn_point> <vehicle tag>

(mantini_set_spawn_point_variants <ai> <string_id> <string_id>)
Set actor and vehicle variants for spawn point. Arg: <spawn_point> <actor variant> <vehicle variant>

(mantini_set_squad_cell_spawn_count <string> <long> <long>)
Set cell spawn count. Arg: <squad name> <cell index> <spawn count>

(mantini_clear_runtime_squads)
Clears all runtime created squads. Returns false if there were none to clear

(mantini_remove_pointset <string>)
Clears all point sets after a pointset that contains the specified substring. Returns false if there were none to clear. Arg: <substring to search for in pointset name>

(mantini_get_loaded_map_name)
Returns the name of the currently loaded map

(ai_verify_tags)
Verifies state of ai-related tags (e.g. orders, squads, zones, etc.)

(ai_wall_lean <ai>)
Makes the actor lean against a wall RIGHT NOW

(ai_fire_dialogue_event <ai> <string> <object>)
Runs a dialogue event on actor closest to a player

(ai_play_vocalization <string_id>)
Runs a dialogue event on actor closest to a player

(ai_play_vocalization_on_team <string_id> <team>)
Runs a dialogue event on actor closest to a player that's allied with the given team

(ai_play_line <ai> <ai_line>)
Play the given mission dialogue line on the given ai

(ai_play_line_at_player <ai> <ai_line>)
Play the given mission dialogue line on the given ai, directing the ai's gaze at the nearest visible player

(ai_play_line_on_object <object> <ai_line>)
Play the given mission dialogue line on the given object (uses first available variant)

(ai_play_line_on_object_for_team <object> <ai_line> <mp_team>)
Play the given mission dialogue line on the given object (uses first available variant) if anyone on the local box is on the specified team

(ai_play_line_on_point_set <string_id> <point_reference> <short>)
Play the given line on the N closest point to players in the given point set

(ai_play_line_on_point_set <string_id> <point_reference> <short> <string_id>)
Play the given line (with the given 3-letter variant) on the N closest point to players in the given point set

(campaign_metagame_time_pause <boolean>)
pause meta game time, while paused your completion multiplier stops going down

(campaign_metagame_award_points <player> <long>)
award bonus metagame points to a player

(campaign_metagame_award_skull <player> <skull>)
award a skull to a player

(campaign_metagame_enabled)
TRUE if the metagame is enabled

(campaign_survival_enabled)
TRUE if survival mode is enabled

(ai_lines)
cycles through AI line-spray modes

(ai_dialogue_break_on_vocalization <string_id>)
break when the following vocalization is chosen for utterance

(ai_allocate_station <string_id>)
grab a station slot and assign it the specified name

(ai_assign_actor_station <string_id> <ai>)
Tell actor to maintain station

(ai_release_station <string_id>)
Release station.

(ai_station_on_object <string_id> <object>)
Base station in object reference frame

(ai_station_set_bounds <string_id> <real> <real> <real> <real> <real> <real>)
station boundary min max pairs for range, yaw, pitch. range in wu, angles in degrees

(ai_station_predict_time <string_id> <real> <real> <real>)
Project intercepts to station this far when moving slow to fast (fast speed), (time at speed 0), (time at fast speed)

(ai_capture_allegiance <object> <object>)
Squad containing first unit takes the team of the unit in the second

(ai_path_ignore_object_obstacle <ai> <object>)
tells the actor to ignore pathfinding obstacles associated with object <ai> <object>

(ai_path_clear_ignore_object_obstacle <ai>)
tells the actor to stop ignoring the obstacle <ai>

(thespian_performance_test <string_id>)
Starts a performance with the given name, spawns needed actors

(thespian_folder_activate <folder>)
Activates inactive performances inside a given folder name, waits for actors

(thespian_folder_deactivate <folder>)
Deactivates active performances inside a given folder name

(thespian_performance_activate <string_id>)
Activates an inactive performance with a given name, waits for actors

(thespian_performance_setup_and_begin <string_id> <string_id> <real>)
Finds all of the actors needed for the performance, and then starts the performance

(performance_new <string_id> <boolean>)
Creates a new instance of a performance given a performance definition name. If last argument true, allows duplicates

(cast_squad_in_performance <long> <ai>)
Finds and assigns roles for actors in the given squad in a performance

(performance_begin <long>)
Starts the script for a performance if all of the critical roles have been cast

(thespian_performance_kill_by_name <string_id>)
Kills any performance with the given name

(thespian_performance_kill_by_ai <ai>)
Kills any performance that has cast an ai from the given squad

(thespian_fake_task_transition <string_id> <string_id>)
Unblocks an actor waiting looping animation that's waiting on a task transition

(performance_play_line_by_id <short>)
play a line (referenced by line id) in the performance.

(performance_play_line <string_id>)
play a line (referenced by name) in the performance.

(performance_get_actor_by_index <short>)
Get the actor in the given participant slot of a performace

(performance_get_actor <string_id>)
Get the actor who playing the given named role in a performance

(performance_get_actor_count)
Get the total number of actors currently in the performance

(performance_get_role_count)
Get the total number of roles in the performance

(performance_get_line_count)
Get the total number of lines in the performance

(performance_get_last_played_line_index)
Get the index of the last line played in the performance

(thespian_performance_is_blocked)
Returns true if a line is executing that is blocking

(actor_from_performance <long> <string_id>)
Get a specified actor from a performance given by its runtime index

(ai_player_add_fireteam_squad <unit> <ai>)
Adds the given squad to the given player's fire team

(ai_player_remove_fireteam_squad <unit> <ai>)
Removes the given squad from the given player's fire team

(ai_player_set_fireteam_max <unit> <short>)
Sets the maximum number of actors allowed in the players fire team.

(ai_player_set_fireteam_no_max <unit>)
Sets the maximum number of actors allowed in the players fire team to unlimited.

(ai_player_set_fireteam_max_squad_absorb_distance <unit> <real>)
Sets the maximum distance at which this squad can absorb nearby squads.

(ai_set_fireteam_absorber <ai> <boolean>)
enables or disables fireteam absortion for a given squad in the specified encounter.

(ai_set_fireteam_fallback_squad <unit> <ai>)
Sets the squad that AI will migrate into if the player dies.

(ai_is_in_fireteam <ai>)
Returns true if the given ai is in a fire team.

(cs_run_command_script <ai> <ai_command_script>)
Causes the specified actor(s) to start executing a command script immediately (discarding any other command scripts in the queue)

(cs_queue_command_script <ai> <ai_command_script>)
Add a command script onto the end of an actor's command script queue

(cs_stack_command_script <ai> <ai_command_script>)
Push a command script to the top of the actor's command script queue

(vs_cast <ai> <boolean> <short> <string_id>)
Cast 1 actor for a vignette (at the given priority, higher = more important)

(vs_cast <ai> <boolean> <short> <string_id> <string_id>)
Cast 2 actors for a vignette (at the given priority, higher = more important)

(vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id>)
Cast 3 actors for a vignette (at the given priority, higher = more important)

(vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id>)
Cast 4 actors for a vignette (at the given priority, higher = more important)

(vs_cast <ai> <boolean> <short> <string_id> <string_id> <string_id> <string_id> <string_id>)
Cast 5 actors for a vignette (at the given priority, higher = more important)

(cs_role <short>)
Returns the given member of the cast (as per more recent vs_cast call)

(cs_abort_on_alert <boolean>)
Command script ends prematurely when actor's combat status raises to 'alert' or higher

(cs_abort_on_damage <boolean>)
Command script ends prematurely when actor is damaged

(cs_abort_on_combat_status <short>)
Command script ends prematurely when actor's combat status rises to given level

(cs_abort_on_vehicle_exit <boolean>)
Command script ends prematurely when actor gets out of its vehicle

(cs_abort_on_alert <boolean>)
Command script ends prematurely when given actor's combat status raises to 'alert' or higher

(cs_abort_on_alert <ai> <boolean>)
Command script ends prematurely when given actor's combat status raises to 'alert' or higher

(cs_abort_on_damage <boolean>)
Command script ends prematurely when actor is damaged

(cs_abort_on_damage <ai> <boolean>)
Command script ends prematurely when actor is damaged

(cs_abort_on_combat_status <short>)
Command script ends prematurely when actor's combat status rises to given level

(cs_abort_on_combat_status <ai> <short>)
Command script ends prematurely when actor's combat status rises to given level

(cs_abort_on_vehicle_exit <boolean>)
Command script ends prematurely when actor gets out of its vehicle

(cs_abort_on_vehicle_exit <ai> <boolean>)
Command script ends prematurely when actor gets out of its vehicle

(cs_command_script_running <ai> <ai_command_script>)
Returns true if the ai is running the command script in question

(cs_command_script_attached <ai> <ai_command_script>)
Returns true if the command script is in the ai's cs queue

(cs_number_queued <ai>)
Returns the number of queued command scripts

(cs_moving)
Returns TRUE if the actor is currently following a path

(cs_fly_to <point_reference>)
Flies the actor to the given point

(cs_fly_to <ai> <boolean> <point_reference>)
Flies the actor to the given point

(cs_fly_to <point_reference> <real>)
Flies the actor to the given point (within the given tolerance)

(cs_fly_to <ai> <boolean> <point_reference> <real>)
Flies the actor to the given point (within the given tolerance)

(cs_fly_to_and_face <point_reference> <point_reference>)
Flies the actor to the given point and orients him in the appropriate direction

(cs_fly_to_and_face <ai> <boolean> <point_reference> <point_reference>)
Flies the actor to the given point and orients him in the appropriate direction

(cs_fly_to_and_face <point_reference> <point_reference> <real>)
Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)

(cs_fly_to_and_face <ai> <boolean> <point_reference> <point_reference> <real>)
Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)

(cs_fly_to_and_dock <point_reference> <point_reference> <real>)
Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance) and stops there. Best used at very short range.

(cs_fly_to_and_face <ai> <boolean> <point_reference> <point_reference> <real>)
Flies the actor to the given point and orients him in the appropriate direction (within the given tolerance)

(cs_fly_by <point_reference>)
Flies the actor through the given point

(cs_fly_by <ai> <boolean> <point_reference>)
Flies the actor through the given point

(cs_fly_by <point_reference> <real>)
Flies the actor through the given point (within the given tolerance)

(cs_fly_by <ai> <boolean> <point_reference> <real>)
Flies the actor through the given point (within the given tolerance)

(cs_fly_over_object <object> <real> <real>)
Flies by the point that is the given height above the object (within the given tolerance measured on the ground)
NETWORK SAFE: Unknown, assumed unsafe

(cs_fly_over_object <ai> <boolean> <object> <real> <real>)
Flies by the point that is the given height above the object (within the given tolerance measured on the ground)
NETWORK SAFE: Unknown, assumed unsafe

(cs_go_to <point_reference>)
Moves the actor to a specified point

(cs_go_to <ai> <boolean> <point_reference>)
Moves the actor to a specified point

(cs_go_to <point_reference> <real>)
Moves the actor to a specified point, attenuating throttle by the given amount when near the goal

(cs_go_to <ai> <boolean> <point_reference> <real>)
Moves the actor to a specified point, attenuating throttle by the given amount when near the goal

(cs_go_by <point_reference> <point_reference>)
Actor moves toward the point, and considers it hit when it breaks the indicated plane

(cs_go_by <ai> <boolean> <point_reference> <point_reference>)
Actor moves toward the point, and considers it hit when it breaks the indicated plane

(cs_go_by <point_reference> <point_reference> <real>)
Actor moves toward the point, and considers it hit when it breaks the indicated plane, attenuating throttle by the given amount when near the goal

(cs_go_by <ai> <boolean> <point_reference> <point_reference> <real>)
Actor moves toward the point, and considers it hit when it breaks the indicated plane, attenuating throttle by the given amount when near the goal

(cs_go_to_and_face <point_reference> <point_reference>)
Moves the actor to a specified point and has him face the second point

(cs_go_to_and_face <ai> <boolean> <point_reference> <point_reference>)
Moves the actor to a specified point and has him face the second point

(cs_go_to_and_posture <point_reference> <string_id>)
Actor moves to the point and performs a posture once there

(cs_go_to_and_posture <ai> <boolean> <point_reference> <string_id>)
Actor moves to the point and performs a posture once there

(cs_attach_to_spline <string_id>)
For use in flying vehicles: Set this vehicle to pathfind using the designated spline.

(cs_attach_to_spline <ai> <boolean> <string_id>)
For use in flying vehicles: Set this vehicle to pathfind using the designated spline.

(cs_go_to_nearest <point_reference>)
Given a point set, AI goes toward the nearest point

(cs_go_to_nearest <ai> <boolean> <point_reference>)
Given a point set, AI goes toward the nearest point

(cs_move_in_direction <real> <real> <real>)
Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)

(cs_move_in_direction <ai> <boolean> <real> <real> <real>)
Actor moves at given angle, for the given distance, optionally with the given facing (angle, distance, facing)

(cs_move_towards <object>)
Move in the direction of the given object

(cs_move_towards <ai> <boolean> <object>)
Move in the direction of the given object

(cs_move_towards <object> <boolean>)
Move in the direction of the given object (and melee the target or not)

(cs_move_towards <ai> <boolean> <object> <boolean>)
Move in the direction of the given object (and melee the target or not)

(cs_move_towards_point <point_reference> <real>)
Move to within the given radius of the given point

(cs_move_towards_point <ai> <boolean> <point_reference> <real>)
Move to within the given radius of the given point

(cs_phase_to_point <point_reference>)
Phase to the given point

(cs_phase_to_point <ai> <boolean> <point_reference>)
Phase to the given point

(cs_phase_in)
Play phase in animation. Return instantly.

(cs_phase_in <ai> <boolean>)
Play phase in animation.

(cs_phase_in_blocking)
Play phase in animation and block until complete.

(cs_leap_to_point <point_reference>)
Leap to the given point

(cs_leap_to_point <ai> <boolean> <point_reference>)
Leap to the given point

(cs_oriented_leap_to_point <point_reference>)
oriented_Leap to the given point

(cs_oriented_leap_to_point <ai> <boolean> <point_reference>)
oriented_Leap to the given point

(cs_swarm_to <point_reference> <real>)
A swarm swarms towards the point (or prontrtroint set) in question, the individual forms stopping when they get within the given radius

(cs_swarm_to <ai> <boolean> <point_reference> <real>)
A swarm swarms towards the point (or point set) in question, the individual forms stopping when they get within the given radius

(cs_swarm_from <point_reference> <long>)
A swarm swarms away from the point in question, going at least the given distance

(cs_swarm_from <ai> <boolean> <point_reference> <real>)
A swarm swarms away from the point in question, going at least the given distance

(cs_pause <real>)
The actor does nothing for the given number of seconds

(cs_pause <ai> <boolean> <real>)
The actor does nothing for the given number of seconds

(cs_grenade <point_reference> <short>)
Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)

(gcs_renade <ai> <boolean> <point_reference> <short>)
Actor throws a grenade, either by tossing (arg2=0), lobbing (1) or bouncing (2)

(cs_use_equipment <real>)
Actor uses their current equipment for the given number of seconds

(cs_use_equipment <ai> <boolean> <real>)
Actor uses their current equipment for the given number of seconds

(cs_jump <real> <real>)
Actor jumps in direction of angle at the given velocity (angle, velocity)

(cs_jump <ai> <boolean> <real> <real>)
Actor jumps in direction of angle at the given velocity (angle, velocity)

(cs_jump_to_point <real> <real>)
Actor jumps with given horizontal and vertical velocity

(cs_jump_to_point <ai> <boolean> <real> <real>)
Actor jumps with given horizontal and vertical velocity

(cs_vocalize <short>)
Actor emits vocalization of given type

(cs_vocalize <ai> <boolean> <short>)
Actor emits vocalization of given type

(cs_play_sound <sound>)
Actor plays an impulse sound and the atom blocks until it is complete

(cs_play_sound <ai> <boolean> <sound>)
cs_Actor plays an impulse sound and the atom blocks until it is complete

(cs_play_sound <sound> <real>)
Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length

(cs_play_sound <ai> <boolean> <sound> <real>)
Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length

(cs_play_sound <sound> <real> <real>)
Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length

(cs_play_sound <ai> <boolean> <sound> <real> <real>)
Actor plays an impulse sound and the atom blocks for the given percentage of the sound's total length, at the given volume (0..1)

(cs_action <point_reference> <short>)
Actor plays an AI action towards the given point. ai_action_<tab> to see action options

(cs_action <ai> <boolean> <point_reference> <short>)
Actor plays an AI action towards the given point. ai_action_<tab> to see action options

(cs_action_at_object <object> <short>)
Actor plays an AI action towards the given object. ai_action_<tab> to see action options

(cs_action_at_object <ai> <boolean> <object> <short>)
Actor plays an AI action towards the given object. ai_action_<tab> to see action options

(cs_action_at_player <short>)
Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options

(cs_action_at_player <ai> <boolean> <short>)
Actor plays an AI action towards the nearest_player. ai_action_<tab> to see action options

(cs_custom_animation <animation_graph> <string_id> <boolean>)
starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(cs_custom_animation <ai> <boolean> <animation_graph> <string_id> <boolean>)
starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(cs_custom_animation <animation_graph> <string_id> <boolean> <point_reference>)
starts a custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE)

(cs_custom_animation <ai> <boolean> <animation_graph> <string_id> <boolean> <point_reference>)
starts a custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE)

(cs_custom_animation_death <animation_graph> <string_id> <boolean>)
starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(cs_custom_animation_death <ai> <boolean> <animation_graph> <string_id> <boolean>)
starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(cs_custom_animation_death <animation_graph> <string_id> <boolean> <point_reference>)
starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(cs_custom_animation_death <ai> <boolean> <animation_graph> <string_id> <boolean> <point_reference>)
starts a custom animation playing on the actor (interpolates into animation if last parameter is TRUE)

(cs_custom_animation_loop <animation_graph> <string_id> <boolean>)
starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING

(cs_custom_animation_loop <ai> <animation_graph> <string_id> <boolean>)
starts a looping custom animation playing on the actor (interpolates into animation if last parameter is TRUE) NON-BLOCKING

(cs_custom_animation_loop <animation_graph> <string_id> <boolean> <point_reference>)
starts a looping custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE) NON-BLOCKING

(cs_custom_animation_loop <ai> <animation_graph> <string_id> <boolean> <point_reference>)
starts a looping custom animation playing on the actor at the given point (interpolates into animation if last parameter is TRUE) NON-BLOCKING

(cs_play_line <ai_line>)
Play the named line in the current scene

(cs_play_line <ai> <boolean> <ai_line>)
Play the named line in the current scene

(cs_die <short>)
Actor dies in specified manner

(cs_die <ai> <boolean> <short>)
Actor dies in specified manner

(cs_deploy_turret <point_reference>)
Deploy a turret at the given script point

(cs_deploy_turret <ai> <boolean> <point_reference>)
Deploy a turret at the given script point

(cs_approach <object> <real> <real> <real>)
(approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)

(cs_approach <ai> <boolean> <object> <real> <real> <real>)
(approach <object> <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)

(cs_approach_player <real> <real> <real>)
(approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)

(cs_approach_player <ai> <boolean> <real> <real> <real>)
(approach player <distance - how close I want to get> <max-distance  - start approaching when target is within this range> <follow-distance - give up when target is outside this range>)

(cs_go_to_vehicle <vehicle>)
Actor gets in the appropriate vehicle

(cs_go_to_vehicle <ai> <boolean> <vehicle>)
Actor gets in the appropriate vehicle

(cs_go_to_vehicle <vehicle> <unit_seat_mapping>)
Actor gets in the named seat of the appropriate vehicle

(cs_go_to_vehicle <ai> <boolean> <vehicle> <unit_seat_mapping>)
Actor gets in the named seat of the appropriate vehicle

(cs_stationary_face <boolean> <point_reference>)
Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)

(cs_stationary_face <ai> <boolean> <point_reference>)
Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)

(cs_stationary_face_player <boolean>)
Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)

(cs_stationary_face_player <ai> <boolean>)
Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)

(cs_stationary_face_object <boolean> <object>)
Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)

(cs_stationary_face_object <ai> <boolean> <object>)
Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)

(cs_set_style <style>)
Override the actor's style

(cs_set_style <ai> <style>)
Override the actor's style

(cs_force_combat_status <short>)
Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)

(cs_force_combat_status <ai> <short>)
Force the actor's combat status (0= no override, 1=idle, 2= alert, 3= active)

(cs_enable_targeting <boolean>)
Actor autonomous target selection enabled/disabled.

(cs_enable_targeting <ai> <boolean>)
Actor autonomous target selection enabled/disabled.

(cs_enable_looking <boolean>)
Actor autonomous looking enabled/disabled.

(cs_enable_looking <ai> <boolean>)
Actor autonomous looking enabled/disabled.

(cs_enable_moving <boolean>)
Actor autonomous moving enabled/disabled.

(cs_enable_moving <ai> <boolean>)
Actor autonomous moving enabled/disabled.

(cs_enable_dialogue <boolean>)
Actor combat dialogue enabled/disabled.

(cs_enable_dialogue <ai> <boolean>)
Actor combat dialogue enabled/disabled.

(cs_suppress_activity_termination <boolean>)
Autonomous termination of activities is suppressed for the remainder of the command script

(cs_suppress_activity_termination <ai> <boolean>)
Autonomous termination of activities is suppressed for the remainder of the command script

(cs_suppress_dialogue_global <boolean>)
Combat dialogue is suppressed for the remainder of the command script

(cs_suppress_dialogue_global <ai> <boolean>)
Combat dialogue is suppressed for the remainder of the command script

(cs_look <boolean> <point_reference>)
Actor looks at the point for the remainder of the cs, or until overridden

(cs_look <ai> <boolean> <point_reference>)
Actor looks at the point for the remainder of the cs, or until overridden

(cs_look_player <boolean>)
Actor looks at nearest player for the duration of the cs, or until overridden

(cs_look_player <ai> <boolean>)
Actor looks at nearest player for the duration of the cs, or until overridden

(cs_look_object <boolean> <object>)
Actor looks at the object for the duration of the cs, or until overridden

(cs_look_object <ai> <boolean> <object>)
Actor looks at the object for the duration of the cs, or until overridden

(cs_aim <boolean> <point_reference>)
Actor aims at the point for the remainder of the cs, or until overridden (overrides look)

(cs_aim <ai> <boolean> <point_reference>)
Actor aims at the point for the remainder of the cs, or until overridden (overrides look)

(cs_aim_player <boolean>)
Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)

(cs_aim_player <ai> <boolean>)
Actor aims at nearest player for the duration of the cs, or until overridden (overrides look)

(cs_aim_object <boolean> <object>)
Actor aims at the object for the duration of the cs, or until overridden (overrides look)

(cs_aim_object <ai> <boolean> <object>)
Actor aims at the object for the duration of the cs, or until overridden (overrides look)

(cs_face <boolean> <point_reference>)
Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)

(cs_face <ai> <boolean> <point_reference>)
Actor faces exactly the point for the remainder of the cs, or until overridden (overrides aim, look)

(cs_face_player <boolean>)
Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)

(cs_face_player <ai> <boolean>)
Actor faces exactly the nearest player for the duration of the cs, or until overridden (overrides aim, look)

(cs_face_object <boolean> <object>)
Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)

(cs_face_object <ai> <boolean> <object>)
Actor faces exactly the given object for the duration of the cs, or until overridden (overrides aim, look)

(cs_shoot <boolean>)
Actor is allowed to shoot at its target or not

(cs_shoot <ai> <boolean>)
Actor is allowed to shoot at its target or not

(cs_shoot <boolean> <object>)
Actor shoots at given target

(cs_shoot <ai> <boolean> <object>)
Actor shoots at given target

(cs_shoot_point <boolean> <point_reference>)
Actor shoots at given point

(cs_shoot_point <ai> <boolean> <point_reference>)
Actor shoots at given point

(cs_shoot_secondary_trigger <boolean>)
Actor uses secondary trigger whenever he shoots

(cs_shoot_secondary_trigger <ai> <boolean>)
Actor uses secondary trigger whenever he shoots

(cs_lower_weapon <boolean>)
Actor keeps weapon lowered

(cs_lower_weapon <ai> <boolean>)
Actor keeps weapon lowered

(cs_vehicle_speed <real>)
Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1

(cs_vehicle_speed <ai> <real>)
Set the speed at which the actor will drive a vehicle, expressed as a multiplier 0-1

(cs_vehicle_speed_instantaneous <real>)
Set the instantaneous speed of the vehicle we're driving

(cs_vehicle_speed_instantaneous <ai> <real>)
Set the instantaneous speed of the vehicle we're driving

(cs_vehicle_boost <boolean>)
Enables or disables boost

(cs_vehicle_boost <ai> <boolean>)
Enables or disables boost

(cs_turn_sharpness <boolean> <real>)
Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)

(cs_turn_sharpness <ai> <boolean> <real>)
Set the sharpness of a vehicle turn (values 0 -> 1). Only applicable to nondirectional flying vehicles (e.g. dropships)

(cs_enable_pathfinding_failsafe <boolean>)
Actor blocks until pathfinding calls succeed

(cs_enable_pathfinding_failsafe <ai> <boolean>)
Actor blocks until pathfinding calls succeed

(cs_set_pathfinding_radius <real>)
Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script

(cs_set_pathfinding_radius <ai> <real>)
Sets the actor's pathfinding radius (this distance at which a destination is considered to have been reached) for the remainder of the command script

(cs_ignore_obstacles <boolean>)
Actor does not avoid obstacles when true

(cs_ignore_obstacles <ai> <boolean>)
Actor does not avoid obstacles when true

(cs_approach_stop)
Actor stops approaching

(cs_approach_stop <ai>)
Actor stops approaching

(cs_push_stance <string_id>)
Actor pushes given stance during this command script

(cs_push_stance <ai> <string_id>)
Actor pushes given stance during this command script

(cs_crouch <boolean>)
Actor crouches for the remainder of the command script, or until overridden

(cs_crouch <ai> <boolean>)
Actor crouches for the remainder of the command script, or until overridden

(cs_crouch <boolean> <real>)
Actor crouches / uncrouches, transitioning over the given number of seconds

(cs_crouch <ai> <boolean> <real>)
Actor crouches / uncrouches, transitioning over the given number of seconds

(cs_walk <boolean>)
Actor walks for the remainder of the command script, or until overridden

(cs_walk <ai> <boolean>)
Actor walks for the remainder of the command script, or until overridden

(cs_throttle_set <boolean> <real>)
Forces throttle to the specified value (0-1) for remainder of command script or until overridden.

(cs_throttle_set <ai> <boolean> <real>)
Forces throttle to the specified value (0-1) for remainder of command script or until overridden.

(cs_posture_set <string_id> <boolean>)
Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)

(cs_posture_set <ai> <string_id> <boolean>)
Actor enters the given posture (enters immediately rather than plays the entry animation if argument is TRUE)

(cs_posture_exit)
Actor exits the posture it's in

(cs_posture_exit <ai>)
Actor exits the posture it's in

(cs_stow <boolean>)
Actor stows its current weapon, based on the second bool variable

(cs_stow <ai> <boolean>)
Actor stows its current weapon, based on the second bool variable

(cs_teleport <point_reference> <point_reference>)
Actor teleports to point1 facing point2

(cs_teleport <ai> <point_reference> <point_reference>)
Actor teleports to point1 facing point2

(cs_stop_custom_animation)
Stop running a custom animation

(cs_stop_custom_animation <ai>)
Stop running a custom animation

(cs_stop_sound <sound>)
Stops the specified impulse sound.

(cs_stop_sound <ai> <sound>)
Stops the specified impulse sound.

(cs_player_melee <long>)
Actor performs player-specific melee

(cs_player_melee <ai> <boolean> <long>)
Actor performs player-specific melee

(cs_melee_direction <long>)
Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)

(cs_melee_direction <ai> <boolean> <long>)
Actor performs melee in provided direction (0= front, 1= back, 2= offhand, 3= tackle)

(cs_smash_direction <long>)
Actor performs smash in provided direction

(cs_smash_direction <ai> <boolean> <long>)
Actor performs smash in provided direction

(cs_actor_on_station <string_id>)
Assigns actor to stationkeeping station

(actorsClearErrors)
clears all actor errors.

(pup_play_show <string_id>)
Creates a new show with a given name. Returns a show ID

(pup_stop_show <long>)
Stops the show with the given ID

(pup_is_playing <long>)
Returns true if the given show is still playing

(pup_is_action_done <string_id>)
Returns true if the action with the given name is done. Can only be used from inside a Puppeteer script fragment.

(pup_is_action_playing <string_id>)
Returns true if the action with the given name is currently playing. Can only be used from inside a Puppeteer script fragment.

(pup_get_puppet <string_id>)
Returns the object with the given puppet name. Can only be used from inside a Puppeteer script fragment.

(pup_kill_biped <object> <boolean>)
<object> <ragdoll>. Kills the puppet at the end of the animation and optionally activates the ragdoll. Can only be used from inside a Puppeteer script fragment.

(pup_exit_vehicle_immediate <object> <boolean> <boolean>)
<biped> <standing> <instant ready weapon>. tells a character to exit the vehicle immediately. Can only be used from inside a Puppeteer script fragment.

(pup_disable_splitscreen <boolean>)
Disables splitscreen

(camera_control <boolean>)
toggles script control of the camera.

(camera_control <object> <boolean>)
toggles script control of the camera.

(camera_set <cutscene_camera_point> <short>)
moves the camera to the specified camera point over the specified number of ticks.

(camera_set_relative <cutscene_camera_point> <short> <object>)
moves the camera to the specified camera point over the specified number of ticks (position is relative to the specified object).

(camera_set_animation <animation_graph> <string_id>)
begins a prerecorded camera animation.

(camera_set_animation_relative <animation_graph> <string_id> <unit> <cutscene_flag>)
begins a prerecorded camera animation synchronized to unit relative to cutscene flag.

(camera_set_animation_with_speed <animation_graph> <string_id> <real>)
begins a prerecorded camera animation.

(camera_set_animation_relative_with_speed <animation_graph> <string_id> <unit> <cutscene_flag> <real>)
begins a prerecorded camera animation synchronized to unit relative to cutscene flag.

(camera_set_animation_relative_with_speed_loop <animation_graph> <string_id> <unit> <cutscene_flag> <real> <boolean>)
begins a prerecorded camera animation synchronized to unit relative to cutscene flag.

(camera_set_animation_relative_with_speed_loop_offset <animation_graph> <string_id> <unit> <cutscene_flag> <real> <boolean> <real>)
begins a prerecorded camera animation synchronized to unit relative to cutscene flag.

(camera_attach <object> <string_id> <boolean>)
<object> <marker> <fov>. attaches the scripted camera to a marker of an object. if fov is true, the scale of the marker determines the fov (in radians).

(camera_predict_resources_at_frame <animation_graph> <string_id> <unit> <cutscene_flag> <long>)
predict resources at a frame in camera animation.

(camera_predict_resources_at_point <cutscene_camera_point>)
predict resources given a camera point

(camera_set_first_person <unit>)
makes the scripted camera follow a unit.

(camera_set_cinematic)
makes the scripted camera follow the path of a cinematic scene.

(camera_set_cinematic_scene <cinematic_scene_data_definition> <long> <cutscene_flag>)
sets the scene, shot, and cutscene flag for the cinematic camera (NOTE: camera must be in cinematic mode by calling camera_set_cinematic).

(camera_place_relative <object>)
all subsequent camera placement in sapien be marked as relative to this object

(camera_place_worldspace)
all subsequent camera placement in sapien will be marked as worldspace

(camera_time)
returns the number of ticks remaining in the current camera interpolation.

(camera_set_field_of_view <real> <short>)
sets the field of view

(cinematic_camera_set_easing_in <real> <real> <real> <real> <real> <real>)
controls the camera easing from player position

(cinematic_camera_set_easing_out <real>)
controls the camera easing back to the player position

(cinematic_print <string>)
Print status lines for cinematic debugging

(camera_set_pan <cutscene_camera_point> <short>)
moves the camera to the specified camera point over the specified number of ticks with a constant speed.

(camera_pan <cutscene_camera_point> <cutscene_camera_point> <short> <short> <real> <short> <real>)
camera_pan <start point> <end point> <ticks> <ease-in ticks> <start velocity scale> <ease-out ticks> <end velocity scale>

(debug_camera_save)
saves the camera position and facing to camera_<map_name>.txt

(debug_camera_load)
loads the saved camera position and facing from camera_<map_name>.txt

(debug_camera_save_name <string>)
saves the camera position and facing to <name>_<map_name>.txt

(debug_camera_load_name <string>)
loads the camera position and facing from <name>_<map_name>.txt

(debug_camera_save_simple_name <string>)
saves the camera position and facing to camera_<name>.txt

(debug_camera_load_simple_name <string>)
loads the camera position and facing from camera_<name>.txt

(debug_camera_load_text <string>)
loads the camera position and facing from a passed in string

(debug_camera_set_position_facing <real> <real> <real> <real> <real> <real>)
sets the debug flycam to the specified world-space coordinates and orientation vector
NETWORK SAFE: Unknown, assumed unsafe

(director_debug_camera <boolean>)
enable/disable camera debugging

(director_print_camera_transform <long>)
Spews camera transform for the given output user index. For remote tools.

(director_print_deterministic_camera_transform <long>)
Spews camera transform for the reticule for the given output user index. For remote tools.

(game_difficulty_get)
returns the current difficulty setting, but lies to you and will never return easy, instead returning normal

(game_difficulty_get_real)
returns the actual current difficulty setting without lying

(game_insertion_point_get)
returns the number of the insertion point the map was started at

(pvs_set_object <object>)
sets the specified object as the special place that activates everything it sees.

(pvs_set_camera <cutscene_camera_point>)
sets the specified cutscene camera point as the special place that activates everything it sees.

(pvs_clear)
removes the special place that activates everything it sees.

(pvs_reset)
forces pvs to empty then back to full.

(players_unzoom_all)
resets zoom levels on all players

(players_deactivate_all_equipment)
Deactivates all players equipments

(player_enable_input <boolean>)
toggle player input. the player can still free-look, but nothing else.

(player_disable_movement <boolean>)
toggle player input. the look stick works, but nothing else.

(player_disable_movement <player> <boolean>)
toggle input for a specific player. the look stick works, but nothing else.

(player_disable_weapon_pickup <boolean>)
enable/disable all players' ability to pick up weapons

(player_night_vision_on)
returns true if any player has night vision on

(unit_night_vision_on <unit>)
returns true if the unit has a flashlight on

(player_active_camouflage_on)
returns true if any player is active camouflaged

(player_camera_control <boolean>)
enables/disables camera control globally

(player_action_test_reset)
resets the player action test state so that all tests will return false.

(player_action_test_primary_trigger)
returns true if any player has used primary trigger since the last call to (player_action_test_reset).

(player_action_test_secondary_trigger)
returns true if any player has used secondary trigger since the last call to (player_action_test_reset).

(player_action_test_grenade_trigger)
returns true if any player has used grenade trigger since the last call to (player_action_test_reset).

(player_action_test_vision_trigger)
returns true if any player has used vision trigger since the last call to (player_action_test_reset).

(player_action_test_rotate_weapons)
returns true if any player has hit the rotate-weapon button since the last call to (player_action_test_reset).

(player_action_test_rotate_grenades_prev)
returns true if any player has hit the rotate-grenades-prev button since the last call to (player_action_test_reset).

(player_action_test_rotate_grenades_next)
returns true if any player has hit the rotate-grenades-next button since the last call to (player_action_test_reset).

(player_action_test_jump)
returns true if any player has hit the jump button since the last call to (player_action_test_reset).

(player_action_test_equipment)
returns true if any player has hit the equipment button since the last call to (player_action_test_reset).

(player_action_test_context_primary)
returns true if any player has hit the reload button since the last call to (player_action_test_reset).

(player_action_test_vehicle_trick_primary)
returns true if any player has hit the vehicle trick button on the primary trigger side since the last call to (player_action_test_reset).

(player_action_test_vehicle_trick_secondary)
returns true if any player has hit the vehicle trick button on the grenade trigger side since the last call to (player_action_test_reset).

(player_action_test_melee)
returns true if any player has hit the melee button since the last call to (player_action_test_reset).

(player_action_test_action)
returns true if any player has hit the action key since the last call to (player_action_test_reset).

(player_action_test_accept)
returns true if any player has hit accept since the last call to (player_action_test_reset).

(player_action_test_cancel)
returns true if any player has hit cancel key since the last call to (player_action_test_reset).

(player_action_test_look_relative_up)
returns true if any player has looked up since the last call to (player_action_test_reset).

(player_action_test_look_relative_down)
returns true if any player has looked down since the last call to (player_action_test_reset).

(player_action_test_look_relative_left)
returns true if any player has looked left since the last call to (player_action_test_reset).

(player_action_test_look_relative_right)
returns true if any player has looked right since the last call to (player_action_test_reset).

(player_action_test_move_relative_fwd)
returns true if any player has moved forward since the last call to (player_action_test_reset).

(player_action_test_move_relative_back)
returns true if any player has moved back since the last call to (player_action_test_reset).

(player_action_test_move_relative_left)
returns true if any player has moved left since the last call to (player_action_test_reset).

(player_action_test_move_relative_right)
returns true if any player has moved right since the last call to (player_action_test_reset).

(player_action_test_look_relative_all_directions)
returns true if any player has looked up, down, left, and right since the last call to (player_action_test_reset).

(player_action_test_move_relative_all_directions)
returns true if any player has moved forward, backward, left, and right since the last call to (player_action_test_reset).

(player_action_test_cinematic_skip)
returns true if any player has pressed the cinematic skip button (player_action_test_reset).

(player_action_test_start)
returns true if any player has pressed the start button since the last call to (player_action_test_reset).

(player_action_test_back)
returns true if any player has pressed the back button since the last call to (player_action_test_reset).

(player_action_test_dpad_up)
returns true if any player has pressed dpad up since the last call to (player_action_test_reset).

(player_action_test_dpad_down)
returns true if any player has pressed dpad down since the last call to (player_action_test_reset).

(player_action_test_dpad_left)
returns true if any player has pressed dpad left since the last call to (player_action_test_reset).

(player_action_test_dpad_right)
returns true if any player has pressed dpad right since the last call to (player_action_test_reset).

(unit_action_test_reset <player>)
resets the player action test state so that all tests will return false.

(unit_action_test_primary_trigger <player>)
returns true if any player has used primary trigger since the last call to (player_action_test_reset).

(unit_action_test_secondary_trigger <player>)
returns true if any player has used secondary trigger since the last call to (player_action_test_reset).

(unit_action_test_grenade_trigger <player>)
returns true if any player has used grenade trigger since the last call to (player_action_test_reset).

(unit_action_test_vision_trigger <player>)
returns true if any player has used vision trigger since the last call to (player_action_test_reset).

(unit_action_test_rotate_weapons <player>)
returns true if any player has hit the rotate-weapon button since the last call to (player_action_test_reset).

(unit_action_test_rotate_grenades_prev <player>)
returns true if any player has hit the rotate-grenades-prev button since the last call to (player_action_test_reset).

(unit_action_test_rotate_grenades_next <player>)
returns true if any player has hit the rotate-grenades-next button since the last call to (player_action_test_reset).

(unit_action_test_jump <player>)
returns true if any player has hit the jump button since the last call to (player_action_test_reset).

(unit_action_test_equipment <player>)
returns true if any player has hit the equipment button since the last call to (player_action_test_reset).

(unit_action_test_context_primary <player>)
returns true if any player has hit the reload button since the last call to (player_action_test_reset).

(unit_action_test_vehicle_trick_primary <player>)
returns true if any player has hit the vehicle trick button on the primary trigger side since the last call to (player_action_test_reset).

(unit_action_test_vehicle_trick_secondary <player>)
returns true if any player has hit the vehicle trick button on the grenade trigger side since the last call to (player_action_test_reset).

(unit_action_test_melee <player>)
returns true if any player has hit the melee button since the last call to (player_action_test_reset).

(unit_action_test_action <player>)
returns true if any player has hit the action key since the last call to (player_action_test_reset).

(unit_action_test_accept <player>)
returns true if any player has hit accept since the last call to (player_action_test_reset).

(unit_action_test_cancel <player>)
returns true if any player has hit cancel key since the last call to (player_action_test_reset).

(unit_action_test_look_relative_up <player>)
returns true if any player has looked up since the last call to (player_action_test_reset).

(unit_action_test_look_relative_down <player>)
returns true if any player has looked down since the last call to (player_action_test_reset).

(unit_action_test_look_relative_left <player>)
returns true if any player has looked left since the last call to (player_action_test_reset).

(unit_action_test_look_relative_right <player>)
returns true if any player has looked right since the last call to (player_action_test_reset).

(unit_action_test_move_relative_fwd <player>)
returns true if a player has moved forward since the last call to (player_action_test_reset).

(unit_action_test_move_relative_back <player>)
returns true if a player has moved back since the last call to (player_action_test_reset).

(unit_action_test_move_relative_left <player>)
returns true if a player has moved left since the last call to (player_action_test_reset).

(unit_action_test_move_relative_right <player>)
returns true if a player has moved right since the last call to (player_action_test_reset).

(unit_action_test_look_relative_all_directions <player>)
returns true if any player has looked up, down, left, and right since the last call to (player_action_test_reset).

(unit_action_test_move_relative_all_directions <player>)
returns true if any player has moved forward, backward, left, and right since the last call to (player_action_test_reset).

(unit_action_test_cinematic_skip <player>)
returns true if any player has pressed the cinematic skip button (player_action_test_reset).

(unit_action_test_start <player>)
returns true if any player has pressed the start button since the last call to (player_action_test_reset).

(unit_action_test_back <player>)
returns true if any player has pressed the back button since the last call to (player_action_test_reset).

(unit_action_test_dpad_up <player>)
returns true if any player has pressed dpad up since the last call to (player_action_test_reset).

(unit_action_test_dpad_down <player>)
returns true if any player has pressed dpad down since the last call to (player_action_test_reset).

(unit_action_test_dpad_left <player>)
returns true if any player has pressed dpad left since the last call to (player_action_test_reset).

(unit_action_test_dpad_right <player>)
returns true if any player has pressed dpad right since the last call to (player_action_test_reset).

(unit_action_test_hero_assist <player>)
returns true if any player has pressed 'hero assist' (sprint) since the last call to (player_action_test_reset).

(unit_action_test_action_tap <player>)
returns true while the given player is tapping the action button.

(unit_confirm_message <player>)
Locks the accept button until the player presses accept
NETWORK SAFE: Unknown, assumed unsafe

(unit_confirm_cancel_message <player>)
Locks the cancel button until the player presses cancel
NETWORK SAFE: Unknown, assumed unsafe

(unit_enable_soft_ping_region <unit> <damage_region> <boolean>)
Enable/disable pain screen damage weight outputs on all units

(unit_print_soft_ping_regions <unit>)
Print the pain screen state on all the units

(player0_looking_up)
true if the first player is looking up

(player0_looking_down)
true if the first player is looking down

(player_set_pitch <player> <real> <long>)
sets up player look up test

(player_has_female_voice <player>)
returns true if the player has selected the female voice option

(player_action_test_lookstick_forward <player>)
true if the specified player pushed forward on lookstick

(player_action_test_lookstick_backward <player>)
true if the specified player pushed backward on lookstick

(debug_teleport_player <unit> <unit>)
for testing: teleports one player to another's location

(scenario_content_status_reload)
looks for local tags on disk if they are not already loaded.

(scenario_content_status_force_local)
forces game to use local tags if available.

(scenario_content_status_force_content)
forces game to use content tags.

(scenario_content_status_force_clear)
clears any force on the content status system.

(map_reset)
starts the map from the beginning.

(map_reset_debug)
starts the map from the beginning.  This is a debug only command!

(map_reset_random)
starts the map from the beginning with a new random seed.  This is a debug only command!

(switch_zone_set <zone_set>)
switches to a different zone set

(scenario_switch_to_bsp <string>)
Loads a single bsp

(scenario_print_zone_sets)
prints out the names of all the zone sets.

(scenario_print_current_zone_set)
brings out the names of all the bsps in the current zone set.

(scenario_print_bsps_bounds)
prints the active bsps bounds.

(current_zone_set)
returns the current zone set

(current_zone_set_fully_active)
returns the current zone set

(switch_map_and_zone_set <string> <string>)
switches to a different scenario and zone set

(crash <string>)
crashes (for debugging).

(version)
prints the build version.

(status)
prints the value of all global status variables.

(record_movie <short> <real> <short> <short>)
<frame rate> <seconds> <width> <height>

(record_movie_distributed <short> <long> <short> <long> <long>)
<frame rate> <seconds> <screen size> <mod count> <mod index>

(screenshot <string>)
takes a screenshot and saves as <name>.tif

(screenshot_debug)
takes a screenshot and saves as <name>.tif

(go_to_camera_point <long>)
goes to the camera point at the index

(take_screenshots_of_zone_set <string> <short>)
goes to every camera point in a zone set and takes a picture

(take_screenshots_of_scenario <string>)
goes to every camera point and takes a picture

(take_screenshots_of_current_zone_set <string>)
goes to every camera point in the current BSP and takes a picture

(take_screenshots_of_zone_set <string> <short> <string>)
goes to every camera point in a zone set and takes a picture

(take_screenshots_of_scenario <string> <string>)
goes to every camera point and takes a picture

(take_screenshots_of_current_zone_set <string> <string>)
goes to every camera point in the current BSP and takes a picture

(perf_capture_at_location <string>)
Takes perf data at a location

(streaming_report_at_location <string>)
Takes streaming data at a location

(screenshot_big <short> <string>)
takes an NxN multiple-page screenshot and saves as <name>.tif

(screenshot_big_raw <short> <string>)
takes an NxN multiple-page screenshot and saves as an HDR <name>.tif

(screenshot_size <short> <short> <string>)
takes a <width> x <height> screenshot and saves as an HDR <name>.tif

(screenshot_simple <string>)
takes a simple screenshot and saves as <name>.tif, static_cast<HSFunctionFlags>(FLAG(eHSFunction_debugFlag))

(screenshot_orthographic <long> <string>)
takes an NxN multiple-page orthographic screenshot and saves as <name>.tif

(ordnance_map_generate <real> <string>)
takes an ordnance map screenshot of the specified size (in megs) and saves as <name>.tif

(screenshot_cubemap <string>)
takes a cubemap screenshot and saves as <name>.tif

(screenshot_webmap <string>)
takes two special screenshots and saves them, along with the camera information, as <name>.tif, <name>_secondary.tif and <name>_camera.txt

(cubemap_dynamic_generate)
generates a dynamic cubemap and saves in the cubemaps directory

(object_snapshot <long> <string>)
takes a set of snapshot of object and saves as <snapshot\name>.tif

(structure_instance_snapshot <long>)
takes snapshot of all the instances in this bsp

(object_thumbnail <string> <string> <string>)
takes snapshots of objects to be used as thumnail previews

(main_menu)
goes back to the main menu

(main_halt <string>)
goes to a halted pregame state

(map_name <string>)
the same as game_start: launches a game for debugging purposes

(module <string>)
specifies modules to load after main map loaded

(game_multiplayer <string>)
debug map launching: sets the multiplayer engine for the next map.
NETWORK SAFE: No, for init.txt only

(game_campaign)
debug map launching: sets the next map to run in campaign mode.

(game_survival)
debug map launching: sets the next map to run in survival mode.

(game_firefight)
debug map launching: sets the next map to run in firefight mode.

(game_sandbox)
debug map launching: sets the next map to run in sandbox mode.

(game_player_count <long>)
debug map launching: sets the number of splitscreen players for the next map); does NOT set game mode (campaign vs. multiplayer).

(game_set_variant <string>)
Launches a game variant a on a map

(game_multiplayer)
debug map launching: sets the next map to run in multiplayer (megalo)  mode.
NETWORK SAFE: No, for init.txt only

(game_splitscreen <long>)
debug map launching: sets the number of multiplayer splitscreen players for the next map.

(game_difficulty <game_difficulty>)
debug map launching: sets the difficulty of the next map.

(game_active_skulls <long>)
debug map launching: sets the active skulls of the next map.

(game_coop_players <long>)
debug map launching: sets the number of coop players for the next map.

(game_initial_zone_set <string>)
debug map launching: sets the initial bsp for the next map.

(game_initial_BSP <string>)
debug map launching: sets the initial bsp for the next map.

(game_initial_starting_location <long>)
debug map launching: sets the initial starting point for the next map.
NETWORK SAFE: No, for init.txt only

(game_tick_rate <long>)
debug map launching: sets the tick rate for the next map.

(game_start <string>)
debug map launching: starts a game on the specified map.

(game_start_when_ready)
nicely starts the current game once the pregame lobby is stable

(game_start_when_joined <long>)
nicely starts a game when the specified number of users are in the lobby

(mp_map_name <string>)
network test: sets the name of the mp map to play

(game_rate <real> <real> <real>)
changes game update rate (DANGER: only use if you know what you're doing!)

(texture_cache_flush)
don't make me kick your ass

(geometry_cache_flush)
we fear change

(sound_cache_flush)
i'm a rebel!

(animation_cache_flush)
it's just sooooo wrong

(font_cache_flush)


(language_set <string>)
change the language for localization

(texture_cache_test_malloc)


(debug_memory)
dumps memory leaks.
NETWORK SAFE: Unknown, assumed unsafe

(debug_memory_by_file)
dumps memory leaks by source file.
NETWORK SAFE: Unknown, assumed unsafe

(debug_memory_for_file <string>)
dumps memory leaks from the specified source file.
NETWORK SAFE: Unknown, assumed unsafe

(debug_tags)
writes all memory being used by tag files into tag_dump.txt

(debug_single_tag)
inspect a single tag for programmer within visual studio

(tags_verify_all)
verifies usage of infidel fields is correct

(trace_next_frame <long>)
creates a tracedump of the next frame

(trace_next_frame_to_file <long> <string>)
creates a tracedump of the next frame in a specific file

(trace_tick <long>)
creates a tracedump of a specific game tick

(collision_log_enable <boolean>)
enables or disables collision logging.

(damage_control_get <string>)
gets a damage control setting by string

(damage_control_set <string> <boolean>)
sets a damage control setting by string

(fade_in <real> <real> <real> <long>)
does a screen fade in from a particular color

(fade_out <real> <real> <real> <long>)
does a screen fade out to a particular color

(fade_in_for_player <player>)
fade in a player's screen from black

(fade_out_for_player <player>)
fade out a player's screen to black

(init_light_rigs_of_shot <long>)
init light rigs of the current shot

(shutdown_all_light_rigs)
shutdown all persistent and non-persistent light rigs

(shutdown_light_rigs_of_shot)
shutdown any non-persistent existing light rigs of the current shot

(apply_scriptable_light_rigs <object> <string_id> <cinematic_lightprobe> <cutscene_camera_point>)
applies scriptable light rigs

(unapply_scriptable_light_rigs <object>)
unapply scriptable light rigs

(restore_all_vmf_light_rigs)
restore all VMF light rigs

(script_light_rig_direction <string> <long> <real> <real> <real>)
Script light rig direction

(script_light_rig_vmf <string> <real> <real> <real> <real> <real> <real> <real>)
Script light rig VMF

(scrip_light_rig_fill <string> <real> <real> <real> <real>)
Script light rig fill

(script_light_rig_balance <string> <real> <real> <real>)
Script light rig balance

(bake_forge_lights <boolean>)
bake lights on the Xbox for Forge World maps

(get_lightmap_direct_scalar_bsp <short>)
Get lightmap direct scalar for BSP

(get_lightmap_indirect_scalar_bsp <short>)
Get lightmap indirect scalar for BSP

(get_lightmap_analytic_scalar_bsp <short>)
Get lightmap analytic scalar for BSP

(set_lightmap_direct_scalar_bsp <short> <real>)
Set lightmap direct scalar for BSP

(set_lightmap_indirect_scalar_bsp <short> <real>)
Set lightmap indirect scalar for BSP

(set_lightmap_analytic_scalar_bsp <short> <real>)
Set lightmap analytic scalar for BSP

(cinematic_tag_fade_out_from_game <string_id>)
executes the fade settings setup in the cinematics tag for fading out from the game
returns the user set sleep time in hs_ticks

(cinematic_tag_fade_in_to_cinematic <string_id>)
executes the fade settings setup in the cinematics tag for fading in to the cinematic
returns the user set sleep time in hs_ticks

(cinematic_tag_fade_out_from_cinematic <string_id>)
executes the fade settings setup in the cinematics tag for fading out from the cinematic
returns the user set sleep time in hs_ticks

(cinematic_tag_fade_in_to_game <string_id>)
executes the fade settings setup in the cinematics tag for fading in to the game
returns the user set sleep time in hs_ticks

(cinematic_transition_fade_out_from_game <cinematic_transition_definition>)
executes the fade settings setup in the cinematic transition for fading out from the game
returns the user set sleep time in hs_ticks

(cinematic_transition_fade_in_to_cinematic <cinematic_transition_definition>)
executes the fade settings setup in the cinematic transition for fading in to the cinematic
returns the user set sleep time in hs_ticks

(cinematic_transition_fade_out_from_cinematic <cinematic_transition_definition>)
executes the fade settings setup in the cinematic transition for fading out from the cinematic
returns the user set sleep time in hs_ticks

(cinematic_transition_fade_in_to_game <cinematic_transition_definition>)
executes the fade settings setup in the cinematic transition for fading in to the game
returns the user set sleep time in hs_ticks

(cinematic_run_script_by_name <string_id>)
runs a cinematic script by name

(cinematic_start)
initializes game to start a cinematic (interruptive) cutscene

(cinematic_stop)
initializes the game to end a cinematic (interruptive) cutscene

(cinematic_skip_start_internal)
Enable cinematic skipping.

(cinematic_skip_stop_internal)
Disable cinematic skipping.

(cinematic_skip_in_progress)
Is cinematic skippable.

(cinematic_show_letterbox <boolean>)
sets or removes the letterbox bars

(cinematic_show_letterbox_immediate <boolean>)
sets or removes the letterbox bars

(cinematic_set_title <cutscene_title>)
activates the chapter title

(cinematic_set_title_delayed <cutscene_title> <real>)
activates the chapter title, delayed by <real> seconds

(cinematic_clear_title <cutscene_title>)
clears the chapter title
NETWORK SAFE: Unknown, assumed unsafe

(cinematic_suppress_bsp_object_creation <boolean>)
suppresses or enables the automatic creation of objects during cutscenes due to a bsp switch

(cinematic_subtitle <string_id> <real>)
displays the named subtitle for <real> seconds

(cinematic_set <cinematic_definition>)
sets the cinematic name for the current cinematic.

(cinematic_set_shot <cinematic_scene_definition> <cinematic_scene_data_definition> <long>)
sets the scene and shot for the current cinematic.

(cinematic_get_shot)
Print the stored scene and shot information to the screen

(cinematic_set_atmospere_fog <long>)
Sets atmosphere fog for cinematic.

(cinematic_set_camera_settings <long>)
Sets camera fx settings for cinematic.

(cinematic_set_ssao_mode <long>)
Sets SSAO mode for cinematic.

(cinematic_set_lightmap_scalars <real> <real>)
Sets lightmap direct and indirect scalars for cinematic.

(cinematic_set_early_exit <long>)
Used to store the state of skippable cinematics

(cinematic_get_early_exit)
Used to retrieve the state of skippable cinematics

(cinematic_set_active_camera <string_id>)
Used to change the rasterizer to display one of the texture cameras

(cinematic_object_create <string_id>)
Creates an object for use by cinematics

(cinematic_object_create_cinematic_anchor <cutscene_flag>)
Creates a cinematic anchor object for use by cinematics

(cinematic_object_destroy <string_id>)
Destroys an object created by cinematic_object_create

(cinematic_objects_destroy_all)
Destroys all objects created by cinematic_object_create

(cinematic_destroy)
Releases everything created by the cinematics system

(cinematic_full_screen_bink <boolean>)
Sets or removes cinematic full screen bink options

(cinematic_in_progress)
Tests if a cinematic is in progress

(cinematic_get_in_progress_index)
Returns scenario index of cinematic in progress

(cinematic_can_be_skipped)
Tests if a cinematic can be skipped

(cinematic_check_scenario_pruning <string>)
Checks if cinematic scripts have been pruned

(cinematic_prune_object <string>)
Prunes object type from cinematics

(cinematic_light_object <object> <string_id> <cinematic_lightprobe> <cutscene_camera_point>)
attaches cinematic lights to <object> at <marker> using scenario cinematic lighting palette entry <scenario-cinematic-lighting-name> from point of view of camera reference <camera>

(cinematic_light_object_off <object>)
Turn off cinematic lighting for the object.

(cinematic_lighting_rebuild_all)
Rebuild all cinematic lighting (SH only)

(CinematicLightingUpdateShadow <string> <real> <real> <real>)
Cinematic update for shadows

(CinematicLightingUpdateSample <string> <real> <real> <real> <real> <real> <real>)
Cinematic update the sampled params

(CinematicLightingUpdateProbe <string> <long> <real> <real> <real> <real>)
Cinematic update the probe data

(cinematic_object_get <string_id>)
Returns an object created by cinematic_object_create

(cinematic_unit_get <string_id>)
Returns a unit created by cinematic_object_create

(cinematic_weapon_get <string_id>)
Returns a weapon created by cinematic_object_create

(cinematic_reset <boolean>)
Resets the cinematics internal state

(camera_set_briefing <boolean>)
Used for briefing cinematics

(cinematic_debug_enter)
Debug setup at the start of cinematic

(cinematic_debug_exit)
Debug setup at the end of cinematic

(cinematic_debug_play <string> <string> <boolean> <long>)
Debug play cinematic

(cinematic_debug_stop)
Debug stop cinematic

(cinematic_pause)
Pause/resume the cinematic

(cinematic_step_one_frame)
Step the cinematic one frame

(cinematic_settings_enable <boolean>)
Enables/disables all cinematic settings (lightmap, fog, camera, etc)

(debug_cinematic_skip_script_stripping <boolean>)
Skip cinematic script stripping (will play with missing shots)

(cinematic_tag_reference_get_cinematic <long>)
Retrieve a cinematic tag from the cinematic system

(cinematic_tag_reference_get_scene <long>)
Retrieve a cinematic scene tag from the cinematic system

(cinematic_tag_reference_get_scene_data <long>)
Retrieve a cinematic scene data tag from the cinematic system

(cinematic_tag_reference_get_effect <long> <long> <long> <long>)
Retrieve an effect tag from the cinematic system

(cinematic_tag_reference_get_dialogue <long> <long> <long> <long>)
Retrieve a sound tag from the cinematic system

(cinematic_tag_reference_get_music <long> <long> <long> <long>)
Retrieve a sound tag from the cinematic system

(cinematic_tag_reference_get_music_looping <long> <long> <long> <long>)
Retrieve a looping sound tag from the cinematic system

(cinematic_tag_reference_get_animation <long> <long> <long>)
Retrieve a looping sound tag from the cinematic system

(cinematic_hide_scene_object <long>)
Hides specified object in current cinematic scene

(cinematic_scripting_object_coop_flags_valid <long> <long>)
Evaluate if a cinematic object should be displayed for the current coop flags

(cinematic_scripting_fade_out <real> <real> <real> <short>)
Fade out at the end of the cinematic

(cinematic_scripting_create_object <long> <long>)
Create a manually placed cinematic object

(cinematic_scripting_create_cinematic_object <long> <long>)
Create a manually placed cinematic object

(cinematic_scripting_start_animation <long> <long> <string_id>)
Animate a manually placed cinematic object

(cinematic_scripting_destroy_object <long> <long>)
Destroy a cinematic object

(cinematic_scripting_destroy_objects <long>)
Destroys all cinematic object

(cinematic_scripting_create_scene <long>)
Creates cinematic scene

(cinematic_scripting_destroy_scene <long>)
Destroys cinematic scene

(cinematic_scripting_create_shot <long> <long> <cutscene_flag>)
Sets the scene, shot, and cutscene flag for the cinematic.

(cinematic_scripting_initialize_shot <long>)
Intializes the cinematic for the given shot of the current cinematic

(cinematic_scripting_destroy_shot)
Destroys current cinematic shot

(cinematic_scripting_start_effect <long>)
Play a cinematic effect

(cinematic_scripting_start_effect_from_flag <long> <cutscene_flag>)
Play a cinematic effect attached to fx marker

(cinematic_scripting_stop_effect <long>)
Stop a cinematic effect

(cinematic_scripting_stop_effect_from_flag <long> <cutscene_flag>)
Stop a cinematic effect attached to fx marker

(cinematic_scripting_kill_effect <long>)
Stop a cinematic effect and kill all its particles

(cinematic_scripting_kill_effect_from_flag <long> <cutscene_flag>)
Stop a cinematic effect attached to fx marker and kill all its particles

(cinematic_scripting_start_music <long>)
Play a cinematic music

(cinematic_scripting_start_dialogue <long>)
Play a cinematic dialogue

(cinematic_scripting_stop_music <long>)
Stops a cinematic music

(cinematic_scripting_start_screen_effect <long>)
Starts playing a cinematic screen effect (.screen_effect)

(cinematic_scripting_stop_screen_effect <long>)
Stops playing a cinematic screen effect (.screen_effect)

(cinematic_scripting_create_and_animate_object <long> <long> <long> <string_id> <boolean>)
Create and Animate a cinematic object.

(cinematic_scripting_create_and_animate_cinematic_object <long> <long> <long> <string_id> <boolean>)
Create and Animate a cinematic object.

(cinematic_scripting_create_and_animate_object_no_animation <long> <long> <long> <boolean>)
Create and Animate a cinematic object.

(cinematic_scripting_create_and_animate_cinematic_object_no_animation <long> <long> <long> <boolean>)
Create and Animate a cinematic object.

(cinematic_scripting_set_user_input_constraints <long> <long> <long>)
Set user input constraints from a cinematic tag

(cinematic_scripting_start_texture_movie <long> <long> <long>)
Plays texture bink movie

(cinematic_scripting_stop_texture_movie <long> <long> <long>)
Stops texture bink movie

(attract_mode_start)
starts an attract mode movie

(attract_mode_set_seconds <long>)
sets number of seconds of the attract mode countdown timer.

(game_won)
causes the player to successfully finish the current level and move to the next

(game_won_with_finish_timer_override <real>)
causes the player to successfully finish the current level and move to the next; overrides finish timer

(game_lost <boolean>)
marks the game as lost or not lost

(game_revert)
causes the player to revert to his previous saved game (for testing and cinematic skipping only please!)

(game_award_level_complete_achievements)
awards end of level progress to players

(game_is_cooperative)
returns TRUE if the game is cooperative

(game_is_playtest)
returns the hs global boolean 'global_playtest_mode' which can be set in your init.txt

(game_can_use_flashlights <boolean>)
allows or disallows the user of player flashlights

(game_save_and_quit)
save & quit to the main menu

(game_save_unsafe)
saves right now, even if the game is in an immediate-loss state (NEVER USE THIS! EVER!)

(game_insertion_point_unlock <short>)
unlocks the given insertion point for the current map for all players

(game_insertion_point_lock <short>)
unlocks the given insertion point for the current map for all players

(game_insertion_point_set <short>)
debug map launching: sets the map insertion_point

(GameSetBadNextRevert <boolean>)
marks the next revert as bad. after too many bad reverts in a row the game will go back 2 checkpoints

(saved_games_delete_campaign_save <controller>)
delete the campaign saved game file for a controller

(saved_games_autosave_free_up_space)
tell the autosave queue to run its cleanup routine for each content type

(achievement_grant_to_player <player> <string_id>)
award named achievement to player

(achievement_grant_to_controller <controller> <string_id>)
award named achievement to player

(achievement_grant_to_all_players <string_id>)
award named achievement to all players

(achievements_enable <boolean>)
enable or disable the awarding of achievements

(achievements_skip_validation_checks <boolean>)
toggle the disabling of validation checks on achievement awarding

(debug_spawning_influencers <boolean>)
toggle debugging of any & all dynamic respawn influencers

(debug_spawning_respawn_zones <boolean>)
debugs respawn zone influences

(debug_spawning_proximity_forbid <boolean>)
debugs enemy proximity forbid influences

(debug_spawning_moving_vehicle <boolean>)
debugs moving vehicle danger influences

(debug_spawning_weapon_influences <boolean>)
debugs enemy weapon danger influences

(debug_spawning_dangerous_projectiles <boolean>)
debugs dangerous projectile influences

(debug_spawning_deployed_equipment <boolean>)
debugs deployed equipment influences

(debug_spawning_proximity_enemy <boolean>)
debugs enemy proximity bias influences

(debug_spawning_teammates <boolean>)
debugs teammate proximity bias influences

(debug_spawning_dead_teammates <boolean>)
debug dead teammate influencers

(debug_spawning_drop_pod <boolean>)
debug ordnance drop pod influences

(debug_spawning_auto_turret <boolean>)
debug auto turret influences

(debug_spawning_random_influence <boolean>)
toggles display of random influence contribution

(debug_spawning_nominal_weight <boolean>)
toggles display of the nominal weight influence contribution

(debug_spawning_natural_weight <boolean>)
toggles display of the natural weight influence contribution

(debug_spawning_target <string>)
sets target player for respawn influencer debugging display

(debug_spawning_use_history <long>)
sets the saved respawn state for respawn influencer debugging display

(debug_initial_spawn_point_objects <boolean>)
toggles debug cycling through multiplayer initial spawn points objects

(debug_respawn_point_objects <boolean>)
toggles debug cycling through multiplayer respawn points objects

(debug_spawning_get_index)
gets the current debug cycling multiplayer spawn point index

(debug_spawning_set_index <short>)
sets the current debug cycling multiplayer spawn point index

(debug_ordnance_drop_check <boolean>)
toggles testing ordnance drop points

(debug_spawning_kill_user_and_adjust_index <long> <long>)
<user index> <index adjustment> - Kills the unit associated with the given local user index [0..3] and adds the adjustment to the next debug spawning index

(set_spawn_point_debugging_level <long>)
Set spawn point debugging level (0 == none)

(game_export_variant_settings <string>)
export the current game engine variant settings to the specified text file

(game_engine_event_test_general <long>)
test game engine general event

(game_engine_event_test_flavor <long>)
test game engine flavor event

(core_load)
loads debug game state from core\core.bin

(core_load_name <string>)
loads debug game state from core\<path>

(core_save)
saves debug game state to core\core.bin

(core_save_name <string>)
saves debug game state to core\<path>

(core_load_game)
loads level and game state from core\core.bin

(core_load_game_name <string>)
loads level and game state from core\<path>

(core_save_state_every_second <boolean>)
toggle saving game state out every second

(core_regular_upload_to_debug_server <boolean>)
toggle periodic core uploading to debug server

(core_set_upload_option <string>)
sets options for game state uploading (current options are 'default', 'repro', and 'stress'

(core_force_immediate_save_on_core_load <boolean>)
Forces film core loads to trigger game_save_immediate() on load (which mimics the game save that occurs on core load in stress jobs).

(force_debugger_not_present <boolean>)
forces is_debugger_present() to return false

(force_debugger_always_present <boolean>)
forces is_debugger_present() to return true

(game_safe_to_save)
returns FALSE if it would be a bad idea to save the player's game right now

(game_safe_to_speak)
returns FALSE if it would be a bad idea to play mission dialog right now

(game_all_quiet)
returns FALSE if there are bad guys around, projectiles in the air, etc.

(game_save)
checks to see if it is safe to save game, then saves (gives up after 8 seconds)

(game_save_cancel)
cancels any pending game_save, timeout or not

(game_save_no_timeout)
checks to see if it is safe to save game, then saves (this version never gives up)

(game_save_immediate)
disregards player's current situation and saves (BE VERY CAREFUL!)

(game_saving)
checks to see if the game is trying to save the map.

(game_reverted)
don't use this for anything, you black-hearted bastards.

(survival_mode_respawn_dead_players)
respawns all dead players even if no lives are left

(survival_mode_lives_get <team>)
get the number of lives left in survival mode

(survival_mode_lives_set <team> <long>)
set the number of lives left in survival mode

(survival_mode_get_mp_round_count)
get the number of mp rounds

(survival_mode_get_mp_round_current)
get the current mp round index

(survival_mode_set_get)
get the current set index for survival mode

(survival_mode_round_get)
get the current round index for survival mode

(survival_mode_waves_per_round)
get the number of waves per round for survival mode

(survival_mode_rounds_per_set)
get the number of rounds per set for survival mode

(survival_mode_wave_get)
get the current wave index for survival mode

(survival_mode_set_multiplier_get)
get the current wave index for survival mode

(survival_mode_set_multiplier_set <real>)
set the current wave index for survival mode

(survival_mode_bonus_multiplier_get)
get the current wave index for survival mode

(survival_mode_bonus_multiplier_set <real>)
set the current wave index for survival mode

(survival_mode_get_wave_squad)
returns the name of the squad template for the current wave

(survival_mode_current_wave_is_initial)
returns true if the current wave is the first of the round

(survival_mode_current_wave_is_boss)
returns true if the current wave is the final of the round

(survival_mode_current_wave_is_bonus)
returns true if the current wave is the bonus round

(survival_mode_current_wave_is_last_in_set)
returns true if the currect wave is the last wave before the end of the set

(survival_mode_begin_new_set)
Starts a new set

(survival_mode_begin_new_wave)
Starts a new wave

(survival_mode_end_set)
Ends a set

(survival_mode_end_wave)
Ends a wave

(survival_mode_award_hero_medal)
lets the engine award the hero medal

(survival_mode_incident_new <string_id>)
fires a start new set game event

(survival_mode_get_time_limit)
Get the survival mode time limit from the game variant

(survival_mode_get_set_count)
Get the survival mode set count from the game variant

(survival_mode_get_bonus_lives_awarded)
Get the survival mode bonus lives from the game variant

(survival_mode_get_bonus_target)
Get the survival mode bonus target from the game variant

(survival_mode_get_shared_team_life_count)
Get the survival mode spartan life count from the game variant

(survival_mode_get_elite_life_count)
Get the survival mode elite life count from the game variant

(survival_mode_max_lives)
Get the survival mode max lives from the game variant

(survival_mode_generator_count)
Get the survival mode generator count from the game variant

(survival_mode_bonus_lives_elite_death)
Get the survival mode bonus lives for killing an elite player from the game variant

(survival_mode_scenario_extras_enable)
Get the survival mode scenario hazards enabled property from the game variant

(survival_mode_weapon_drops_enable)
Get the survival mode weapon drops enabled property from the game variant

(survival_mode_ammo_crates_enable)
Get the survival mode ammo crates enabled property from the game variant

(survival_mode_generator_defend_all)
Get the survival mode generator defend all property from the game variant

(survival_mode_generator_random_spawn)
Get the survival mode generator random spawn property from the game variant

(survival_mode_current_wave_uses_dropship)
Get the survival mode current wave uses a dropship property from the game variant

(survival_mode_get_current_wave_time_limit)
Get the survival mode duration property for the current wave from the game variant

(survival_mode_get_respawn_time_seconds <mp_team>)
Respawn time for a team

(survival_mode_team_respawns_on_wave <team>)
Does this team respawn only when waves complete?

(survival_mode_sudden_death <boolean>)
Start or stop sudden death for survival mode

(survival_increment_human_score <player>)
Increments the player's score by one.

(survival_increment_elite_score <player>)
Increments the player's score by one.

(survival_mode_set_spartan_license_plate <long> <long> <string_id> <string_id> <string_id>)
Shows the license plate for Spartans: Variant Icon, Designator Icon, Variant Text, Description Text, Designator Text

(survival_mode_set_elite_license_plate <long> <long> <string_id> <string_id> <string_id>)
Shows the license plate for Elites: Variant Icon, Designator Icon, Variant Text, Description Text, Designator Text

(survival_mode_player_count_by_team <team>)
given a team index, returns the player count of that team

(survival_mode_players_by_team <team>)
given a team index, returns an object list containing all living player objects belonging to that team

(sound_impulse_predict <sound>)
your mom part 2.

(sound_impulse_trigger <sound> <object> <real> <long>)
plays an impulse sound from the specified source object (or "none"));, with the specified scale.

(sound_impulse_start <sound> <object> <real>)
plays an impulse sound from the specified source object (or "none"));, with the specified scale.

(sound_impulse_start_marker <sound> <object> <string_id> <real>)
plays an impulse sound from the specified source object and marker(or "none"));, with the specified scale.

(sound_impulse_start_cinematic <sound> <object> <real> <real> <real>)
<sound> <object> <scale> <3d gain> <first person gain> plays an impulse sound from the specified source object.

(sound_impulse_start_effect <sound> <object> <real> <string_id>)
plays an impulse sound from the specified source object (or "none"));, with the specified scale and effect.

(sound_impulse_start_with_subtitle <sound> <object> <real> <string_id> <string_id>)
plays an impulse sound from the specified source object (or "none"));, with the specified scale and displays a subtitle.

(sound_impulse_time <sound>)
returns the time remaining for the specified impulse sound.

(sound_impulse_time <sound> <long>)
<sound> <total playing time> returns the time remaining for the specified impulse sound based on <total playing time>.

(sound_impulse_language_time <sound>)
returns the time remaining for the specified impulse sound. DO NOT CALL IN CUTSCENES.

(sound_impulse_stop <sound>)
stops the specified impulse sound.

(sound_impulse_stop_object <sound> <object>)
stops the specified impulse sound that's playing on the specified object.

(sound_impulse_start_3d <sound> <real> <real>)
<sound> <azimuth> <scale> at the sound's minimum distance

(sound_impulse_mark_as_outro <sound>)
marks a sound as outro (meaning it plays past an unskipped cinematic).

(sound_impulse_start_naked <sound> <string_id> <string_id>)
<sound> <pitch range name> <permutation index name> through the speakers it was encoded for

(sound_preload_dialogue_sounds <string>)
<dialogue> preloads the dialogue tag so the sounds it refer to don't hitch in the dialog view.

(sound_max_time <sound>)
returns the maximum playing time in ticks for the specified sound tag.

(play_sound_subtitle <sound>)
play the subtitle for the specified sound tag without playing the sound itself. Returns the sound duration in seconds.

(music_start <sound_event>)
Start a music piece with this event

(music_stop <sound_event>)
Stop a music piece with this event

(music_set_state <sound_event>)
Set music state with this event

(music_trigger <sound_event>)
Plays a music event (but this event is not saved for restore)

(music_override_custom_soundtrack <boolean>)
Temporarily overrides custom user soundtrack (for cinematics/vignettes/etc)

(sound_set_state <sound_event>)
Sends a state event. Will be restored from Save

(voiceover_play <long>)
plays the nth entry in the current level's voiceover tag

(voiceover_stop)
stops playing any active voiceover sound

(sound_looping_predict <looping_sound>)
your mom.

(sound_looping_start <looping_sound> <object> <real>)
plays a looping sound from the specified source object (or "none"), with the specified scale.

(sound_looping_start_marker <looping_sound> <object> <string_id> <real>)
plays a looping sound from the specified source object and marker(or "none"), with the specified scale.

(sound_looping_stop <looping_sound>)
stops the specified looping sound.

(sound_looping_stop_object <looping_sound> <object>)
stops the specified looping sound playing on the given source object.

(sound_looping_stop_immediately <looping_sound>)
stops the specified looping sound immediately.

(sound_looping_set_scale <looping_sound> <real>)
changes the scale of the sound (which should affect the volume) within the range 0 to 1.

(sound_looping_set_alternate <looping_sound> <boolean>)
enables or disables the alternate loop/alternate end for a looping sound.

(sound_looping_activate_layer <looping_sound> <long>)
activates a looping sound layer (1-4).

(sound_looping_deactivate_layer <looping_sound> <long>)
deactivates a looping sound layer (1-4).

(sound_loop_spam)
start all loaded looping sounds

(sound_class_show_channel <string> <boolean>)
shows/hides sound classes w/ substring in debug_sound_channels view

(sound_class_debug_sound_start <string> <boolean>)
shows/hides when sounds of sound classes w/ substring start

(debug_sounds_enable <string> <boolean>)
enables or disables all sound classes matching the substring.

(sound_class_set_gain <string> <real> <short>)
changes the gain on the specified sound class(es) to the specified gain over the specified number of ticks.

(sound_class_set_gain_db <string> <real> <short>)
changes the gain on the specified sound class(es) to the specified gain(dB) over the specified number of ticks.

(sound_class_enable_ducker <string> <boolean>)
enables or disables the ducker on all sound classes matching the substring.

(debug_sound_environment_parameter <long> <real>)


(sound_start_global_effect <string_id> <real>)
start a global effect

(sound_start_timed_global_effect <string_id> <real> <real>)
start a global sound effect for a given amount of time

(sound_stop_global_effect <string_id>)
stop a global effect

(sound_enable_acoustic_palette <string_id>)
reenable a disabled acoustic palette

(sound_disable_acoustic_palette <string_id>)
disable an acoustic palette

(vehicle_force_alternate_state <vehicle> <boolean>)
Forces alternate state for selected vehicle (like deploying a wolverine

(vehicle_auto_turret <vehicle> <trigger_volume> <real> <real> <real>)
Sets the specified trigger volume and parameters for an auto turret

(vehicle_hover <vehicle> <boolean>)
stops the vehicle from running real physics and runs fake hovering physics instead.

(vehicle_start_trick <vehicle> <long>)
make a vehicle start a trick

(vehicle_count_bipeds_killed <vehicle>)
returns how many people this vehicle has killed

(vehicle_ignore_damage_knockback <vehicle> <boolean>)
stops the vehicle from getting knocked around by damage.

(biped_ragdoll <unit>)
given a dead biped, turns on ragdoll

(water_float_reset <object>)
allows an object to continue floating

(hud_show_training_text <boolean>)
true turns on scripted training text

(hud_set_training_text <string_id>)
sets the string id fo the scripted training text

(hud_enable_training <boolean>)
true turns training on, false turns it off.

(player_training_activate_night_vision)
guess

(player_training_activate_crouch)
guess

(player_training_activate_stealth)
guess

(player_training_activate_equipment)
guess

(player_training_activate_jump)
guess

(player_training_reset <controller>)
Resets all player training data

(navpoint_track_object <object> <boolean>)
turns on/off a navpoint tracking an object

(navpoint_track_object_named <object> <string_id>)
turns on a navpoint tracking an object with the specified art

(navpoint_track_object_named_with_string <object> <string_id> <string_id>)
turns on a navpoint tracking an object with the specified art and string

(navpoint_track_object_for_player <player> <object> <boolean>)
turns on/off a navpoint tracking an object for one player

(navpoint_track_object_for_player_named <player> <object> <string_id>)
turns on a navpoint tracking an object with the specified art

(navpoint_track_object_for_player_named_with_string <player> <object> <string_id> <string_id>)
turns on a navpoint tracking an object with the specified art and string

(navpoint_object_set_vertical_offset <object> <real>)
set the vertical offset in world units for a tracked object

(navpoint_object_set_on_radar <object> <boolean> <boolean>)
set the object on the radar for a tracked object: first bool is for enable/disable, second is to show extended range in radar

(navpoint_track_objects_of_type <object_definition> <string_id> <boolean>)
mark all of these objects with the specified art

(navpoint_is_tracking_object <object>)
checks if tracking is on for an object

(navpoint_is_tracking_object_for_player <player> <object>)
checks if tracking is on for an object for one player

(navpoint_track_flag <cutscene_flag> <boolean>)
turns on/off a navpoint tracking a cutscene flag

(navpoint_track_flag_named <cutscene_flag> <string_id>)
turns on a navpoint tracking a cutscene flag with the specified art

(navpoint_track_flag_named_with_string <cutscene_flag> <string_id> <string_id>)
turns on a navpoint tracking a cutscene flag with the specified art and string

(navpoint_track_flag_for_player <player> <cutscene_flag> <boolean>)
turns on/off a navpoint tracking a cutscene flag

(navpoint_track_flag_for_player_named <player> <cutscene_flag> <string_id>)
turns on a navpoint tracking a cutscene flag with the specified art

(navpoint_track_flag_for_player_named_with_string <player> <cutscene_flag> <string_id> <string_id>)
turns on a navpoint tracking a cutscene flag with the specified art and string

(navpoint_cutscene_flag_set_vertical_offset <cutscene_flag> <real>)
set the vertical offset in world units for a chud_track_cutscene_flag

(navpoint_cutscene_flag_set_on_radar <cutscene_flag> <boolean> <boolean>)
set the object on the radar for a tracked flag: first bool is for enable/disable, second is to show extended range in radar

(navpoint_is_tracking_flag <cutscene_flag>)
checks if tracking is on for a cutscene flag

(navpoint_is_tracking_flag_for_player <player> <cutscene_flag>)
checks if tracking is on for a cutscene flag for one player

(navpoint_scripting_force_enemy_always_on <boolean>)
forces the enemy navpoints to always be on: bool is for enable/disable

(hud_show <boolean>)
hides/shows the whole HUD

(hud_show_messages <boolean>)
hides/shows hud text

(hud_show_radar <boolean>)
hides/shows the radar

(hud_show_crosshair <boolean>)
hides/shows the crosshair

(hud_show_shield <boolean>)
hides/shows the shield bar

(hud_show_weapon <boolean>)
hides/shows the weapon

(hud_show_navpoints <boolean>)
hides/shows nav points

(hud_show_toast_commendations <boolean>)
hides/shows toast commendations

(hud_show_fanfares <boolean>)
hides/shows fanfare messages

(hud_play_global_animtion <string_id>)
adds an animation to play on the whole HUD

(hud_stop_global_animtion <string_id>)
removes an animation played on the whole HUD

(hud_show_medal_posting_ui <boolean>)
hides/shows hud messages related to attaining a medal

(hud_set_rampancy_intensity <player> <real>)
sets the intensity of Cortana's rampancy

(hud_play_pip <string>)
DEPRICATED: USE hud_play_pip_from_tag

(hud_play_pip_from_tag <bink_definition>)
Plays a PIP video from a bink tag

(chud_show_screen_training <player> <string_id>)
hides/shows the training tip in the chud

(chud_cinematic_fade <real> <real>)
parameter 1 is how, parameter 2 is when

(chud_show <boolean>)
hides/shows the entire chud

(chud_show_crosshair <boolean>)
hides/shows the crosshair

(chud_show_shield <boolean>)
hides/shows the shield

(chud_show_grenades <boolean>)
hides/shows the grenade hud

(chud_show_messages <boolean>)
hides/shows the chud messages

(chud_show_motion_sensor <boolean>)
hides/shows the motion sensor chud

(chud_show_weapon_stats <boolean>)
hides/shows the weapon huds

(chud_fade_weapon_stats_for_player <player> <real> <long>)
fade out the hud to <real> opacity over <integer> ticks

(chud_fade_crosshair_for_player <player> <real> <long>)
fade out the hud to <real> opacity over <integer> ticks

(chud_fade_shield_for_player <player> <real> <long>)
fade out the hud to <real> opacity over <integer> ticks

(chud_fade_grenades_for_player <player> <real> <long>)
fade out the hud to <real> opacity over <integer> ticks

(chud_fade_messages_for_player <player> <real> <long>)
fade out the hud to <real> opacity over <integer> ticks

(chud_fade_motion_sensor_for_player <player> <real> <long>)
fade out the hud to <real> opacity over <integer> ticks

(chud_fade_chapter_title_for_player <player> <real> <long>)
fade out the hud to <real> opacity over <integer> ticks

(chud_cinematic_fade <real> <real>)
parameter 1 is how, parameter 2 is when

(chud_track_object <object> <boolean>)
turns on/off the navpoint and display text of the specified object

(chud_track_object_with_priority <object> <long>)
turns on the navpoint and display text of the specified object

(chud_track_object_with_priority <object> <long> <string_id>)
turns on the navpoint and display text of the specified object

(chud_track_flag <cutscene_flag> <boolean>)
turns on/off the navpoint and display text of the specified flag

(chud_track_flag_with_priority <cutscene_flag> <long>)
turns on the navpoint and display text of the specified flag

(chud_track_flag_with_priority <cutscene_flag> <long> <string_id>)
turns on the navpoint and display text of the specified flag

(chud_track_object_for_player <player> <object> <boolean>)
turns on/off the navpoint and display text of the specified object

(chud_track_object_for_player_with_priority <player> <object> <long>)
turns on the navpoint and display text of the specified object

(chud_track_object_for_player_with_priority <player> <object> <long> <string_id>)
turns on the navpoint and display text of the specified object

(chud_track_flag_for_player <player> <cutscene_flag> <boolean>)
turns on/off the navpoint and display text of the specified flag

(chud_track_flag_for_player_with_priority <player> <cutscene_flag> <long>)
turns on the navpoint and display text of the specified flag

(chud_track_flag_for_player_with_priority <player> <cutscene_flag> <long> <string_id>)
turns on the navpoint and display text of the specified flag

(chud_track_object_set_vertical_offset <object> <real>)
set the vertical offset in world units for a chud_track_object object

(chud_track_cutscene_flag_set_vertical_offset <cutscene_flag> <real>)
set the vertical offset in world units for a chud_track_cutscene_flag

(chud_post_message_HACK <string>)
posts a string to the given user's HUD.  Use NONE for all users
this is for prototyping only, don't use this and expect to ship with it

(chud_post_campaign_title_message <player> <string> <long>)
posts a campaign title message to the given user's HUD.

(chud_post_campaign_objective_message <player> <string> <long>)
posts a campaign objective message to the given user's HUD.

(chud_post_message <player> <string_id>)
posts a string to the given player's HUD.

(chud_post_score_message <player> <string_id>)
posts a string to the given player's HUD.

(chud_post_medal <player> <string_id>)
posts a medal to the given player's HUD.

(chud_post_medal_with_score <player> <string_id> <long>)
posts a medal to the given player's HUD with a score value.

(chud_set_static_hs_variable <player> <long> <real>)
Sets a CHUD variable

(chud_set_countdown_hs_variable <player> <long> <real>)
Sets a CHUD variable that counts down to 0

(chud_set_countup_hs_variable <player> <long> <real>)
Sets a CHUD variable that counts up forever

(chud_clear_hs_variable <player> <long>)
Clear a CHUD variable

(chud_get_hs_variable <player> <long>)
Get the value of a CHUD variable

(chud_show_arbiter_ai_navpoint <boolean>)
hides/shows the entire chud

(chud_show_screen_objective <string_id>)
hides/shows the objective tip in the chud

(chud_show_screen_chapter_title <string_id>)
hides/shows the chapter title in the chud

(chud_show_screen_training <player> <string_id>)
hides/shows the training tip in the chud

(chud_show_picture_in_picture <string_id> <long>)
<image name> <frame index> hides/shows a character comms display in the chud

(cls)
clears console text from the screen

(events_spam_suppression_enable <boolean>)
enables or disables the suppression of event spamming

(error_geometry_show <string>)
highlights all error geometry with a name that includes the given substring

(error_geometry_hide <string>)
hides all error geometry with a name that includes the given substring

(error_geometry_show_all)
highlights all error geometry

(error_geometry_hide_all)
hides all error geometry

(error_geometry_list)
prints out a list of all error geometry types and counts

(player_effect_set_max_translation <real> <real> <real>)
<x> <y> <z>

(player_effect_set_max_rotation <real> <real> <real>)
<yaw> <pitch> <roll>

(player_effect_set_max_rumble <real> <real>)
<left> <right>

(player_effect_start <real> <real>)
<max_intensity> <attack time>

(player_effect_stop <real>)
<decay>

(player_effect_set_max_translation_for_player <player> <real> <real> <real>)
<x> <y> <z>

(player_effect_set_max_rotation_for_player <player> <real> <real> <real>)
<yaw> <pitch> <roll>

(player_effect_set_max_rumble_for_player <player> <real> <real>)
<left> <right>

(player_effect_start_for_player <player> <real> <real>)
<max_intensity> <attack time>

(player_effect_stop_for_player <player> <real>)
<decay>

(time_code_show <boolean>)
shows the time code timer

(time_code_start <boolean>)
starts/stops the time code timer

(time_code_reset)
resets the time code timer

(render_atmosphere_fog <boolean>)
enable/disable atmosphere fog

(motion_blur <boolean>)
enable/disable motion blur

(antialias_blur <boolean>)
enable/disable antialias blur

(render_weather <boolean>)
enable/disable atmosphere fog

(render_patchy_fog <boolean>)
enable/disable patchy fog

(render_planar_fog <boolean>)
enable/disable planar fog

(motion_blur_enabled)
check if motion blur is enabled

(mlaa_mode <long>)
set morphological antialiasing mode (0 = disable, 1 = color, 2 = depth, 3 = color + depth

(mlaa_color_exponent <real>)
set morphological antialiasing color exponent

(mlaa_color_threshold <real>)
set morphological antialiasing color threshold

(mlaa_depth_threshold <real>)
set morphological antialiasing depth threshold

(mlaa_search_steps <long>)
set morphological antialiasing maximum search steps

(mlaa_separate_generate <boolean>)
set morphological antialiasing to separate the generate pass into horizontal / vertical

(player_has_skills)
Are you the best?

(player_has_mad_secret_skills <long>)
You are the best!

(controller_invert_look)
invert look on all attached controllers

(controller_look_speed <short>)
set look speed for all attached controllers

(player_invert_look <player>)
invert player's look inversion setting

(user_interface_controller_get_last_level_played <short>)
returns index of last completed solo level for profile index passed in

(user_interface_hud_show_ammo_navpoints <boolean>)
overrides UI-globals tag to show/hide navpoints on ammo sources when you need ammo

(controller_set_look_inverted <controller> <boolean>)
set look inversion for specified controller

(controller_set_vibration_enabled <controller> <boolean>)
set vibration for specified controller

(controller_set_flight_stick_aircraft_controls <controller> <boolean>)
set airrcraft flight stick controls for specified controller

(controller_set_auto_center_look <controller> <boolean>)
set auto center look for specified controller

(controller_set_crouch_lock <controller> <boolean>)
set crouch lock for specified controller

(controller_set_southpaw <controller> <boolean>)
set southpaw for specified controller

(controller_set_clench_protection <controller> <boolean>)
set clench protection look for specified controller

(controller_set_button_preset <controller> <button_preset>)
set button preset for specified controller

(controller_set_custom_button <controller> <long> <long>)
set custom button for specified controller

(controller_set_joystick_preset <controller> <joystick_preset>)
set joystick preset for specified controller

(controller_set_look_sensitivity <controller> <short>)
set look sensitivity for specified controller

(controller_unlock_single_player_levels <controller>)
<controller> unlock all single player levels for specified controller

(controller_lock_single_player_levels <controller>)
<controller> lock all single player levels for specified controller

(controller_unlock_skulls <controller>)
<controller> unlock all campaign skulls for specified controller

(controller_lock_skulls <controller>)
<controller> lock all campaign skulls for specified controller

(controller_unlock_models <controller>)
<controller> unlock all model permutations for specified controller

(controller_lock_models <controller>)
<controller> lock all model permutations for specified controller

(controller_set_single_player_level_completed <controller> <long> <boolean> <game_difficulty> <boolean>)
<controller> <level index> <co-op> <difficulty> <completed> set the single player levels completed state for specified controller

(controller_set_primary_change_color <controller> <player_color>)
set primary change color for specified controller

(controller_set_secondary_change_color <controller> <player_color>)
set secondary change color for specified controller

(controller_set_tertiary_change_color <controller> <player_color>)
set tertiary color for specified controller

(controller_set_primary_emblem_color <controller> <player_color>)
set primary change color for specified controller

(controller_set_secondary_emblem_color <controller> <player_color>)
set secondary change color for specified controller

(controller_set_background_emblem_color <controller> <player_color>)
set tertiary color for specified controller

(controller_set_player_character_type <controller> <player_model_choice>)
set player character type for specified controller

(controller_set_emblem_info <controller> <short> <short>)
set emblem for specified controller

(controller_set_voice_output_setting <controller> <voice_output_setting>)
set voice output setting for specified controller

(controller_set_subtitle_setting <controller> <subtitle_setting>)
set subtitle setting for specified controller

(controller_set_nag_message_data <controller> <long> <long> <long> <long>)
<controller> <last global nag msg id> <last per user nag msg id> <last global nag msg view count> <last per-user nag msg view count>

(controller_temporary_users_always_attached <boolean>)
toggle pretending that temporary users' controllers are always attached

(controller_set_new_user_experience <controller> <boolean>)
<controller> set if this controller will get the new user experience

(controller_set_initial_bonus_toast <controller> <boolean>)
<controller> set if this controller has seen the 5000 initial credits toast

(controller_set_loyalty_bonus_toast <controller> <currency_type> <short>)
<controller> <currency type> <bonus> act as if this controller was awarded a loyalty bonus from the LSP

(controller_set_generic_bonus_toast <controller> <currency_type> <short>)
<controller> <currency type> <bonus> act as if this controller was awarded a generic bonus from the LSP

(controller_set_unsignedin_user <controller> <boolean>)
Toggle controller as unsigned-in user

(controller_display_storage_device_selection <controller>)
display storage device selection ui for the specified controller

(font_cache_bitmap_save <string>)
save font cache bitmap to targa file

(ui_debug_load_main_menu)
loads the main menu screen

(ui_debug_text_bounds <boolean>)
toggle rendering of ui text boundaries

(ui_debug_text_font <boolean>)
toggle display of ui text font

(ui_debug_show_title_safe_bounds <boolean>)
toggle display of title safe boundary

(ui_debug_element_bounds <boolean>)
toggle rendering of widget tag block bounds

(ui_memory_dump <string>)
dump the UI memory tracked allocations to a specified file

(ui_time_scale_step <real>)
move the ui time forward by a specified amount on next tick

(xoverlapped_debug_render <boolean>)
toggle display a list of active xoverlapped tasks

(shader_compile_target_platform <string>)
set target platform for shader compiling

(shader_compile_shader_pipeline <string>)
set valid part of pipeline for compiling

(shader_compile_filter_shader_type <string>)
skip compiling for one specifical type of templated shader

(shader_compile_filter_category_option <string> <string>)
skip compiling for one specifical combination of category and option for templated shader

(gui_force_user_image_upload)
Disables all Live, LSP connectivity, and dirty checks when attempting to upload the user image

(gui_load_screen <string_id>)
load the named screen

(gui_reset)
cleans out the halox ui screens and errors

(gui_start)
tells the window location manager to resume

(gui_stop)
tells the window location manager to stop bringing up screens on its own

(gui_error_post <string_id> <long> <boolean>)
<error_code> <controller_index> <must_be_cleared> sets an error condition in the ui

(gui_error_post_toast <string_id> <long> <boolean>)
<error_code> <controller_index> <must_be_cleared> sets an error condition in the ui

(gui_error_resolve <string_id> <long>)
<error_name> <controller_index> resolves an error condition in the ui

(gui_error_clear <string_id> <long>)
<error_name> <controller_index> clears an error condition in the ui

(gui_dialog_show <string_id>)
<dialog name>

(gui_debug_music_state <boolean>)
Toggle display of UI music state

(cc_enable <boolean>)
toggle closed captions

(cc_test <boolean>)
test a line of cc text

(objectives_clear)
clears the mission objectives.

(objectives_show_up_to <long>)
show primary campaign objectives 0..n

(objectives_finish_up_to <long>)
mark primary campaign objectives 0..n as complete

(objectives_show <long>)
show secondary campaign objective N
NETWORK SAFE: Unknown, assumed unsafe

(objectives_finish <long>)
mark secondary campaign objective N as complete
NETWORK SAFE: Unknown, assumed unsafe

(objectives_unavailable <long>)
mark secondary campaign objective N as unavailable
NETWORK SAFE: Unknown, assumed unsafe

(objectives_secondary_show <long>)
show secondary campaign objective N

(objectives_secondary_finish <long>)
mark secondary campaign objective N as complete

(objectives_secondary_unavailable <long>)
mark secondary campaign objective N as unavailable

(objectives_set_string <long> <string_id>)
set the primary campaign objective string into the objectives text

(objectives_secondary_set_string <long> <string_id>)
set the secondary campaign objective string into the objectives text

(objectives_show_string <string_id>)
show secondary campaign objective
NETWORK SAFE: Unknown, assumed unsafe

(objectives_finish_string <string_id>)
mark secondary campaign objective as complete
NETWORK SAFE: Unknown, assumed unsafe

(objectives_unavailable_string <string_id>)
mark secondary campaign objective as unavailable
NETWORK SAFE: Unknown, assumed unsafe

(objectives_secondary_show_string <string_id>)
show secondary campaign objective

(objectives_secondary_finish_string <string_id>)
mark secondary campaign objective as complete

(objectives_secondary_unavailable_string <string_id>)
mark secondary campaign objective as unavailable

(input_suppress_rumble <boolean>)
disable the friggin' rumble

(input_disable_claw_button_combos <boolean>)
disable the Claw button combos (for monkey testing)

(update_remote_camera)
force synchronization of remote machine camera

(net_build_network_config)
writes a new network configuration file

(net_build_game_variant <boolean> <string>)
writes the current game variant to a file

(net_verify_game_variant <string>)
verifies the contents of a packed game variant file

(net_load_and_use_game_variant <string>)
loads the contents of a packed game variant file and submits to networking for use in the current game

(net_use_hopper_directory <string>)
set which hopper directory to use

(net_lsp_dump_services_and_servers)
dump lsp state

(net_lsp_force_server <string> <long> <boolean>)
forces a service to use a server

(net_lsp_disable_server <long> <boolean>)
disables a server

(net_lsp_disable_service <string> <boolean>)
disables a service

(online_files_use_fallback_hoppers <boolean>)
forces use of offline hoppers

(net_build_offer_info)
writes a new offer info file

(net_quality_dump)
dump all network quality statistics

(net_quality_clear)
clear all network quality statistics

(net_quality_set_connection_badness_history <boolean> <short>)
set connection history, true/false, # of bits to set

(net_quality_set_squad_host_badness_history <boolean> <short>)
set host badness history, true/false, # of bits to set

(net_quality_set_squad_client_badness_history <boolean> <short>)
set client badness history, true/false, # of bits to set

(net_quality_set_squad_speculative_migration_badness_history <boolean> <short>)
true/false, # of bits to set

(net_quality_set_squad_bridging_badness_history <boolean> <short>)
true/false, # of bits to set

(net_quality_set_group_host_badness_history <boolean> <short>)
set host badness history, true/false, # of bits to set

(net_quality_set_group_client_badness_history <boolean> <short>)
set client badness history, true/false, # of bits to set

(net_quality_set_group_speculative_migration_badness_history <boolean> <short>)
true/false, # of bits to set

(net_quality_set_group_bridging_badness_history <boolean> <short>)
true/false, # of bits to set

(net_join_friend <string>)
join a friend's squad session, 'none' to cancel a previous join

(net_join_squad_to_friend <string>)
join our squad to a friend's squad session, 'none' to cancel a previous join

(net_join_sessionid <string>)
join a squad session by sessionid, 'none' to cancel a previous join

(net_join_squad_to_sessionid <string>)
join a squad session by sessionid, 'none' to cancel a previous join

(net_enable_join_friend_loop <long>)
randomly join a friend every <param> seconds, 0 to reset

(net_set_maximum_player_count <long>)
sets the maximum player count for this squad

(net_refuse_all_joins <boolean>)
refuses all join requests

(net_status_filter <string>)
filters the set of network status to display

(net_test_ping)
network test: sends a ping

(net_test_channel_delete)
network test: deletes all channels

(net_test_delegate_host <long>)
network test: delegate host to the specified player

(net_test_delegate_leader <long>)
network test: delegate leadership to the specified player

(net_test_map_name <string>)
network test: sets the name of the scenario to play

(net_test_variant <string_id>)
network test: sets the game variant to play

(net_test_campaign_difficulty <short>)
network test: sets the difficulty of the campaign game to play

(net_test_player_color <long>)
network test: temporarily sets the color for all local players

(net_test_reset_objects)
network test: resets all objects on the map

(net_test_fatal_error)
creates a fatal simulation error

(net_set_machine_name <string>)
sets the nickname of your xbox

(events_enabled <boolean>)
enable/disable all events

(events_suppression <boolean>)
enable/disable event suppression

(events_suppress_display <boolean>)
disables console display for events

(events_global_display <event>)
sets the global event console display level

(events_global_log <event>)
sets the global event log level

(events_global_debugger <event>)
sets the global event debugger display level

(events_global_datamine <event>)
sets the global event datamine level

(events_category_display <string> <event>)
sets the console display level for a named category of network events

(events_category_force_display <string> <event>)
sets the forced console display level for a named category of network events

(events_category_log <string> <event>)
sets the log level for a named category of network events

(events_category_debugger <string> <event>)
sets the debugger display level for a named category of network events

(events_category_debugger_break <string> <event>)
sets the debugger break level for a named category of network events

(events_category_halt <string> <event>)
sets the halt (assert/crash) level for a named category of network events

(events_category_datamine <string> <event>)
sets the datamine level for a named category of network events

(events_list_categories <string>)
lists all categories that exist under a particular category string

(events_dump_file <string>)
dumps all events from the given file to the output

(event_logs_snapshot)
copy error files to the error snapshot folder

(events_disable_suppression <boolean>)
DEPRECATED(use events_suppression): disable/enable event suppression

(event_global_display_category <event>)
DEPRECATED(use events_global_display): sets the global event console display level

(event_global_log_category <event>)
DEPRECATED(use events_global_log): sets the global event log level

(event_global_remote_log_category <event>)
DEPRECATED(use events_global_datamine): sets the global event datamine level

(event_display_category <string> <event>)
DEPRECATED(use events_category_display): sets the console display level for a named category of network events

(event_force_display_category <string> <event>)
DEPRECATED(use events_category_force_display): sets the forced console display level for a named category of network events

(event_debugger_break_category <string> <event>)
DEPRECATED(use events_category_debugger_break): sets the debugger break level for a named category of network events

(event_halt_category <string> <event>)
DEPRECATED(use events_category_halt): sets the halt (assert/crash) level for a named category of network events

(event_list_categories <string>)
DEPRECATED(use events_list_categories): lists all categories that exist under a particular category string

(events_suppress_console_display <boolean>)
DEPRECATED(use events_suppress_display): disables console display for events

(events_log_event <event> <string>)
Logs an event in the game using the same syntax as the engine's event macro.

(play_bink_movie <string>)
Play a bink movie file directly.  The directory and '_60.bik' is implied.  EG: play_bink_movie('081_crash') will play file bink\081_crash_60.bik

(play_bink_movie <string> <long>)
Play a bink movie file directly with playback flags.  The directory and '_60.bik' is implied.  EG: play_bink_movie('081_crash') will play file bink\081_crash_60.bik

(play_bink_movie_from_tag <bink_definition>)
Play a bink movie from a tag

(play_bink_movie_from_tag <bink_definition> <long>)
Play a bink movie from a tag with playback flags (from bink_playback.h)

(play_credits_skip_to_menu)
Plays credits movie, pressing A button will stop credits and launch main menu

(play_credits_unskippable)
Plays credits movie, no button press detection

(bink_time)
The number of ticks left in the currently playing bink

(stop_bink_movie)
Stops all bink movie playback

(bink_pause <boolean>)
Pause/Unpause bink movie

(bink_is_any_loading)
Is any player bink movie being loaded?

(bink_is_any_playing)
Is any player bink movie being played?

(bink_is_playing)
Is all players bink movie being played?

(bink_is_local_loading)
Is local bink movie being loaded?

(bink_is_local_playing)
Is local bink movie being played?

(set_global_doppler_factor <real>)
new doppler factor: <real>

(set_global_mixbin_headroom <long> <long>)
blah

(debug_sound_environment_source_parameter <long> <real>)
blah

(data_mine_set_mission_segment <string>)
sets the mission segment for single player data mine events

(data_mine_insert <string>)
insert text and camera position in the data mine

(data_mine_upload)
upload all data mining data files to debug server

(data_mine_enable <boolean>)
enable/disable data mining

(data_mine_flush)
flush any pending data mine data to disk

(data_mine_debug_menu_setting <string>)
close debug menu and set user experience setting to string

(data_mine_open_debug_menu)
open debug menu

(data_mine_set_display_mission_segment <boolean>)
toggle display of data mine mission segment

(data_mine_set_header_flag <long> <boolean>)
sets the source flags of the data mine header (used for backend bucketing)

(data_mine_set_session_tag <string>)
tags a datamine session with a label.

(test_memory_allocators <long> <short> <short> <short> <long>)
performs tests on different memory allocators

(test_memory_allocators <long> <short> <short> <short> <long> <string>)
performs tests on different memory allocators and saves the results

(display_video_standard)
displays the video standard the game is in

(test_xcr_monkey_enable <boolean>)
enable/disable controller monkeys for all in game players

(test_show_guide_status)
prints the guide status as automation events.

(test_show_users_xuids)
prints the signed in users' xuids as automation events.

(test_show_are_users_friends <long> <string>)
prints whether the current controller and specified xuid are friends as automation events

(test_invite_friend <long> <string>)
shows the guide send friend invite ui from the current controller to the specified xuid

(test_get_squad_session_id)
get the current squad session id

(cui_fake_outgoing_join_type <long> <long> <long> <long>)
<gui_game_mode [0 .. 14]> <session_game_mode [0 .. 4]> <network_game_type [0 .. 3]> <game_engine_type [0 .. 5]>

(cui_get_active_screens <long>)
<arbitrary int> list the current cui screens

(cui_get_screen_components <long> <long>)
<arbitrary int> <window index> lists widgets in a screen

(cui_get_component_properties <long> <long> <string_id>)
<arbitrary int> <window index> <component_name> lists a component's property names, types and values

(cui_send_button_press <long> <long> <long> <string>)
<arbitrary int> <window index> <controller index> <button name> sends the button press to the screen.  Use controller index -1 for automatically guessing the right controller.

(cui_invoke_list_item_by_string_id <long> <long> <string_id> <string_id> <string_id> <string_id>)
<command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one

(cui_invoke_list_item_by_long <long> <long> <string_id> <string_id> <string_id> <long>)
<command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one

(cui_invoke_list_item_by_boolean <long> <long> <string_id> <string_id> <string_id> <boolean>)
<command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one

(cui_invoke_list_item_by_text <long> <long> <string_id> <string_id> <string_id> <string>)
<command_index> <window_index> <list_name> <list_data_name> <property_name> <property_value> triggers the list item who's column's value matches the specified one

(cui_invoke_instanced_list_item_by_text <long> <long> <long> <string_id> <string_id> <string_id> <string>)
<command_index> <window_index> <list_index> <list_name> <list_data_name> <property_name> <property_value> triggers the named item in the matching list (if list_index equals 1, then select the item from the second matching list)

(cui_expand_list_item_by_list_item_index <long> <long> <string_id> <long> <boolean>)
<command_index> <window_index> <list_name> <list item index> <expand> expands or collapses the indexed list item

(cui_invoke_list_item_by_list_item_index <long> <long> <string_id> <long>)
<command_index> <window_index> <list_name> <list item index> directly triggers the indexed list item

(cui_invoke_list_item_by_list_item_name <long> <long> <string_id> <string_id>)
<command_index> <window_index> <list_name> <list item index> directly triggers the named list item

(cui_get_list_item_names <long> <string_id>)
<window_index> <list_name> gives the list of available list item names for the list

(cui_show_screen_size <string_id> <boolean>)
<screen_name> <verbose detail> displays the total size in content of the named screen

(cui_show_active_screen_size <long> <boolean>)
<window_index> <verbose detail> displays the total size in content of the current screen

(cui_show_total_screens_size <boolean>)
<verbose detail> displays the total size in content of all ui content loaded for the current level

(cui_show_stats <long>)
<window index> shows summary stats for the UI system and current screen

(cui_redraw_all_portraits)
redraws all the player portraits

(cui_get_screen_strings <long>)
<window_index> list the current active screens and path to references

(test_download_storage_file <string> <string>)
<url> <filename> downloads a file from LSP to the client

(test_game_results_save_to_file <string>)
<filename> save game results to a file.

(test_game_results_load_from_file <string>)
<filename> load game results into memory for use in the carnage report.  the format may change build to build causing this to fail or weird results to come up.

(test_game_results_make_random)
makes random game results using the current variant

(test_fragment_utility_drive <long> <long> <long>)
<file_count> <growth_repetitions> <growth_size> writes files of varying sizes to the utiltiy drive in an effort to fragment it really badly

(test_add_fake_player <long>)
<type> add a fake player to the roster list

(clear_webcache)
clears the webcache

(online_files_upload <string>)
<filename> enqueues the specified filename for upload

(online_files_throttle_bandwidth <long>)
<bytes per second> sets the maximum bandwidth that online_files can use

(online_marketplace_show_purchase_ui <controller> <string>)
show purchase ui for specific offer

(webstats_disable <boolean>)
disables webstats

(webstats_test_submit <string>)
submits a string to webstats upload

(webstats_test_submit_random_realistic)
submits a test multiplayer blob to webstats with realistic values

(webstats_throttle_bandwidth <long>)
<bytes per second> sets the maximum bandwidth that webstats can use

(webstats_log_uploads <boolean>)
toggle logging of webstats buffered uploads

(matchmaking_force_start_error <long>)
Force a game-start error to be displayed & reported

(net_matchmaking_forced_gatherer <string>)
Force the named machine to be the gathering host, and the others to join

(NetworkDisallowMatchJoinInProgress <boolean>)
Disallow (or un-disallow) late joins.

(flag_new <string> <string>)
<name> <description>

(flag_new_at_look <string> <string>)
<name> <description>

(flags_clear)
erases all comment flags when not in editor (sapien)

(flags_default_name <string>)
<default comment flag name>

(flags_default_comment <string>)
<default comment flag description>

(flags_set_filter <string>)
<flag name filter>

(bug_now <string>)
uploads files for bug <name>

(bug_now_lite <string>)
uploads files (w/ no minidump) for bug <name>

(bug_now_auto <boolean>)
uploads bug files, auto named <include_minidump>

(bug_now_on_next_kill <string>)
uploads files for a bug <name> for the next kill that could produce an incident

(object_list_children <object> <object_definition>)
returns list of child objects by definition.

(voice_set_outgoing_channel_count <long> <long>)
sets the outgoing bps for voice <in-game> <out-of-game>

(voice_set_voice_repeater_peer_index <long>)
sets the repeater peer index

(voice_set_mute <long> <long> <boolean>)
mute a player

(net_leaderboard_clear_hopper <long>)
<user index> clears the hopper stats for the user

(net_leaderboard_clear_global_unarbitrated <long>)
<user index> clears the global unarbitrated stats for the user

(net_leaderboard_refresh)
<user index> refreshes stats for everybody in the session

(ai_selected_actor_jump <real> <real>)
Makes the currently selected actor jump x wus forward and y wus up

(dump_loaded_tags)
dump a list of open tags to <map_name>_tags.txt

(interpolator_start <string_id>)
<name> starts up the specified interpolator - uses the name of the interpolator defined in tags, NOT scenario_interpolatorXX!

(interpolator_stop <string_id>)
<name> stops the progression of the specified interpolator - uses the name of the interpolator defined in tags, NOT scenario_interpolatorXX!

(interpolator_stop_all)
stops all interpolators

(interpolator_dump <string_id>)
<name> prints out the status of the specified interpolator

(interpolator_dump_all)
prints out the status of all defined interpolators in the scenario

(set_pc_runtime_language <string>)
sets the pc language from a string

(animation_cache_stats_reset)


(cinematic_clone_players_weapon <object> <string_id> <string_id>)
clone the first player's most reasonable weapon and attach it to the specified object's marker

(cinematic_move_attached_objects <object> <string_id> <string_id> <string_id>)
move the object's children attached to the first marker to the second marker

(vehicle_enable_ghost_effects <boolean>)


(set_global_sound_environment <real> <real> <real> <real> <long> <real>)
this is your brain on drugs

(game_save_cinematic_skip)
don't use this, except in one place.

(cinematic_outro_start)
flag this cutscene as an outro cutscene

(cinematic_enable_ambience_details <boolean>)
enable/disable ambience details in cinematics

(cache_block_for_one_frame)
call this to force texture and geometry cache to block until satiated

(sound_suppress_ambience_update_on_revert)
call this when transitioning between two cinematics so ambience won't fade in between the skips

(render_autoexposure_enable <boolean>)
toggle autoexposure

(render_exposure_full <real> <real> <real> <real> <real>)
animate exposure from <initial> to <final> stops using <initial> to <final> opacity in <seconds>

(render_exposure_fade_in <real> <real>)
fade to animated exposure <stops> in <seconds>

(render_exposure_fade_out <real>)
fade to default exposure settings in <seconds>

(render_exposure <real> <real>)
fade to animated exposure <stops> in <seconds>

(render_autoexposure_instant <long>)
instantly adopt auto exposure values in the next N frames

(render_exposure_set_environment_darken <real>)
set environmental darkening

(render_depth_of_field_enable <boolean>)
turns depth of field on and off

(render_depth_of_field <real> <real> <real> <real>)
animate depth of field, in focus from <near> to <far>, with depth of field <depth>, in <ticks>

(render_dof_focus_depth <real>)
interpolate depth of field to <depth>

(render_dof_focus_depth_near <real>)
interpolate depth of field near aperture to <depth>

(render_dof_focus_depth_far <real>)
interpolate depth of field far aperture to <depth>

(render_dof_focus_depth_blur_near <real>)
interpolate depth of field near blur to <blur>

(render_dof_focus_depth_blur_far <real>)
interpolate depth of field far blur to <blur>

(render_dof_blur_animate <real> <real>)
interpolate depth of field maximum blur to <blur> in <ticks>

(render_debug_video_mode)
displays the current video mode

(cinematic_lightmap_shadow_disable)
turn off lightmap shadow in cinematics

(cinematic_lightmap_shadow_enable)
turn on lightmap shadow in cinematics

(predict_animation <animation_graph> <string_id>)
begin loading an animation for the graph provided

(mp_player_count_by_team <mp_team>)
given a team index, returns an object list containing all living player objects belonging to that team

(mp_players_by_team <mp_team>)
given a team index, returns an object list containing all living player objects belonging to that team

(mp_active_player_count_by_team <mp_team>)
given a team index, returns an object list containing all living player objects belonging to that team

(deterministic_end_game)
end game deterministically, by inserting a simulation queue event

(mp_game_won <mp_team>)
given a team index, declares the game a victory for that team and a loss for all others

(mp_respawn_override_timers <mp_team>)
causes all players on the specified team waiting to respawn (due to timer) to respawn immediately

(mp_ai_allegiance <team> <mp_team>)
causes an allegiance to be formed between an AI squad team and a multiplayer team

(mp_allegiance <mp_team> <mp_team>)
create an allegiance between two multiplayer teams

(mp_round_started)
used to determine if the mp game is in the active-round phase or not

(mp_round_end_with_winning_player <player>)
ends the current round with a winning player

(mp_round_end_with_winning_team <mp_team>)
ends the current round with a winning team

(mp_round_end)
ends the current round with no winning team

(mp_scripts_reset)
on the host in a distributed game, resets the scripts (but not internal hs globals)

(tag_file_set_backend <string>)
override the tag file system backend

(mp_debug_goal_object_boundary_geometry <boolean>)
toggle debug geometry for multiplayer goal objects

(mp_dump_candy_monitor_state)
dumps the current candy monitor state to a file on disk

(determinism_debug_manager_enable_logging <boolean>)
enable/disable determinism logging

(determinism_debug_manager_set_trace_flags <long>)
set which determinism debugging traces should be turned on

(determinism_debug_manager_enable_game_state_checksum <boolean>)
enable/disable determinism checkpoints

(determinism_debug_manager_enable_trace <boolean>)
enable determinism tracing

(determinism_debug_manager_set_consumer_sample_level <string> <long>)
sets sample level for a consumer

(determinism_log_compare_log_files <string> <string>)
comares determinism log files

(determinism_debug_manager_enable_log_file_comparision_on_oos <boolean>)
enables/disables determinism log file comparision on oos

(determinism_debug_manager_SetFilePath <string>)
sets an alternative base directory for determinism files

(saved_film_play <controller> <string>)
plays a saved film for given controller

(saved_film_play_last)
play back last recorded saved film for given controller

(saved_film_disable_version_checking <boolean>)
disable saved film version checking

(saved_film_toggle_debug_saving <boolean>)
toggle saving of last film to the debug output directory automatically after each game level

(saved_films_show_timestamp <boolean>)
toggle showing timestamp for saved film playback

(mover_set_program <object> <short>)
Set the motor program of the given mover object

(floating_point_exceptions_enable <boolean>)
enables/disables floating point exceptions

(tag_reload_force <string>)
rather than force a painful xsync to test xsync, allow me to fake a tag_reload

(tag_unload_force <string>)
call tag_unload

(tag_load_force <string>)
call tag_load

(predict_bink_movie <string> <long>)
Predict a bink movie file directly with playback flags. The directory and '_60.bik' is implied. EG: predict_bink_movie('081_crash', 0) will play file bink\081_crash_60.bik

(predict_bink_movie_from_tag <bink_definition> <long>)
Predict a bink movie from tag with playback flags.

(profiler_dump_history)
dump profile history.

(camera_set_mode <unit> <long>)
<unit_index> <mode_index> sets user's camera perspective

(camera_set_flying_cam_at_point <unit> <cutscene_camera_point>)
<unit_index> <camera_point> sets a flying camera perspective

(camera_set_target <unit> <object>)
<unit_index> <object_index> sets the current camera's target

(camera_set_orbiting_cam_at_target_relative_point <unit> <string_id> <real> <real> <real>)
<unit_index> <target_marker_name> <relative_x_position> <relative_y_position> <relative_z_position> sets an orbiting camera pointing at a given marker from an object relative point 

(director_cycle_debug_camera <long>)
<user index>

(game_coop_player_count)
returns the number of coop players active in game

(player_force_mode <string_id>)
force your will upon the player

(profiler_output_pulse)
dump profile stats to telnet console.

(string_id_name <long>)
prints the name of the string id to the console

(find <string>)
prints any hs command matching the string passed in

(add_recycling_volume <trigger_volume> <long> <long>)
removes garbage in specified trigger volume to a max count over n seconds Syntax: <trigger_volume> <max_count> <time_to_collect (integer secs)> 

(add_recycling_volume_by_type <trigger_volume> <long> <long> <long>)
removes garbage objects matching the type mask in the specified trigger volume that are over the max count allowed in the volume over n seconds. 1=biped, 2=vehicle, 4=weapon, 8=equipment, and 1024=crate. Add values together for combos, zero means all types Syntax: <trigger_volume> <max_count> <time_to_collect (integer secs)> <type_mask> 

(add_offscreen_recycling_volume <trigger_volume> <long> <long>)
removes garbage in specified trigger volume to a max count over n seconds Syntax: <trigger_volume> <max_count> <time_to_collect (integer secs)> 

(add_offscreen_recycling_volume_by_type <trigger_volume> <long> <long> <long>)
removes garbage objects matching the type mask in the specified trigger volume that are over the max count allowed in the volume over n seconds. 1=biped, 2=vehicle, 4=weapon, 8=equipment, and 1024=crate. Add values together for combos, zero means all types Syntax: <trigger_volume> <max_count> <time_to_collect (integer secs)> <type_mask> 

(tag_resources_set_per_frame_publish <boolean>)
turns on/off per frame resource publish (stress testing)

(object_recycling_clear_history)
clear object recycling history

(dump_cinematics_script)
dump the cinematic script to cinematic_dump.txt

(global_preferences_clear)
clears all game preference information

(network_storage_set_storage_subdirectory <string>)
<subdirectory> The default is the build number or 'untracked'

(network_storage_set_storage_user <string>)
<user> Use the network file stored on untracked\<user>.

(network_storage_run_locally <boolean>)
run off local storage files e:\reach\storage\title\<title_id>\...

(status_line_dump)
dumps active status_lines to system_log.txt

(game_tick_get)
returns current game tick

(loop_it <string>)
runs the expression at most once per tick

(loop_clear)
runs the expression at most once per tick

(status_lines_enable <string>)
enables status_lines that were initialized with identifiers that match the input substring

(status_lines_disable <string>)
disables status_lines that were initialized with identifiers that match the input substring

(on_target_platform)
returns true if the game thinks it's running on the target platform

(f7_profiler_enable <boolean>)
toggles the profile collection on/off - use to eliminate 95% of f7 profiler CPU overhead if desired for testing.

(f7_profiler_substring_activate <string>)
activates profile sections based on a substring. Supports * wildcard. Use profiler_activate "" to reset filtering.

(f7_profiler_substring_deactivate <string>)
deactivates profile sections based on a substring. Supports * wildcard. Use profiler_deactivate "" to reset filtering.

(net_game_set_player_standing <string> <long>)
set's a player's standing by gamertag

(net_get_game_id)
prints the id of the game to the console

(generate_rsa_2048_key_pair)
generates an RSA key pair

(create_secure_test_file)
generates a compressed encrypted test file

(net_test_matchmaking_hopper_list)
prints the hopper list

(net_test_matchmaking_hopper_game_list)
prints games for the current hopper

(net_test_matchmaking_hopper_set_game <long>)
sets the game vairant for the current hopper

(net_test_matchmaking_set_voting_system <long>)
sets the voting system for matchmaking

(net_test_matchmaking_set_arena_season <long>)
sets the arena season (NONE for default, 0 to disable, N for a season)

(net_test_matchmaking_suppress_arena_popup <boolean>)
don't popup arena screens - for stress

(net_test_matchmaking_test_arena_screen <controller> <long> <long> <long>)
pop an arena acreen for a controller (0..4) <day rating> <tier>

(net_test_matchmaking_set_arena_stats <controller> <long> <long>)
sets the arena stats for a controller (<day rating> <tier>) NONE for no tier

(saved_film_set_playback_game_speed <real>)
set the saved film playback speed

(noguchis_mystery_tour <string>)
set the additional music directory to dump into the cache file

(designer_zone_sync)
synchronizes global objects with loaded designer zones

(dump_designer_zone <designer_zone>)
dump interesting info about a designer zone

(object_set_always_active <object> <boolean>)
sets/unsets the object always active flag to ignore pvs changes

(saved_film_seek_to_film_tick <long>)
seeks to a film tick

(saved_film_seek_to_film_timestamp <real>)
seeks to a film time

(tag_is_active <any_tag_not_resolving>)
returns true/false if you can create this tag with the active zones

(tag_resources_set_incremental_publish <boolean>)
turns on/off incremental resource publish (prediction)

(tag_resources_enable_optional_caching <boolean>)
turns on/off optional resource prediction

(dump_active_resources)
blah

(object_set_persistent <object> <boolean>)
<object_index> <true/false> prevent this object from being garbage collected

(display_zone_size_estimates <boolean>)
display zone size estimates HUD

(report_zone_size_estimates)
dump zone size estimates to design report log

(net_test_disconnect_squad)
disconnects the squad session

(net_test_disconnect_group)
disconnects the group session

(net_test_clear_squad_session_parameter <long>)
clears a squad session parameter

(net_test_clear_group_session_parameter <long>)
clears a group session parameter

(net_test_life_cycle_pause <string> <boolean>)
pauses the life cycle in the specified state

(net_test_life_cycle_display_states)
display the life cycle states

(net_test_life_cycle_abort_matchmaking)
backs out of matchmaking

(overlapped_display_task_descriptions)
displays all tasks

(overlapped_task_inject_error <string> <boolean>)
inject error for tasks

(net_leaderboard_clear_hopper_all_users <string>)
clears the hopper stats for the all user

(net_leaderboard_clear_global_unarbitrated_all_users <string>)
clears the global unarbitrated stats for all user

(test_sapien_crash)


(decorators_split <long> <real>)
duplicates decorator set <index> and moves <percentage> of the decorators into it

(bandwidth_profiler_enable <boolean>)
enables bandwidth profiler

(bandwidth_profiler_set_context <boolean>)
sets bandwidth profiler context

(simulation_priority_display_set_enabled <boolean>)
enable/disable the priority display system

(simulation_priority_display_set_object_names <boolean>)
enable/disable object name display

(simulation_priority_display_set_machine_filter)
set machine filter to output user 0's currently watched player (selected via follow cam in film)

(simulation_priority_display_set_priority_scope_tick)
coder feature

(simulation_priority_display_set_priority_scope_second_worst)
coder feature

(simulation_priority_display_set_priority_scope_second_best)
coder feature

(simulation_priority_display_set_color_by_relevance)
coder feature

(simulation_priority_display_set_color_by_update_period)
coder feature

(simulation_priority_display_set_color_by_final_priority)
coder feature

(overlapped_task_pause <string> <boolean>)
pause tasks

(net_banhammer_set_controller_cheat_flags <controller> <string> <boolean>)
sets cheat flags

(net_banhammer_set_controller_ban_flags <controller> <string> <long> <boolean>)
sets ban flags

(net_banhammer_dump_strings)
display cheat/ban strings

(net_banhammer_dump_repeated_play_list)
display repeated play lists

(net_banhammer_set_locality_override <real> <real> <real> <boolean>)
slam machine locality

(net_leaderboard_set_user_stats <long> <real> <real> <long> <long> <long>)
slams user leaderboard values locally

(net_leaderboard_set_user_game_stats <long> <long> <long> <long> <long>)
slams more user stats

(net_build_map_variant <boolean> <string>)
writes the current map variant to a file in .bin format (same as .mvar)

(net_verify_map_variant <string>)
verifies the contents of a packed map variant file

(net_load_and_use_map_variant <string>)
reads a built map variant and slams it into the squad session.

(write_current_map_variant <boolean> <string>)
writes the current map variant to a file in .mvar format (same as .bin). See map_variants subdirectory on your devkit.

(read_map_variant_and_make_current <string>)
Reads a map variant from a .mvar file in the map_variants subdirectory and slams it into the squad session.  Can be executed in the lobby.

(report_built_in_map_variant_object_count)
Checks that a all objects in the scenario can be placed in the built-in .mvar

(async_set_thread_work_delay_milliseconds <long> <long>)
set an artificial delay time for a specific async thread to test the performance of any asynchronous task work

(sound_looping_start_with_effect <looping_sound> <object> <real> <string_id>)
plays a looping sound from the specified source object (or "none"));, with the specified scale and playback effect.

(tag_resources_set_demand_throttle_to_io <boolean>)
turns on/off demand throttling based on io

(tag_resources_flush_optional)
flushes optional resources

(tag_resources_simulate_demand <long>)
Simulates resource demand in cache builds by consuming the specified amount of resource memory (while releasing any consumption from previous calls to this function). Returns true if successful; otherwise false.

(scenario_zone_set_streaming_cache_enable <boolean>)
turns on/off new beam texture streaming system

(streamer_pin_tag_index <long> <long>)
pins a tag and variant to the highest priority for streaming

(streamer_unpin_tag_index <long> <long>)
removes the pin on a tag and variant

(streamer_pin_tag <any_tag_not_resolving> <long>)
pins a tag and variant to the highest priority for streaming

(streamer_unpin_tag <any_tag_not_resolving> <long>)
removes the pin on a tag and variant

(streamer_pin_tag <any_tag_not_resolving>)
pins a tag to the highest priority for streaming

(streamer_unpin_tag <any_tag_not_resolving>)
removes the pin on a tag

(streamer_clear_all_pinned_tags)
clears all currently pinned tags

(set_performance_throttle <string> <long> <real>)
sets a default value for a performance throttle for a given number of players

(get_performance_throttle <string> <long>)
gets the value of a performance throttle for a given number of players

(voice_set_headset_boost <real>)
set the headset boost for iteration fun

(cinematic_zone_activate <long>)
activates scenario cinematic zone (automatically generated script function!)

(cinematic_zone_deactivate <long>)
deactivates scenario cinematic zone (automatically generated script function!)

(cinematic_zone_activate_from_editor <any_tag>)
activates cinematic zone from tag (automatically generated script function!)

(cinematic_zone_deactivate_from_editor)
deactivates cinematic zone from tag (automatically generated script function!)

(tiling_current)
returns the actual tiling configuration (could have been overridden from the requested configuration)

(unit_limit_lipsync_to_mouth_only <unit> <boolean>)
cinematic lipsync means you can't use all the facial bones, just the mouth

(dump_active_zone_tags)
blah

(tag_resources_enable_fast_prediction <boolean>)
turns on/off faster prediction, in case I fucked up something

(unit_start_first_person_custom_animation <unit> <animation_graph> <string_id> <boolean>)
starts a custom animation playing on a unit (puts away weapon if last parameter is TRUE)

(unit_is_playing_custom_first_person_animation <unit>)
returns TRUE if the given unit is still playing a custom animation in first person

(unit_stop_first_person_custom_animation <unit>)
ends any custom first person animation running on the unit

(prepare_to_switch_to_zone_set <zone_set>)
prepare for switch to zone set

(PreparingToSwitchZoneSet)
can be polled to check whether the asynchronous memory load started by main_prepare_for_switch_zone_set is complete

(EnableMidmissionLoadScreenForDVDOnly <boolean>)
Sets trigger_midmission_load_screen if any player in the game is in no HDD mode.

(cinematic_zone_activate_for_debugging <long>)
activates scenario cinematic zone for debugging (automatically generated script function!)

(unit_play_random_ping <unit>)
plays a random ping on the unit

(player_control_fade_out_all_input <real>)
fade out all play control over x seconds

(player_control_fade_in_all_input <real>)
fade in all play control over x seconds

(player_control_lock_gaze <player> <point_reference> <real>)
player turn to face point with max velocity degrees/second

(player_control_lock_gaze_marker <player> <object> <string_id> <real>)
player turn to face marker with max velocity degrees/second

(player_control_clamp_gaze <player> <point_reference> <real>)
<player> <point> <max angle degrees> Force player view to be within give angle of point

(player_control_clamp_gaze_marker <player> <object> <string_id> <real>)
<player> <object> <markername> <max angle degrees> Force player view to be withing given angle of object and/or object's marker

(player_control_unlock_gaze <player>)
unlock player from any gaze point or gaze clamp

(player_control_scale_all_input <real> <real>)
scale input to x strength over y seconds

(profiler_auto_core_save <boolean>)
profiler dumps a core for each encounter

(cinematic_tag_reference_get_bink <long>)
Retrieve the bink tag from the cinematic system

(voice_set_force_match_configurations <long> <long> <long> <boolean>)
sets matchmaking voice options

(voice_set_force_hud <long> <long>)
sets matchmaking voice hud

(object_set_custom_animation_speed <object> <real>)
if the object is playing a custom animation, scale it to n playback speed

(scenery_animation_start_at_frame_loop <scenery> <animation_graph> <string_id> <short>)
starts a custom animation playing on a piece of scenery at a specific frame and then loops

(saved_film_set_repro_mode <boolean>)
set the saved film into repro mode (splitscreen users are created based on the number of splitscreen players that recorded the film)

(font_set_emergency)
sets the font system into emergency mode

(biped_force_ground_fitting_on <unit> <boolean>)
force ground fitting on, even during custom animations or movement

(cinematic_set_chud_objective <cutscene_title>)
activates the chapter title

(chud_show_cinematic_title <player> <cutscene_title>)
activates the chapter title

(unit_get_primary_weapon <unit>)
return the primary weapon of the specified unit

(budget_resource_get_animation_graph <animation_budget_reference>)
Get a non resolving reference to a model animation graph budget reference

(budget_resource_get_looping_sound <looping_sound_budget_reference>)
Get a non resolving reference to a looping sound budget reference

(game_safe_to_respawn <boolean>)


(game_safe_to_respawn <boolean> <player>)


(game_force_respawn_for_player <player>)


(test_create_content_item_slayer)
creates a slayer variant

(test_create_content_item_screenshot)
creates a screenshot (which isn't actually viewable)

(test_create_content_blf_screenshot <string> <string>)
create a screenshot BLF file

(test_create_content_blf_film <string> <string>)
create a film BLF file

(test_create_content_blf_film_clip <string> <string>)
create a film clip BLF file

(test_create_content_blf_game_variant <string> <string>)
create a game variant BLF file

(test_create_content_blf_map_variant <string> <string>)
create a map variant BLF file

(ai_migrate_infanty <ai> <ai>)
migrates the infantry in an encounter into a different squad.

(render_cinematic_motion_blur <boolean>)
enable/disable cinematic motion blur

(ai_dont_do_avoidance <ai> <boolean>)
set the AI to not do any vector avoidance when flying

(cinematic_scripting_clean_up <long>)
Unload the scenario cinematic zone

(debug_cinematic_structure_lighting_enable <boolean>)
enable/disable cinematic structure lighting

(debug_cinematic_hologram_lighting_enable <boolean>)
enable/disable cinematic hologram lighting

(ai_erase_inactive <ai> <short>)
Erase inactive actors in the given ai index, and any of those actors who become inactive within the next designated ticks

(ai_survival_cleanup <ai> <boolean> <boolean>)
Activate cure isolation death for the given AI, and optionally delete inactive actors in that group too (ai, on/off, kill inactive)

(ai_enable_stuck_flying_kill <ai> <boolean>)
Enable/disable suicide condition for flying vehicles who are 'stuck'

(ai_set_stuck_velocity_threshold <ai> <real>)
Change the velocity threshold at which we will detect 'stuck' directional flying movement

(budget_resource_get_sound <sound_budget_reference>)
Get a non resolving reference to a looping sound budget reference

(controller_set_single_player_level_unlocked <controller> <short> <boolean>)
<controller> <level index> <bool locked> set single player level locked state for specified controller

(physical_memory_dump)
dumps a record of all physical memory allocations

(tag_resources_validate_all_pages <boolean>)
resource validation every main_loop_body call

(cinematic_set_debug_mode <boolean>)
Puts all cinematic playback into debug mode (automatically generated script function!)

(cinematic_scripting_get_object <long> <long>)
Get an object used in a cinematic

(cinematic_link_light_object <string_id> <string_id>)
Links dynamic light to cinematic object. Light must have Cinema Objects Only on.

(cinematic_unlink_light_object <string_id> <string_id>)
Unlinks dynamic light from cinematic object.

(cinematic_unlink_light <string_id>)
Unlinks dynamic light from all cinematic objects.

(player_override_team <long> <team>)
sets the team for a specified player

(unit_set_stance <unit> <string_id>)
Specify the desired stance for this unit

(player_set_stance <string_id>)
Specify the stance for all players currently in the game

(sound_impulse_start_editor <sound> <object> <real>)
plays an impulse sound from the specified source object (or "none"));, with the specified scale.

(sound_impulse_start_effect_editor <sound> <object> <real> <string_id>)
plays an impulse sound from the specified source object (or "none") with the specified scale and effect (or "none").

(sound_impulse_start_3d_editor <sound> <real> <real>)
<sound> <azimuth> <scale> at the sound's minimum distance

(sound_looping_start_editor <looping_sound> <object> <real>)
plays a looping sound from the specified source object (or "none"));, with the specified scale.

(debug_sound_channels_log_start)
starts the sound channel debugger log

(debug_sound_channels_log_start_named <string>)
starts the sound channel debugger log with the specified file name

(debug_sound_channels_log_stop)
stops the sound channel debugger log

(simulation_profiler_enable)
Turns on the simulation/bandwidth profiler and configures it for high level use (similar to the old screen-text-based bandwidth profiler).

(saved_film_insert_marker <string>)
Inserts a film marker.

(saved_film_seek_to_marker <long>)
Seeks to a film marker.

(game_currency_issue_award_to_team <long> <long>)
Awards the latter amount of money to the former team index.  Use 0 or 1 for team index.  Host only!

(net_simulation_set_stream_bandwidth <long>)
Adjusts the per-stream bandwidth cap and forces all streams to limit themselves to that cap immediately.

(debug_sound_fadeout_time <real>)
set fadeout time for sound channel debugger

(render_model_marker_name_filter <string>)
sets a substring to search for when rendering model markers

(skull_enable <skull> <boolean>)
enable/disable the given skull

(is_skull_active <skull>)
is the given skull currently enabled/disabled?

(allow_object_to_be_lased <object> <boolean>)
enable/disable object laser designation for prototyping purposes.

(is_object_being_lased <object>)
Check whether an object is being lased by a player.

(simulation_profiler_detail_level <long>)
set detail level of simulation profiler capture on the host (affects perf & saved film size).  0-9 are valid, else clamped.

(simulation_profiler_enable_downstream_processing <boolean>)
enable/disable the processing of downstream data by the simulation profiler database (default is disabled, so if you want to examine downstream, you need to turn this on at display time.  Does not affect recording!)

(campaign_metagame_get_player_score <player>)
Calculates the score for an individual player

(collision_debug_lightmaps_print)
Prints the collision_debug_lightmaps text to the console

(load_binary_game_engine <string>)
load a compiled megalo engine

(network_storage_files_display_file_names)
displays files network storage is tracking

(network_storage_files_force_download <string>)
forces the download of a network file

(debug_lightmap_inspect)
show the lightmap status

(render_debug_colorbars <long>)
show the lightmap status

(custom_app_add_to_players <long>)
Adds a custom app to all players
NETWORK SAFE: Unknown, assumed unsafe

(add_player_biped_custom_app <player> <string>)
add custom app (aka armor mod) to biped. Like: add_player_biped_custom_app player0 [none | app_grenadier2 | app_resourceful | etc] ; change is effective immediately

(remove_player_biped_custom_app <player> <string>)
removes custom app (aka armor mod) from biped. Like: remove_player_biped_custom_app player0 [none | app_grenadier2 | app_resourceful | etc] ; change is effective immediately

(debug_menu_rebuild)
Reparses the debug menu from the text file.
NETWORK SAFE: Unknown, assumed unsafe

(adjust_team_score <mp_team> <long>)
Adjusts a team's score up or down
NETWORK SAFE: Host only

(adjust_player_score <player> <long>)
Adjusts a player's score up or down
NETWORK SAFE: Host only

(enable_roles <boolean>)
Enable or disable roles

(show_role_ui <long> <real>)
Shows the roles UI

(voice_force_global_repeater_use <boolean>)
Forces maximum repeater use, with randomly shuffling repeater assignments every few seconds.
Must be invoked on all peers in a game at the same time to work properly.

(levels_add_campaign_map_with_id <long> <string>)
<map id> <scenario> add scenario to levels array

(levels_add_campaign_map <string>)
<scenario> add a single scenario to levels array

(levels_add_multiplayer_map <string>)
<scenario> add a single scenario to mp level datum array

(clear_map_slot <long>)
nuke cache<number>.map

(clear_map_type <long>)
nuke all maps corresponding to specified type: 0 = mainmenu, 1 = multiplayer shared, 2 = campaign shared, 3 = multiplayer, 4 = campaign

(network_team_picker_unit_test)
run team picker unit tests

(network_team_picker_exhaustive_unit_test)
run exhaustive team picker unit tests

(debug_objects_unit_seats_filter <string>)
set the filter for unit seat debugging.  Set to empty string to clear

(debug_lock_enforcement <boolean>)
enable or disable assertions in the synchronization manager lock hierarchy

(lsp_presence_dump_blfs <boolean>)
write lsp presence BLFs to disk

(lsp_leaderboard_dump_blfs <boolean>)
write lsp leaderboard BLFs to disk

(set_player_custom_app <player> <long> <string>)
set custom app category (aka armor mod). Like: set_player_custom_app player0 <appslotIndex_0_1> [none | app_grenadier2 | app_resourceful | etc] ; where 2nd arg is which category (first or second)

(rewards_flush)
flush current player rewards state to all persistent systems (profile + LSP)

(rewards_profile_write)
kick off an write of player rewards state (currency, etc.) to the profile

(rewards_lsp_sync)
kick off an LSP sync of player rewards state (currency, etc.)

(rewards_force_unlock_all_purchasable_items)
Forcibly grants all prerequisites to all items.  Will allow you to buy anything that you have sufficient cookies for.

(rewards_grant_to_controller <controller> <currency_type> <long>)
grant rewards to the specified local controller; params are controller, currency index, amount awarded

(rewards_grant_to_player <player> <currency_type> <long>)
grant rewards to the specified player; params are player, currency type, amount awarded.  No network synchronization (fake an incident if you need that).

(rewards_commendation_increment_for_controller <controller> <string_id>)
increment a commendation (by string id) on the specified local controller

(rewards_commendation_increment_for_player <player> <string_id>)
increment a commendation (by string id) on the specified in-game player

(rewards_commendation_set_for_controller <controller> <string_id> <long>)
Set a commendation (by string id) to a specific value on the specified local controller

(rewards_purchase <controller> <long> <long> <long>)
try to buy an item for the specified local controller.  will only succeed if you have sufficient cookies.  The three paramters are category index, family index, and item index (from the purchasable items globals tag).

(rewards_set_player_appearance_from_purchase <controller> <long> <long> <long>)
Set the player's appearance to reflect the selection of the specified purchasable item. Will "succeed" even 
if you don't own the item.  The three paramters are category index, family index, and item index 
(from the purchasable items globals tag). Note: this won't work unless you own the item that you're 
pushing into player appearance!  Security systems in the player profile will sanitize your appearance based on 
the items you own.

(rewards_dump)
dump the current reward state to logs as _event_warnings

(rewards_reinitialize_from_storage <controller>)
reinitialize the in-memory reward state of the specified controller, pretending it just signed in (causing resyncs w/ profile and LSP).

(rewards_reset_to_default_state <controller>)
reset the player's reward state, push it out to the profile, & the LSP.  This should nuke your progression and make you a level 1 peon.

(rewards_get_total <controller> <currency_type>)
Fetches the specified controller's lifetime reward earn total; params are controller and currency index

(rewards_grant_all_items)
grant all purchasable items to all controllers

(rewards_clear_all_early_unlock_enlistments)
clear the set of early unlock enlistments

(rewards_set_early_unlock_enlistment <long> <boolean>)
sets or clears a particular flag from the mask of enlistments; usage: <flag index> <0 | 1 | true | false>

(challenges_enable_lsp_synchronization <boolean>)
Turn on/off lsp synchronization (useful to disable to keep LSP syncs from overriding your other script overrides).  LSP syncs are enabled by default.  Put this in your init to ensure that no challenges will be active by default.

(challenges_clear)
Clear all current active challenges.  Useful as a prelude to injecting challenges manually with challenges_activate_challenge.

(challenges_activate_challenge <long> <long> <long>)
activate the specified challenge. params are challenge set (0=daily, 1=weekly), challenge category index (from tag), challenge index in category (from tag).

(challenges_list_active_challenges_for_controller <controller>)
lists the active challenges for a controller

(challenge_advance_for_controller <controller> <string_id> <boolean>)
gives one credit towards a challenge by name.
pass 1 for the last parameter to bypass challenge requirements (e.g. game mode), or 0 to enforce normal requirements.

(challenge_complete_for_controller <controller> <string_id> <boolean>)
gives challenge credits until it is completed, if possible.
pass 1 for the last parameter to bypass challenge requirements (e.g. game mode), or 0 to enforce normal requirements.

(challenge_advance_for_controller_by_indices <controller> <long> <long> <boolean>)
progress a challenge by one.  challenge is identified by category index and challenge index within that category.
pass 1 for the last parameter to bypass challenge requirements (e.g. game mode), or 0 to enforce normal requirements.

(challenge_complete_for_controller_by_indices <controller> <long> <long> <boolean>)
gives challenge credits until it is completed, if possible.  challenge is identified by category index and challenge index within that category.
pass 1 for the last parameter to bypass challenge requirements (e.g. game mode), or 0 to enforce normal requirements.

(cui_set_screen_name_override_prefix <string>)
set prefix for cui screen name overrides

(cui_load_screen <cui_screen_definition>)
loads a cui screen from a definition tag

(cui_clear_screens)
clears all cui screens

(cui_load_themed_screen <cui_screen_definition> <string_id>)
loads a cui screen from a definition tag

(cui_hud_set_new_objective <string_id>)
activates the new objective title

(cui_hud_set_objective_complete <string_id>)
activates the objective complete title

(cui_hud_show_cinematic_title <string_id>)
activates the chapter title

(cui_hud_show_radio_transmission_hud <string_id>)
enables the radio transmission HUD icon

(cui_hud_hide_radio_transmission_hud)
disables the radio transmission HUD icon

(cui_toggle_bomb_icon <boolean>)
Toggle display of UI bomb icon

(rewards_get_grade <controller>)
get player grade for specific controller

(exit_experience_set_params <string_id> <string> <long> <long> <long> <long> <long>)
sets test parameters to show on the exit experience screen. parameters are: game mode (matchmaking, campaign, survival, custom_game, survival_matchmaking), score bitfield (eg. 10111111111), commendation count, count, challenge count, achievements count, cookies before, cookies after, xp before, xp after

(award_medal <controller> <string_id> <long>)
award a medal to the specified local controller: <controller> <medal name> <point override value -- 0 to use tag data>

(player_profile_clear_to_default_values <controller>)
Slam the specified controller to default profile values.

(submit_incident <string_id>)
Fire a global incident for all players

(submit_incident_with_cause_player <string_id> <player>)
Fire an incident for a player

(submit_incident_with_cause_team <string_id> <mp_team>)
Fire an incident for a team

(submit_incident_with_cause_player_and_effect_player <string_id> <player> <player>)
Fire an incident

(submit_incident_with_cause_player_and_effect_team <string_id> <player> <mp_team>)
Fire an incident

(submit_incident_with_cause_team_and_effect_player <string_id> <mp_team> <player>)
Fire an incident

(submit_incident_with_cause_team_and_effect_team <string_id> <mp_team> <mp_team>)
Fire an incident

(submit_incident_with_cause_campaign_team <string_id> <team>)
Loops over all players on the campaign team and calls submit_incident_with_cause_player

(net_set_campaign_insertion_point <short>)
set the campaign insertion point squad session parameter

(hs_make_interactive_scripts_deterministic <boolean>)
Enable or disable the routing of interactive script execution through the simulation system for determinism.  You can also use "determinize <normal script call>" to determinize a single script call.

(threadlib_runtests)
runs the unit tests for threadlib

(player_set_respawn_vehicle <player> <object_definition>)
sets a vehicle definition for a player to spawn in - the player will continue to spawn in this vehicle until you set it to none

(player_set_team_respawn_vehicle <mp_team> <object_definition>)
sets a vehicle definition for a player to spawn in - the player will continue to spawn in this vehicle until you set it to none

(teleport_players_into_vehicle <unit>)
tries to teleport all alive players into the specified vehicle, returns true if all players ended up in the vehicle.

(content_test_set_active <long>)
enable or disable the test harness for the content system (which will run through a bunch of operations and spew any errors encountered).

(content_test_set_active_test_pass <string> <long>)
Enable a specific test pass for the content system (e.g. standard, create).

(command_buffer_cache_playback_enable <boolean>)
Enable/disable command buffer playback

(player_set_spartan_loadout <player>)
Set player loadout palette to spartan

(player_set_elite_loadout <player>)
Set player loadout palette to elite

(player_set_grenade_type <player> <short>)
Set player's current grenade type

(player_optout_loadout_item <string>)
Optout another designer loadout item. Can be primary weapon, ability, mod, or ordnance. Like: 'sniper_rifle', 'aa_reflect', 'app_stealth', 'ord_weap_storm_mortar'

(player_clear_loadout_optouts)
clear/reset designer item optout list.

(auto_graph <string>)
Toggle graphing of some string quantity (ask a coder to graph the stuff and give you the strings).

(auto_graph_reset)
Turn off all graphs.

(auto_graph_enable_list <boolean>)
Start tracking available graphs.

(auto_graph_filter_list <string>)
Set a substring filter for available graph tracking.

(auto_graph_list)
Display the current set of (filtered) available graphs.

(auto_graph_hide)
Hide all graphs temporarily (without losing the active set or disabling the graphing behind the scenes).  Just to see past them.

(location_names_print)
Print all valid location names for the current scenario.

(net_force_host <string>)
Force a particular box (by machine name) to be host whenever possible.  
Running this command on box A will also run the same logic on all peers that are in sessions with box A.  This can be overridden by any of the more specific per-session force_host commands.

(net_force_host_squad <string>)
Force a particular box (by machine name) to be host whenever possible.  
Running this command on box A will also run the same logic on all peers that are in a squad session with box A.

(net_force_host_posse <string>)
Force a particular box (by machine name) to be host whenever possible.  
Running this command on box A will also run the same logic on all peers that are in a posse session with box A.

(net_force_host_group <string>)
Force a particular box (by machine name) to be host whenever possible.  
Running this command on box A will also run the same logic on all peers that are in a group session with box A.

(sandbox_load_label_strings <string>)
loads the label strings from the given .mglo file.  Only useable in the forge lobby

(net_dump_network_statistics)
Dump the current local network statistics structure to a file (same blob that is uploaded to MachineUpdateNetworkStats.ashx).

(net_enable_block_detection <long>)
If non-zero, turns on network block detection w/ the provided ms threshold.

(main_enable_block_detection <long>)
If non-zero, turns on main loop block detection w/ the provided ms threshold.

(main_synchronous_networking_request_vblank_slip)
Force the main loop to slip an extra vblank during its next sleep to try to get to a more stable place relative to the incoming game tick stream.

(debug_button_action_mapping_set <long> <long>)
Allows remapping of individual actions in custom button preset, contact a programmer for a list of what each parameter corresponds to

(player_appearance_force_model_area <long> <string_id>)
Force every player to spawn with a particular selection for a particular area

(player_appearance_force_model_area_disable <long>)
Disable forcing every player to spawn with a particular selection for a particular area

(debug_instanced_geometry_names_filter <string>)
filters instance debugging by name (substring included, set to emptry string to clear)

(play_animation_on_object <object> <string_id>)
animates the specified object using the specified animation id.
NETWORK SAFE: Unknown, assumed unsafe

(play_animation_on_object_with_graph <object> <animation_graph> <string_id>)
animates the specified object using the specified animation id.
NETWORK SAFE: Unknown, assumed unsafe

(pause_animation_on_object <object>)
pauses the state animation being played on the specified object.
NETWORK SAFE: Unknown, assumed unsafe

(resume_animation_on_object <object>)
resumes the state animation being played on the specified object.
NETWORK SAFE: Unknown, assumed unsafe

(set_playback_ratio_and_pause_on_object <object> <real>)
sets the animation position [0,1] and pauses the state animation being played on the specified object.
NETWORK SAFE: Unknown, assumed unsafe

(setup_scene_viewer_animation_debug <object> <string_id>)
sets up the scene viewer with the specified object and animation
NETWORK SAFE: Unknown, assumed unsafe

(add_scene_viewer_animation_at_time <object> <string_id> <real>)
adds the specified object and animation to the current scene
NETWORK SAFE: Unknown, assumed unsafe

(add_scene_viewer_move_along_point_set_at_time <object> <point_set_reference> <real> <real>)
moves the specified object along the given point set for the scene
NETWORK SAFE: Unknown, assumed unsafe

(add_scene_viewer_spawn_ai_at_time <ai> <real>)
spawns the specified AI at the specified time for the scene
NETWORK SAFE: Unknown, assumed unsafe

(add_scene_viewer_start_performance_at_time <ai> <real> <string_id>)
starts the specified performance on the specified AI at the specified time for the scene
NETWORK SAFE: Unknown, assumed unsafe

(scene_viewer_generate_haloscript)
prints out to a file, prototypical code for the scene as it's currently laid out.
NETWORK SAFE: Unknown, assumed unsafe

(scene_viewer_save_scene_to_XML <string>)
saves the current scene in XML format.
NETWORK SAFE: Unknown, assumed unsafe

(scene_viewer_load_XML_scene_file <string>)
loads a scene file in XML format.
NETWORK SAFE: Unknown, assumed unsafe

(scene_viewer_reset_current_scene)
resets the current scene back to time 0.
NETWORK SAFE: Unknown, assumed unsafe

(stream_manager_load_core <string>)
slam the network stream manager state with a saved core

(stream_manager_save_cores <long>)
begin dumping cores every X seconds

(controller_set_waypoint_flags <controller> <long> <boolean>)
Set a waypoint flag in the profile (outgoing to waypoint)

(waypoint_set_unlock_flag <controller> <long> <boolean>)
Set a waypoint flag in the profile (incoming from waypoint)

(async_test_hang <real> <long> <long>)
Create and async task that hangs for the specified number of seconds with the specified async category and priority.

(incidents_force_campaign)
Force all incidents to report as campaign

(incidents_force_firefight)
Force all incidents to report as firefight

(incidents_force_multiplayer)
Force all incidents to report as multiplayer

(incidents_force_matchmaking)
Force all incidents to report as matchmaking

(incidents_force_custom_games)
Force all incidents to report as custom games

(incidents_force_solo)
Force all incidents to report as solo

(incidents_force_coop)
Force all incidents to report as coop

(incidents_force_four_player_coop)
Force all incidents to report as 4 player coop

(game_sound_stress_test_message_queue)
Generate a bunch of messages to fill up the message queue.

(net_log_channel_message_queue_state <long> <boolean>)
Turn on/off logging of message queue state every time a message is sent for the specified channel index.

(global_preferences_set_campaign_state <long>)
sets the global preferences campaign state

(net_load_machine_file <string>)
load a machine file blf (pulled via gameadmin) directly.  Be sure to turn off banhammer lsp syncs to avoid getting your handiwork overwritten.

(game_set_random_holiday)
Set the game to a random holiday (used by stress to verify that setting boxes to random holidays on boot doesn't cause films to go out of sync).

(airstrike_set_launches <player> <long>)
sets the number of available airstrikes.

(cui_debug_add_global_property_watch <string>)
add global property watch

(cui_debug_add_property_watch <string>)
add property watch for active screen

(cui_debug_remove_global_property_watch <string>)
remove global property watch

(cui_debug_remove_property_watch <string>)
remove property watch for active screen

(cui_debug_clear_global_property_watches)
remove all global property watches

(cui_debug_clear_property_watches)
remove all property watches for active screen

(cui_debug_add_global_binding_watch <string>)
add global binding watch

(cui_debug_add_binding_watch <string>)
add binding watch for active screen

(cui_debug_remove_global_binding_watch <string>)
remove global binding watch

(cui_debug_remove_binding_watch <string>)
remove binding watch for active screen

(cui_debug_clear_global_binding_watches)
remove all global binding watches

(cui_debug_clear_binding_watches)
remove all binding watches for active screen

(cui_debug_clear_global)
clear all global state

(cui_debug_clear)
clear all state for active screen

(cui_debug_new_user_experience_force_event)
forces the New User Armory event component to throw an event like there is a new user

(game_grief_record_custom_penalty <player> <real>)
Add griefing points to a player

(game_grief_reset)
Reset griefing system for xbox

(game_grief_force_social_matchmaking)
Force the griefing system to believe that it is social matchmaking

(game_grief_force_ranked_matchmaking)
Force the griefing system to believe that it is ranked matchmaking

(game_grief_set_ranked_matchmaking_multiplier <real>)
Set the ranked matchmaking multiplier

(game_grief_set_social_matchmaking_multiplier <real>)
Set the ranked matchmaking multiplier

(game_grief_set_custom_game_multiplier <real>)
Force the griefing system to believe it is a custom game

(game_grief_set_objects_in_sphere_radius <real>)
Set the maximum distance for nearby enemey players/ai

(game_grief_set_ai_multiplier <real>)
Set the multiplier for ai

(game_grief_set_enemy_ai_nearby_multiplier <real>)
Set the multiplier when an enemy ai is nearby the betrayed

(game_grief_set_enemy_player_nearby_multiplier <real>)
Set the multiplier when an enemy player is nearby the betrayed

(game_grief_set_same_squad_multiplier <real>)
Set the multiplier when both the betrayed and betrayer are in the same matchmaking party

(game_grief_set_shield_damage_base_penalty <real>)
Set the shield damage base penalty

(game_grief_set_body_damage_base_penalty <real>)
Set the body damage base penalty

(game_grief_set_betrayal_base_penalty <real>)
Set the betrayal base penalty

(game_grief_set_betrayal_boot_cutoff <real>)
Set the betrayal boot cutoff

(game_grief_set_ejection_cutoff <real>)
Set the ejection cutoff

(game_grief_set_betrayal_decay_seconds <real>)
Set the seconds it takes to decay a griefing point

(game_grief_set_eject_decay_seconds <real>)
Set the seconds it takes to decay an ejection point

(net_disconnect_and_reconnect_all_channels)
for reproing omaha bug 26715, allows you to instantly unilaterally reset a machine's network message queues, bringing a danger of misinterpreting incoming fragments.

(player_set_profile <starting_profile>)
sets the profile for all players to spawn/respawn with.

(player_set_profile <starting_profile> <player>)
sets the profile for this player to spawn/respawn with.

(security_run_unit_tests)
runs a batch of security related unit tests

(network_session_security_set_challenge_response <string> <boolean> <long>)
change challenge responses

(network_session_security_set_challenge_failure_on_timeout <boolean>)
enable/disable failures on timeouts

(network_session_security_set_challenge_force_fail <boolean>)
force challenge response failures

(test_player_appearance_encode_for_sneakernet)
creates an encoded player appearance suitable for sneakernet from the first signed in controller

(test_player_appearance_decode_from_sneakernet <string>)
applies a sneakernet encoded player appearance to the first signed in controller

(test_player_get_weapons <long>)
Prints the specified player's weapon information to the console.

(test_player_get_ordnance <long>)
Prints the specified player's ordnance information to the console.

(test_player_get_armor <long>)
Prints the specified player's armor information to the console.

(test_player_get_vehicle <long>)
Prints the specified player's current vehicle information to the console.

(test_get_base_variant)
Prints the current mp game base variant type to the console.

(test_get_variant)
Prints the current mp game variant type to the console.

(test_print_video_mode)
Prints all user selected video settings.

(test_print_language_and_locale)
Prints all console language and locale settings.

(test_enable_performance_mode)
Enables options for performance testing.

(test_enable_performance_mode_and_session_tag)
Enables options and session tag for performance testing.

(test_print_game_state_checksum <boolean>)
Prints the checksum for the game state to the console.

(version <long>)
Specify the current version of Haloscript to use.

(set_assumptions <string>)
Sets the assumption mask.

(motl_dump_bitvector_for_scenario)
dumps the multiplayer object type bitvector for the current loaded scenario

(motl_verify_mapinfo_for_scenario)
checks the current level's mapinfo motl bitvector against what is actually loaded

(trace_thread_tick_to_file <long> <long> <string>)
creates a tracedump of the desired thread and tick in a specific file

(NotifyUnit <unit> <string>)
Notifies an event linked to a unit that it is time to execute.

(NotifyObject <object> <string>)
Notifies an event linked to an object that it is time to execute.

(NotifyPlayer <player> <string>)
Notifies an event linked to a player that it is time to execute.

(NotifyLevel <string>)
Notifies an event linked to the level that it is time to execute.

(NotifyGlobal <string>)
Notifies event linked to anything that it is time to execute.

(UnitEventStatus <unit> <string>)
Checks whether an event tied to a unit has been notified.

(ObjectEventStatus <object> <string>)
Checks whether an event tied to an object has been notified.

(PlayerEventStatus <player> <string>)
Checks whether an event tied to a player has been notified.

(LevelEventStatus <string>)
Checks whether an event tied to the level has been notified.

(player_set_ordnance_points <player> <long>)
Sets the ordnance points for a given player (player index, ordnance points)

(player_set_ordnance_tier <player> <long>)
Sets the ordnance progression tier for a given player (player index, zero-based tier)

(player_set_ordnance_points_and_tier <player> <long> <long>)
Sets the ordnance points and tier for a given player (player index, ordnance points, ordnance tier)

(ActivateOrdnanceEquipment <player> <object_definition>)
Directly equips and activates given equipment. Bypassing normal ordnance mechanisms.

(ordnance_drop_random <string> <boolean> <real>)
<set_name_string> <randomize_bool> <stagger_seconds>; Triggers the ordnance system to drop the set with given name (or random if empty string). 2nd arg: false will not randomize weapons/drop points

(ordnance_drop <cutscene_flag> <string_id>)
Triggers the random ordnance system to spawn a specific weapon at given location. <flag_object> <weapon_variant_name>

(ordnance_drop_random_enable <boolean>)
Enables/disables random ordnance system.

(ordnance_drop_random_is_enabled)
Returns current enable state.

(ordnance_show_nav_markers <boolean>)
show/hide ordnance nav markers

(ordnance_set_droppod_object <object_definition> <effect>)
set ordnance drop pod scenery object type and the locator effect.

(player_set_silent_assist_level <player> <long>)
Sets the silent-assist level for a given player

(player_get_silent_assist_level <player>)
gets the current silent assist level for the given player

(firefight_mode_respawn_dead_players)
respawns all dead players even if no lives are left

(firefight_mode_lives_get)
get the number of lives left in firefight mode

(firefight_mode_lives_set <long>)
set the number of lives left in firefight mode

(firefight_mode_infinite_lives_set <boolean>)
enable or disable infinite lives mode in firefight mode

(firefight_mode_goal_get)
get the current set index for firefight mode

(firefight_mode_waves_in_player_goal)
get the number of waves per round for firefight mode

(firefight_mode_wave_get)
get the current wave index for firefight mode

(firefight_mode_get_wave_squad)
returns the name of the squad template for the current wave

(firefight_mode_award_hero_medal)
lets the engine award the hero medal

(firefight_mode_get_time_limit)
Get the firefight mode time limit from the game variant

(firefight_mode_get_goal_count)
Get the firefight mode set count from the game variant

(firefight_mode_get_bonus_lives_awarded)
Get the firefight mode bonus lives from the game variant

(firefight_mode_get_shared_team_life_count)
Get the firefight mode spartan life count from the game variant

(firefight_mode_max_lives)
Get the firefight mode max lives from the game variant

(firefight_mode_ammo_crates_enable)
Get the firefight mode ammo crates enabled property from the game variant

(firefight_mode_current_wave_spawn_method)
Get the firefight mode current wave uses a dropship property from the game variant

(firefight_mode_team_respawns_on_wave)
Does this team respawn only when waves complete?

(firefight_mode_sudden_death <boolean>)
Start or stop sudden death for firefight mode

(firefight_mode_player_count_by_team <team>)
given a team index, returns the player count of that team

(firefight_mode_increment_player_goal <wave_difficulty>)
Move on to the next valid player goal, returns the index of the player goal.

(firefight_mode_start_goals <wave_difficulty>)
Sets up the first player goal. With the given difficulty.

(firefight_mode_increment_wave)
Move on to the next valid wave, returns the index of the wave.

(firefight_mode_current_player_goal_type)
Get the firefight goal type for the current player goal.

(firefight_mode_player_goal_type <long>)
Get the firefight goal type for the specified player goal.

(firefight_set_squad_group <ai>)
set the squad that the firefight game engine is 'watching'.

(firefight_get_squad_group)
gets the squad group that firefight is 'watching'

(firefight_mode_get_current_objective <short>)
Returns the table index for the current objective.

(firefight_mode_get_objective <long> <short>)
Returns the table index for the specified objective.

(firefight_mode_get_current_start_location_folder)
Returns the table index for the current start location folder.

(firefight_mode_get_start_location_folder <long>)
Returns the table index for the specified start location folder.

(firefight_mode_get_current_squad_to_place <short>)
Returns the table index for the current squad to be placed at the specified index.

(firefight_mode_get_squad_to_place <long> <long> <short>)
Returns the table index for the specified squad to be placed at the specified index in the specified wave.

(firefight_mode_get_start_crate <short>)
Returns the table index for the current crate folder to be placed at the specified index.

(firefight_mode_get_wave_type)
Returns the type of the current firefight wave.

(firefight_mode_get_current_weapon_drop)
Returns the current weapon to be dropped in the weapon drop

(firefight_mode_get_current_vehicle_drop)
Returns the current weapon to be dropped in the vehicle drop

(firefight_mode_get_weapon_drop <long> <long>)
Returns the specified wave's weapon to be dropped in the weapon drop

(firefight_mode_get_vehicle_drop <long> <long>)
Returns the specified wave's weapon to be dropped in the vehicle drop

(firefight_mode_get_current_user_data)
Get the user data for the current player goal.

(firefight_mode_get_user_data <long>)
Get the user data for a specified goal.

(firefight_mode_get_objective_name_at <short>)
Gets the objective name at the specified index from the game engine.

(firefight_mode_set_objective_name_at <object_name> <short>)
Sets the objective name at the specified index to the game engine.

(firefight_mode_get_crate_folder_at <short>)
Gets the crate folder at the specified index from the game engine.

(firefight_mode_is_crate_folder_valid <short>)
Checks if the folder is valid at the specified index from the game engine.

(firefight_mode_set_crate_folder_at <folder> <short>)
Sets the crate folder at the specified index to the game engine.

(firefight_mode_get_squad_at <short>)
Gets the squad at the specified index from the game engine.

(firefight_mode_set_squad_at <ai> <short>)
Sets the squad at the specified index to the game engine.

(firefight_mode_apply_player_traits <player>)
Applies the player traits for the current player goal

(firefight_mode_get_current_goal_time_limit)
Gets the time limit (In minutes) for the current player goal

(firefight_mode_set_player_spawn_suppressed <boolean>)
sets the flag to suppress player spawn (or not)

(firefight_mode_get_player_spawn_suppressed)
gets the flag to see if player spawn is suppressed

(spartanops_clear_progression <controller>)
Resets the current progression for a player

(spartanops_mark_mission_attempted <controller> <long> <game_difficulty>)
Marks a mission in-progress

(spartanops_mark_mission_complete <controller> <long> <game_difficulty>)
Marks a mission complete

(spartanops_set_timeline_length <long>)
Shortens the timeline for UI debugging purposes

(toolbox_gpu_capture)
captures the next GPU frame

(toolbox_cpu_task_trace <string>)
captures a CPU trace of the named task

(toolbox_cpu_trace)
captures a CPU trace

(toolbox_cpu_timing)
performs a system timing capture

(CreateDynamicTask <long> <long> <object> <script> <real>)
Create a dynamic task.

(CreateDynamicTeamTask <long> <long> <object> <script> <real> <team>)
Create a dynamic task with a team parameter.

(DestroyDynamicTask <long>)
Destroy dynamic task.

(SetDynamicTaskFilterFlags <ai> <long>)
Set task filter flags on an actor.

(SetDynamicTaskTeamFilter <long> <long>)
Set task's allowed teams.

(IsDynamicTaskValid <long>)
Verify dynamic task exists.

(SetObjectLongVariable <object> <long> <long>)
Store a named variable in an object instance.

(SetObjectRealVariable <object> <long> <real>)
Store a named variable in an object instance.

(GetObjectLongVariable <object> <long>)
Recall a named variable from an object instance.

(GetObjectRealVariable <object> <long>)
Recall a named variable from an object instance.

(SendCommandEvent <object> <long> <long> <real>)
Send generic command event to specified object.

(RegisterForObjectEvent <object> <long>)
Listen for specified internal event coming from selected object.

(UnregisterForObjectEvent <object> <long>)
Stop listening for specified internal event coming from selected object.

(SetObjectEventCallback <object> <script>)
Set the function called when selected object throws a registered event.

(record_next_cinematic <short> <short> <short>)
Record the next cinematic (<frame rate> <width> <height>)

(record_next_cinematic_fml <short> <short> <short>)
Record the next cinematic first, middle, last shot frames (<frame rate> <width> <height>)

(record_next_cinematic_distributed <short> <short> <short> <short>)
Record the next cinematic distributed (<frame rate> <width> <height> <frame mod count>)

(ProgressionGetEnlistmentGrade <long> <long>)
returns the enlistment grade for the given <enlistment index> and <xp value>

(ProgressionIsMaxEnlistmentGrade <long> <long>)
returns true if, for the given <enlistment index>, the provided <player grade> is the maximum grade

(ProgressionGetGrade <controller> <long>)
returns the enlistment grade for the given <controller> and <xp value>

(ProgressionIsAtMaxGrade <controller>)
returns true if the given <controller> is at the maximum grade

(ProgressionGetCurrentGrade <controller>)
returns the current enlistment grade for the given <controller>

(ProgressionGetCurrentGradeName <controller>)
returns the name of the current enlistment grade for the given <controller>

(ProgressionGetNextGradeName <controller>)
returns the name of the next enlistment grade for the given <controller>

(ProgressionGetCurrentGradeXPThreshold <controller>)
returns the xp threshold for the current enlistment grade for the given <controller>

(ProgressionGetNextGradeXPThreshold <controller>)
returns the xp threshold for the next enlistment grade for the given <controller>

(ProgressionGetPossibleEnlistments)
returns the mask of all possible enlistments

(ProgressionGetEnlistmentName <long>)
returns the name of the enlistment for the given <enlistment index>

(ProgressionGetEnlistmentDescription <long>)
returns the description of the enlistment for the given <enlistment index>

(ProgressionGetEnlistmentSpriteIndex <long>)
returns the sprite index of the enlistment for the given <enlistment index>

(ProgressionGetCurrentEnlistmentIndex <controller>)
returns the current enlistment index for the given <controller>

(ProgressionGetEnlistmentCompletionMask <controller>)
returns the enlistment completion mask for the given <controller>

(ProgressionCanChangeEnlistments <controller>)
returns true if the given <controller> is eligible to change enlistments

(ProgressionGetAvailableEnlistments <controller>)
returns the mask of available enlistments for the given <controller>

(ProgressionChangeEnlistment <controller> <long>)
changes the enlistment for the given <controller> to the given <enlistment index>

(PlayerSetICSCamera <player> <string_id> <real> <long>)
start or change ICS camera (player, marker_name, user-control cone angle, interpolation ticks)

(PlayerSetICSCamera <player> <string_id> <real> <real> <long>)
start or change ICS camera (player, marker_name, user-control cone angle, auto-centering strength, interpolation ticks)

(PlayerSetICSCamera <player> <string_id> <real> <real> <real> <real> <real> <long>)
start or change ICS camera (player, marker_name, user-control cone angles (minh, maxh, minv, maxv), auto-centering strength, interpolation ticks)

(PlayerSetICSCamera <player> <string_id> <real> <real> <real> <real> <real> <real> <real> <long>)
start or change ICS camera (player, marker_name, user-control cone angles (minh, maxh, minv, maxv, softh, softv), auto-centering strength, interpolation ticks)

(FirstPersonSetBodyRegionVisibility <player> <string_id> <string_id>)
Sets the visibility of a named region on the first-person body model. Valid options are 'on', 'off' and 'default'.

(killcam_debug <boolean>)
Enable or disable kill cam debugging

(player_control_move_to_point <player> <point_reference> <real> <real> <long>)
force player to move towards a point until it is within a radius, or a timer expires. params are point, max_throttle, max_radius, max_ticks

(player_control_move_to_object <player> <object> <real> <real> <long>)
force player to move towards an object until it is within a radius, or a timer expires. params are point, max_throttle, max_radius, max_ticks

(player_control_move_to_marker <player> <object> <string_id> <real> <real> <long>)
force player to move towards an object until it is within a radius, or a timer expires. params are point, max_throttle, max_radius, max_ticks

(player_control_stop_move_to <player>)
stop any move_to command that might be active on this player

(player_control_move_to_active <player>)
returns true if a move_to command is still active on this player.

(io_set_imposter_distance <long> <long> <real>)
set imposter distance

(test_saved_game <string> <string>)
Test parsing and validation functions for fuzzed single player saved game files for the active user. The header file is copied from <headerPath>, and the saved game file from <filePath>.

(test_saved_film <string>)
Test parser and validator for fuzzed saved films and clips from <filmPath>.

(test_map_variant <string>)
Test parser and validator for fuzzed saved map variants from <mapVariantPath>.

(test_game_variant <string>)
Test parser and validator for fuzzed saved game variants from <gameVariantPath>.

(test_screenshot <string>)
Test parser and validator for fuzzed screenshot from <screenshotPath>.

(list_and_copy_saved_content <string>)
Lists and copies all the saved content available to <destination>. To skip copying set destination as '-'.

(FilterZoneResourcesWithMapVariant <boolean>)
Enable or disable map variant resource filtering

(toggle_wireframe)
toggle in and out of wireframe render mode

(toggle_wireframe_use_depth)
toggle depth for IOs in wireframe render mode

(toggle_wireframe_show_transparents)
toggle transparents wireframe render mode

(sentry_activate <object>)
activate a sentry turret

(sentry_deactivate <object>)
deactivate a sentry turret

(sentry_activate_barrel <object> <long>)
activate a sentry turret barrel

(sentry_deactivate_barrel <object> <long>)
deactivate a sentry turret barrel

(IsNarrativeFlagSetOnAnyPlayer <long>)
Is the specified narrative flag set on any player

(SetNarrativeFlagOnLocalPlayers <long> <boolean>)
Set the specified narrative flag set on all players

(GetNarrativeFlag <player> <long>)
Returns the current state of the narrative flag at the given index for the specified player

(SetNarrativeFlag <player> <long> <boolean>)
Sets the state of the narrative terminal flag at the given index for the specified player

(toggle_bad_collision_to_render_mesh_mappings)
Toggle Display Collision Tris With Capped Render Tri Mapping

(SetNarrativeFlagWithFanfareMessageForAllPlayers <long> <boolean>)
Sets a waypoint narrative flag for all players and loads a cui fanfare screen for everyone

(pvp_drop_test)
Drop objects to test PvP perf

(pvp_drop_test_reset)
Reset Pvp drop test.

(pvp_drop_test_increment_team)
Cycle colors to next team for dropped bipeds.

(streaming_video_queue <string> <controller>)
queue a streaming video

(streaming_video_stop)
exit the current streaming video

(security_force_cache_file_open_header_signature_failure <string> <boolean>)
force signature failure check performed on cache file header on open <map name> <shouldFail>

(security_force_cache_file_read_header_signature_failure <string> <boolean>)
force signature failure check performed on cache file header before tag data read <map name> <shouldFail>

(security_force_cache_file_read_content_signature_failure <string> <boolean>)
force signature failure check performed on content hashes before tag data read <map name> <shouldFail>

(security_force_cache_file_manifest_hash_failure <boolean>)
force failure check performed on map file manifest hashes in network banhammer <shouldFail>

(io_set_imposter_brightness <long> <long> <real>)
set imposter brightness

(campaign_is_completed_on_legendary <player>)
Are all campaign levels completed on legendary difficulty?

