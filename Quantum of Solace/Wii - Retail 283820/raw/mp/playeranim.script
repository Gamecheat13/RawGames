
//==========================================================================
//
// Character Animation Script     M U L T I P L A Y E R
//
// All player states should have animations sutable for a two handed rifle type weapon.
//
// This defines the animations and events that might occur at different times
// for this character. State changes, and random behaviour during idle/alert
// states will look here for default behaviour, if that character doesn't have
// something specific in their scripts for that level.
//
//==========================================================================

// playerAnimType:
// Set in "Player Anim Type" in the weapon gdt file.
// Full list specified in playeranimtypes.txt.
// Asset manager choices specified in weapon gdf files.

//==========================================================================
// DEFINES
//
// These can be used to simplify the scripting, by defining replacement strings

DEFINES

// weaponclasses
set weaponclass autofire = mg AND smg

// movetypes
set movetype moving = walk AND walkcr AND run AND runcr 
set movetype crouching = idlecr AND runcr AND walkcr 

//==========================================================================
// ANIMATIONS
//
//	NOTE: scripts are chosen by first-come-first-serve basis. The first match
//	found is the one used.
//
// format:
//
// state <state description>
// {
//		<movement type>
//		{
//			[DEFAULT / <condition type> [<condition value>], ...]
//			{
//				<both/legs/torso/turret> <animation> [sound <filename>]
//				<both/legs/torso/turret> <animation> [sound <filename>]
//				...
//			}
//		}
//	}
//
//	legend:
//
//	<state description>: relaxed, alert, combat
//
//	<movement type>: idle, idlecr,
//                   walk, walkcr.
//                   run, runcr, 
//                   straferight, strafeleft, turnright, turnleft
//
//	<condition type>: playerAnimType, weaponclass, position, enemy_weapon, underwater, mounted, movetype, underhand, leaning, weapon_position
//
//	<condition value>:
//
//		playerAnimType: <weapon Player Anim Type in gdt>
//		position: behind, infront, right, left
//		enemy_weapon: <see weapon pickup names>
//		underwater: <no values>
//		mounted: mg42
//		movetype: <see movement types>
//		underhand: <no values>
//		leaning: right, left
//		weaponclass: unarmed, rifle, sniper, smg, mg, pistol, grenade, rocketlauncher, flamethrower, turret, non-player
//		weapon_position: hip, ads
//		strafing: not, left, right - will never be left or right while moving backwards
//
// NOTES:
// - The player walks when they are ADS, so they can not ADS while running.
//

ANIMATIONS

STATE COMBAT
{
	idle
	{
		weaponclass unarmed
		{
			torso fp_unarmed_idle
		}		

		weapon_anim $empty_idle, weapon_ammo empty
			{
				torso $empty_idle
			}

		weapon_anim $idle
			{
				torso $idle
			}

		default
		{
			torso pt_pistol_idle
		}
		default
		{
			legs pl_stand_idle
		}
	}
	idlecr
	{
		weaponclass unarmed
		{
			torso fp_unarmed_idle
		}

		weapon_anim $empty_idle, weapon_ammo empty
			{
				torso $empty_idle
			}

		weapon_anim $idle
			{
				torso $idle
			}

		default
		{
			torso fp_p99_idle
		}
		default
		{
			legs pl_crouch_idle
		}
	}
	
// FLINCHING
	flinch_forward
	{
		weaponclass grenade
		{
			torso pt_flinch_grenade_forward
		}	
		default 
		{
			torso pt_flinch_pistol_forward
		}
	}
	flinch_backward
	{
		default 
		{
			torso pt_flinch_back
		}
	}
	flinch_left
	{
		weaponclass grenade
		{
			torso pt_flinch_grenade_left
		}
		default 
		{
			torso pt_flinch_pistol_left
		}
	}
	flinch_right
	{
		weaponclass grenade
		{
			torso pt_flinch_grenade_right
		}
		default 
		{
			torso pt_flinch_pistol_right
		}
	}

// STUMBLE
	stumble_forward
	{
		// pistol
		weaponclass pistol, strafing left
		{
			both pb_stumble_pistol_left
		}
		weaponclass pistol, strafing right
		{
			both pb_stumble_pistol_right
		}
		weaponclass grenade, strafing left
		{
			both pb_stumble_grenade_left
		}
		weaponclass grenade, strafing right
		{
			both pb_stumble_grenade_right
		}
		weaponclass pistol 
		{
			both pb_stumble_pistol_forward
		}
		weaponclass grenade
		{
			both pb_stumble_grenade_forward
		}

		// rifle	
		strafing left
		{
			both pb_stumble_left
		}
		strafing right
		{
			both pb_stumble_right
		}
		default 
		{
			both pb_stumble_forward
		}
	}
	stumble_backward
	{
		default 
		{
			both pb_stumble_back
		}
	}

// STUMBLE WALK
	stumble_walk_forward
	{
		// pistol
		weaponclass pistol AND grenade, strafing left
		{ 
			both pb_stumble_pistol_walk_left
		}
		weaponclass pistol AND grenade, strafing right
		{
			both pb_stumble_pistol_walk_right
		}
		weaponclass pistol AND grenade
		{
			both pb_stumble_pistol_walk_forward
		}

		// rifle	
		strafing left
		{
			both pb_stumble_walk_left
		}
		strafing right
		{
			both pb_stumble_walk_right
		}
		default 
		{
			both pb_stumble_walk_forward
		}
	}
	stumble_walk_backward
	{
		// pistol
		weaponclass pistol AND grenade, strafing left
		{
			both pb_stumble_pistol_walk_left
		}
		weaponclass pistol AND grenade, strafing right
		{
			both pb_stumble_pistol_walk_right
		}	
		weaponclass pistol AND grenade
		{
			both pb_stumble_pistol_walk_back
		}
		// rifle	
		strafing left
		{
			both pb_stumble_walk_left
		}
		strafing right
		{
			both pb_stumble_walk_right
		}		
		default 
		{
			both pb_stumble_walk_back
		}
	}

// STUMBLE CROUCH
	stumble_crouch_forward
	{
		// pistol
		weaponclass pistol AND grenade, strafing left
		{
			both pb_stumble_pistol_left
		}
		weaponclass pistol AND grenade, strafing right
		{ 
			both pb_stumble_pistol_right
		}
		weaponclass pistol AND grenade
		{
			both pb_stumble_pistol_forward
		}

		// rifle	
		strafing left
		{
			both pb_stumble_left
		}
		strafing right
		{
			both pb_stumble_right
		}
		default 
		{
			both pb_stumble_forward
		}
	}
	stumble_crouch_backward
	{
		// pistol
		weaponclass pistol AND grenade, strafing left
		{
			both pb_stumble_pistol_left
		}
		weaponclass pistol AND grenade, strafing right
		{ 
			both pb_stumble_pistol_right
		}	
		weaponclass pistol AND grenade
		{
			both pb_stumble_pistol_back
		}
		strafing left
		{
			both pb_stumble_left
		}
		strafing right
		{
			both pb_stumble_right
		}		
		default 
		{
			both pb_stumble_back
		}
	}

	walk // Mostly ADS when walking, though there is a brief period of time between idle and run when you walk
	{
		weaponclass unarmed
		{
			torso fp_unarmed_walk
		}		
		weapon_anim $empty_idle, weapon_ammo empty
			{
				torso $empty_idle
			}
		weapon_anim $idle
			{
				torso $idle
			}
		default
		{
			torso pt_pistol_idle
		}

		strafing right
		{
			legs pl_stand_walk_right
		}
		strafing fore_right
		{
			legs pl_stand_walk_fore_right
		}
		strafing fore
		{
			legs pl_stand_walk_fore
		}
		strafing fore_left
		{
			legs pl_stand_walk_fore_left
		}
		strafing left
		{
			legs pl_stand_walk_left
		}
		strafing back_left
		{
			legs pl_stand_walk_back_left
		}
		strafing back
		{
			legs pl_stand_walk_back
		}
		strafing back_right
		{
			legs pl_stand_walk_back_right
		}
		default
		{
			legs pl_stand_walk_fore
		}
	}
	walkcr // Mostly ADS when walking, though there is a brief period of time between idle and run when you walk
	{
		weaponclass unarmed
		{
			torso fp_unarmed_walk
		}		
		weapon_anim $empty_idle, weapon_ammo empty
			{
				torso $empty_idle
			}
		weapon_anim $idle
			{
				torso $idle
			}
		default
		{
			torso pt_pistol_idle
		}

		strafing right
		{
			legs pl_crouch_walk_right
		}
		strafing fore_right
		{
			legs pl_crouch_walk_fore_right
		}
		strafing fore
		{
			legs pl_crouch_walk_fore
		}
		strafing fore_left
		{
			legs pl_crouch_walk_fore_left
		}
		strafing left
		{
			legs pl_crouch_walk_left
		}
		strafing back_left
		{
			legs pl_crouch_walk_back_left
		}
		strafing back
		{
			legs pl_crouch_walk_back
		}
		strafing back_right
		{
			legs pl_crouch_walk_back_right
		}
		default
		{
			legs pl_crouch_walk_fore
		}
	}
	run
	{
		weaponclass unarmed
		{
			torso fp_unarmed_run
		}
		weapon_anim $empty_idle, weapon_ammo empty
			{
				torso $empty_idle
			}
		weapon_anim $idle
			{
				torso $idle
			}
		default
		{
			torso pt_pistol_idle
		}

		strafing right
		{
			legs pl_stand_run_right
		}
		strafing fore_right
		{
			legs pl_stand_run_fore_right
		}
		strafing fore
		{
			legs pl_stand_run_fore
		}
		strafing fore_left
		{
			legs pl_stand_run_fore_left
		}
		strafing left
		{
			legs pl_stand_run_left
		}
		strafing back_left
		{
			legs pl_stand_run_back_left
		}
		strafing back
		{
			legs pl_stand_run_back
		}
		strafing back_right
		{
			legs pl_stand_run_back_right
		}
		default
		{
			legs pl_stand_run_fore
		}
	}
	runcr
	{
		weaponclass unarmed
		{
			torso fp_unarmed_walk
		}
		weapon_anim $empty_idle, weapon_ammo empty
			{
				torso $empty_idle
			}
		weapon_anim $idle
			{
				torso $idle
			}
		default
		{
			torso pt_pistol_idle
		}

		strafing right
		{
			legs pl_crouch_walk_right
		}
		strafing fore_right
		{
			legs pl_crouch_walk_fore_right
		}
		strafing fore
		{
			legs pl_crouch_walk_fore
		}
		strafing fore_left
		{
			legs pl_crouch_walk_fore_left
		}
		strafing left
		{
			legs pl_crouch_walk_left
		}
		strafing back_left
		{
			legs pl_crouch_walk_back_left
		}
		strafing back
		{
			legs pl_crouch_walk_back
		}
		strafing back_right
		{
			legs pl_crouch_walk_back_right
		}
		default
		{
			legs pl_crouch_walk_fore
		}
	}

// STUMBLE SPRINT
	stumble_sprint_forward
	{
		default 
		{
			both pb_stumble_forward
		}
	}
	sprint
	{
		playerAnimType none
		{
			both pb_sprint_pistol
		}
		weaponclass rifle
		{
			both pb_sprint_foregrip
		}
		default
		{
			both pb_sprint_pistol
		}
	}
	
	climb_idle
	{
		traversal beam, modifier left_fall
		{
			both pb_beam_fall_left
		}
		traversal beam, modifier left_extreme
		{
			both pb_beam_idle_wobble_left_extreme
		}
		traversal beam, modifier left_slight
		{
			both pb_beam_idle_wobble_left_slight
		}
		traversal beam, modifier center
		{
			both pb_beam_idle
		}
		traversal beam, modifier right_slight
		{
			both pb_beam_idle_wobble_right_slight
		}
		traversal beam, modifier right_extreme
		{
			both pb_beam_idle_wobble_right_extreme
		}
		traversal beam, modifier right_fall
		{
			both pb_beam_fall_right
		}
		traversal ledge, modifier left
		{
			both pb_ledge_left_idle
		}
		traversal ledge, modifier right
		{
			both pb_ledge_right_idle
		}
	}
	
	climb_up
	{
		traversal beam, modifier left_fall
		{
			both pb_beam_fall_left				// pb_beam_run_fore_fall_left needs work
		}
		traversal beam, modifier left_extreme
		{
			both pb_beam_run_fore_wobble_left_extreme
		}
		traversal beam, modifier left_slight
		{
			both pb_beam_run_fore_wobble_left_slight
		}
		traversal beam, modifier center, context inclined_beam
		{
			both pb_beam_sprint_fore
		}
		traversal beam, modifier center
		{
			both pb_beam_run_fore
		}
		traversal beam, modifier right_slight
		{
			both pb_beam_run_fore_wobble_right_slight
		}
		traversal beam, modifier right_extreme
		{
			both pb_beam_run_fore_wobble_right_extreme
		}
		traversal beam, modifier right_fall
		{
			both pb_beam_fall_right				// pb_beam_run_fore_fall_right needs work
		}
		traversal ladder
		{
			both pb_ladder_climb_up
		}
		traversal ledge, modifier left
		{
			both pb_ledge_strafe_left
		}
		traversal ledge, modifier right
		{
			both pb_ledge_strafe_right
		}
		traversal pipe
		{
			both pb_climb_pipe_up
		}
		traversal wallhug
		{
			both pb_wallhug_strafe_right
		}
	}
	climb_down
	{
		traversal beam, modifier center
		{
			 // pb_beam_walk_back
			 both pb_beam_turn_180_left
			 both pb_beam_turn_180_right
		}
		traversal beam, modifier left_slight
		{
			 both pb_beam_turn_180_left
		}
		traversal beam, modifier right_slight
		{
			 both pb_beam_turn_180_right
		}
		traversal ladder
		{
			both pb_ladder_climb_down
		}
		traversal pipe
		{
			both pb_climb_pipe_down
		}
		traversal wallhug
		{
			both pb_wallhug_strafe_left
		}
	}
	climb_misc
	{
		traversal beam, modifier center
		{
			both pb_beam_idle_wobble
		}
		traversal ladder
		{
			both pb_ladder_climb_down_idle
		}
		traversal ledge, modifier left
		{
			both pb_ledge_dash_left_60
		}
		traversal ledge, modifier right
		{
			both pb_ledge_dash_right_60
		}
		traversal mantle_40, context pb_traverse_on_ladder
		{
			both pb_traverse_on_ladder
		}
		traversal mantle_44, context mantle_ledge_right
		{
			both pb_mantle_ledge_right
		}
		traversal mantle_44, context pb_traverse_on_ladder
		{
			both pb_traverse_on_ladder
		}
		traversal mantle_44, modifier cover_left_on
		{
			both pb_mantle_40_cover_left_on
		}
		traversal mantle_44, modifier cover_left_over_long
		{
			both pb_mantle_40_cover_left_over_long
		}
		traversal mantle_44, modifier cover_left_over_short
		{
			both pb_mantle_40_cover_left_over_short
		}
		traversal mantle_44, modifier cover_right_on
		{
			both pb_mantle_40_cover_right_on
		}
		traversal mantle_44, modifier cover_right_over_long
		{
			both pb_mantle_40_cover_right_over_long
		}
		traversal mantle_44, modifier cover_right_over_short
		{
			both pb_mantle_40_cover_right_over_short
		}
		traversal mantle_44, modifier stand_on
		{
			both pb_mantle_44_stand_on
		}
		traversal mantle_44, modifier stand_over_long
		{
			both pb_mantle_44_stand_over_long
		}
		traversal mantle_44, modifier stand_over_short
		{
			both pb_mantle_44_stand_over_short
		}
		traversal mantle_44
		{
			both pb_mantle_over_44
		}
		traversal mantle_56
		{
			both pb_mantle_on_56
		}
		traversal pipe
		{
			both pb_climb_pipe_down_idle
		}
	}
	climb_get_on_top	// get on from top of ladders/pipes, and transition animations
	{
		traversal ladder
		{
			both pb_ladder_get_on_top
		}
		traversal ledge, modifier left
		{
			both pb_ledge_peek_left
		}
		traversal ledge, modifier right
		{
			both pb_ledge_peek_right
		}
		traversal pipe
		{
			both pb_climb_pipe_approach_top
		}
		traversal transition, context sc_bond_ledgepipe_pistol
		{
			both sc_bond_ledgepipe_pistol
		}
	}
	climb_get_off_top
	{
		traversal ladder
		{
			both pb_ladder_get_off_top
		}
		traversal ledge, modifier left
		{
			both pb_ledge_peek_left_idle
		}
		traversal ledge, modifier right
		{
			both pb_ledge_peek_right_idle
		}
		traversal pipe
		{
			both pb_climb_pipe_depart_top
		}
		traversal wallhug
		{
			both pb_wallhug_dash_right_60
		}
	}
	climb_get_on_bottom
	{
		traversal ladder
		{
			both pb_ladder_get_on_bottom
		}
		traversal ledge, modifier left
		{
			both pb_ledge_to_ledge_left
		}
		traversal ledge, modifier right
		{
			both pb_ledge_to_ledge_right
		}
		traversal pipe
		{
			both pb_climb_pipe_approach_bottom
		}
	}
	climb_get_off_bottom
	{
		traversal ladder
		{
			both pb_ladder_get_off_bottom
		}
		traversal ledge
		{
			both pb_ledge_die
		}
		traversal pipe
		{
			both pb_climb_pipe_depart_bottom
		}
		traversal wallhug
		{
			both pb_wallhug_dash_left_60
		}
	}
}

//==========================================================================
// EVENTS
//
// format:
//
// <event description>
// {
//		[DEFAULT / <condition type> [<condition value>], ...]
//		{
//			<both/legs/torso> <animation> [sound <filename>]
//			<both/legs/torso> <animation> [sound <filename>]
//			...
//		}
// }
//
// legend:
//
// <event description>: pain, death, fireweapon, jump, jumpbk, land, dropweapon,
//		raiseweapon, reload, shellshock,
//		door_bash, meleeattack
//
//	NOTE: for gameplay anims (weapons firing, reload, etc) that show no legs movement
//		only the torso should animation from here, leave the legs doing what their
//		locomotive anims want them to do
//

EVENTS

holdfire
{
	weapon_anim $hold_fire
		{
			torso $hold_fire
		}
	}

fireweapon
{
//	FOR_EACH_WEAPON ( $ads_lastshot )
//	{
//		weapon $name, weapon_position ads
//		{
//			torso $ads_lastshot
//		}
//	}
//	FOR_EACH_WEAPON ( $lastshot )
//	{
//		weapon $name, lastshot
//		{
//			torso $lastshot
//		}
//	}
//	FOR_EACH_WEAPON ( $ads_fire )
//	{
//		weapon $name, weapon_position ads
//		{
//			torso $ads_fire
//		}
//	}
//	FOR_EACH_WEAPON ( $fire )
//	{
//		weapon $name
//		{
//			torso $fire
//		}
//	}

	weapon_anim $ads_fire, weapon_position ads
		{
			torso $ads_fire
		}

	weapon_anim $fire
		{
			torso $fire
		}


// MG42
	mounted mg42
	{
		// Ignore the fireweapon event while on a turret
	}

// PISTOLS
	weaponclass pistol, movetype moving
	{
		// Play no special firing animation
	}
	weaponclass pistol, movetype crouching, weapon_position ads
	{
		torso pt_crouch_shoot_ads_pistol
	}
	weaponclass pistol, movetype crouching
	{
		torso pt_crouch_shoot_pistol
	}
	weaponclass pistol, weapon_position ads
	{
		torso pb_stand__shoot_ads_pistol
	}
	weaponclass pistol
	{
		torso pt_stand_shoot_pistol
	}

// MG & SMG
	weaponclass autofire, movetype moving
	{
		// Play no special firing animation
	}
	weaponclass autofire, movetype crouching, weapon_position ads
	{
		torso pt_crouch_shoot_auto_ads duration 150
	}
	weaponclass autofire, movetype crouching
	{
		torso pt_crouch_shoot_auto duration 150
	}
	weaponclass autofire, weapon_position ads
	{
		torso pt_stand_shoot_auto_ads duration 150
	}
	weaponclass autofire
	{
		torso pt_stand_shoot_auto duration 150
	}

// PROJECTILE WEAPONS (assume ads since you can't fire these from the hip)
	weaponclass rocketlauncher, movetype moving
	{
		// Play no special firing animation
	}
	weaponclass rocketlauncher, movetype crouching
	{
		torso pt_crouch_shoot_ads
	}
	weaponclass rocketlauncher
	{
		torso pt_stand_shoot_ads
	}

// GRENADES
//	 weaponclass grenade, movetype idlecr // Crouch, still
//	 {
//		  both pb_crouch_grenade_throw
//	 }
//	 weaponclass grenade, movetype crouching // Crouch, moving
//	 {
//		 torso pt_crouch_grenade_throw
//	 }
// 	 weaponclass grenade, movetype idle  // Stand still
//	 {
//		 both pb_stand_grenade_throw blendtime 10 
//	 }
//	 weaponclass grenade     // Stand, moving
//	{
// 		 torso fp_gnad_stand_pull_pin blendtime 10 
// 	}
	
//bolt (RIFLES)
	playerAnimType sniper, movetype moving
	{
		// Play no special firing animation
	}
	playerAnimType sniper, movetype crouching, weapon_position ads
	{
		torso pt_crouch_rifle_fire_ads
	}
	playerAnimType sniper, movetype crouching
	{
		torso pt_crouch_rifle_fire
	}
	playerAnimType sniper, weapon_position ads
	{
		torso pt_rifle_fire_ads
	}
	playerAnimType sniper
	{
		torso pt_rifle_fire
	}
// DEFAULT (RIFLES)
//	 movetype prone
//	 {
//	  torso pt_prone_shoot
//	 }
//	 movetype moving
//	 {
//	   // Play no special firing animation
//	 }
//	 movetype crouching, weapon_position ads
//	 {
//	  torso pt_crouch_shoot_ads
//	 }
//	 movetype crouching
//	 {
//	  torso pt_crouch_shoot
//	 }
// 	 weapon_position ads
// 	 {
// 	  torso fp_p99_ads_fire
// 	 }
//	 default
//	 {
//	 torso fp_p99_fire
//	 }
}

stand_to_crouch
{
	weaponclass unarmed
	{
		torso fp_unarmed_idle
	}

	weapon_anim $empty_idle, weapon_ammo empty
		{
			torso $empty_idle
		}

	weapon_anim $idle
		{
			torso $idle
		}

	default
	{
		torso pt_pistol_idle
	}
	default
	{
		legs pl_crouch_idle
	}
}

crouch_to_stand
{
	weaponclass unarmed
	{
		torso fp_unarmed_idle
	}	

	weapon_anim $empty_idle, weapon_ammo empty
		{
			torso $empty_idle
		}

	weapon_anim $idle
		{
			torso $idle
		}

	default
	{
		torso pt_pistol_idle
	}
	default
	{
		legs pl_stand_idle
	}
}

door_bash
{
	default
	{
		both fp_stnd_door_bash
	}
}


meleeattack
{
	weaponclass unarmed
	{
		torso fp_p99_melee
	}

	weapon_anim $melee
		{
			torso $melee
		}

	default
	{
		torso fp_p99_melee
	}
}

dropweapon
{
//	FOR_EACH_WEAPON ( $empty_drop )
//	{
//		weapon $name, weapon_ammo empty
//		{
//			torso $empty_drop
//		}
//	}
//	FOR_EACH_WEAPON ( $alt_drop )
//	{
//		weapon $name, alt
//		{
//			torso $alt_drop
//		}
//	}
//	FOR_EACH_WEAPON ( $quick_drop )
//	{
//		weapon $name, quick
//		{
//			torso $quick_drop
//		}
//	}

	weapon_anim $drop
	{
		torso $drop
	}

	default
	{
		torso pt_stand_pullout_pose
	}
}

raiseweapon
{
//	FOR_EACH_WEAPON ( $empty_raise )
//	{
//		weapon $name, weapon_ammo empty
//		{
//			torso $empty_raise
//		}
//	}
//	FOR_EACH_WEAPON ( $alt_raise )
//	{
//		weapon $name, alt
//		{
//			torso $alt_raise
//		}
//	}
//	FOR_EACH_WEAPON ( $quick_raise )
//	{
//		weapon $name, quick
//		{
//			torso $quick_raise
//		}
//	}

	weapon_anim $raise
	{
		torso $raise
	}

//	// (Boon 07-11-2003) Don't want anything here - just blend into the correct pose.
}

silencer_on
{
	weapon_anim $silencer_on
	{
		torso $silencer_on
	}
}

silencer_off
{
	weapon_anim $silencer_off
	{
		torso $silencer_off
	}
}

//ads_in
//{
//	weapon p99
//	{
//		torso fp_p99_stnd_ads_up
//	}
//	weapon p99_silenced
//	{
//		torso fp_p99_stnd_ads_up
//	}
//	
//	default
//	{
//		torso fp_p99_stnd_ads_up
//	}	
//}

//ads_out
//{
//	weapon p99
//	{
//		torso fp_p99_stnd_ads_down						
//	}
//	weapon p99_silenced
//	{
//		torso fp_p99_stnd_ads_down						
//	}
//	
//	default
//	{
//		torso fp_p99_stnd_ads_down
//	}	
//}

reload
{
	playerAnimType sw500, ammo_clip 0
	{
		torso sw500_reload_0
	}

	playerAnimType sw500, ammo_clip 1
	{
		torso sw500_reload_4
	}

	playerAnimType sw500, ammo_clip 2
	{
		torso sw500_reload_3
	}

	playerAnimType sw500, ammo_clip 3
	{
		torso sw500_reload_2
	}

	playerAnimType sw500, ammo_clip 4
	{
		torso sw500_reload_1
	}

	weapon_anim $reload_empty, weapon_ammo empty
		{
			torso $reload_empty
		}

	weapon_anim $reload
		{
			torso $reload
		}

	default
	{
		torso pt_reload_stand_rifle
	}
}

reload_start
{
	weapon_anim $reload_start
		{
			torso $reload_start
		}
	}

reload_end
{
	weapon_anim $reload_end
		{
			torso $reload_end
		}
	}

jump
{
	default
	{
		legs pl_stand_jump
	}
}

jumpbk
{
	default
	{
		legs pl_stand_jump
	}
}


land
{
	default
	{
		legs pl_stand_idle duration 10
	}
}

shellshock
{
	movetype moving
	{
		torso pb_stand_shellshock duration 5000 blendtime 50
	}
	movetype idle
	{
		torso pb_stand_shellshock duration 5000 blendtime 50
	}
	movetype crouching
	{
		torso pb_crouch_shellshock duration 5000 blendtime 50
	}
}

DEATH
{
	movetype sprint
	{
		both qk_s_s_necksnap_thug_a_mp
	}
	movetype qk_root
	{
		both qk_s_s_necksnap_thug_a_mp
	}	
	movetype qk_necksnap
	{
		both qk_s_s_necksnap_thug_a_mp
	}
	movetype qk_grab_punch
	{
		both qk_s_s_grbpnch_thug_a_mp
	}
	movetype qk_neckbreak
	{
		both qk_s_s_neck_break_thug_a_mp
	}
//	movetype qk_rear_kill
//	{
//		both mp_qk_rear_01_victim
//	}
//	movetype qk_forward_kill
//	{
//		both mp_qk_forward_01_victim
//	}			
//	movetype prone
//	{
//		both pb_prone_death_quickdeath
//	}
//	movetype idlecr
//	{
//		both pb_crouch_death_headshot_front
//		both pb_crouch_death_clutchchest
//		both pb_crouch_death_flip
//		both pb_crouch_death_fetal
//		both pb_crouch_death_falltohands
//	}
//	movetype run, strafing back
//	{
//		both pb_death_run_back
//	}
//	movetype run AND runcr, strafing left
//	{
//		both pb_death_run_left
//	}
//	movetype run AND runcr, strafing right
//	{
//		both pb_death_run_right
//	}
//	movetype runcr
//	{
//		both pb_crouchrun_death_drop
//		both pb_crouchrun_death_crumple
//	}
//	movetype run
//	{
//		both pb_death_run_forward_crumple
//		both pb_death_run_onfront
//		both pb_death_run_stumble
//	}
	default
	{
		both pb_stand_death_neckdeath
//		both pb_stand_death_headchest_topple
//		both pb_stand_death_frontspin
//		both pb_stand_death_nervedeath
//		both pb_stand_death_legs
//		both pb_stand_death_lowerback
//		both pb_stand_death_head_collapse
//		both pb_stand_death_neckdeath_thrash
	}
}

pain
{
//	movetype crouching
//	{
//		both pb_crouch_pain_holdStomach
//	}
//	default
//	{
//		both pb_crouch_pain_holdStomach
//	}
}

scriptevent
{
	event door_bash
	{
		both fp_stnd_door_bash
	}
	
	event test_this
	{
		both pb_ladder_get_off_top
	}
	event door_open_push_knob
	{
		both fp_stnd_door_push_knob	
	}
	event bombplant
	{
		torso pb_stand_bombplant
	}
	event bombdefuse
	{
		torso pb_stand_bombdefuse
	}
	event revive_raise
	{
		both pb_revive_raise
	}
	event revive_kick
	{
		both pb_revive_kick
	}
	event phonedownloadraise
	{
		torso fp_phone_mp_interact_raise
	}
	event phonedownload
	{
		torso fp_phone_mp_interact_idle
	}
	event phonedownloaddrop
	{
		torso fp_phone_mp_interact_drop
	}
	event phoneuploadraise
	{
		both fp_phone_download_raise
	}
	event phoneupload
	{
		both fp_phone_download
	}
	event phoneuploaddrop
	{
		both fp_phone_download_drop
	}
	event phonehacklock
	{
		both pb_security_lock
	}
	
	event ChairExitStumble
	{
		both Pbond_DrinkSpill
		both Pbond_ChairExitStumble
	}	
	event StumbleRight
	{
		both Pbond_StumbleRight
	}	
	event StumbleLeft
	{
		both Pbond_StumbleLeft
	}	
	event StaggerWalk
	{
		both Pbond_StaggerWalk
	}
	event StaggerFall
	{
		both Pbond_StaggerFall
	}
	event Stagger2WallSteady
	{
		both Pbond_Stagger2WallSteady
	}	
	event DoubleDoorOpen
	{
		both Pbond_DoubleDoorOpen
	}			
	event RailingStumble
	{
		both Pbond_RailingStumble
	}		
	event ParkedCarHit
	{
		both Pbond_ParkedCarHit
	}		
	event ThroatStrike
	{
		both Pbond_ThroatStrike
	}		
	event SaltGrab
	{
		both Pbond_SaltGrab
	}	
	event BargeGetup	
	{
		both Temp_Bond_Get_Up
	}
	default
	{
		both fp_phone_stylus
	}
	default
	{
		both fp_phone_stylus_raise
	}
	default
	{
		both fp_phone_stylus_drop
	}
	default
	{
		both fp_phone_download
	}
	default
	{
		both fp_phone_download_raise
	}
	default
	{
		both fp_phone_download_drop
	}
	default
	{
		both fp_phone_panel
	}
	default
	{
		both fp_phone_panel_raise
	}
	default
	{
		both fp_phone_panel_drop
	}
	default
	{
		both fp_phone_take_photo
	}
}
